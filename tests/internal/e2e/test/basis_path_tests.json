{
    "cpp/unitTests/QUOTES_EXAMPLE":{
        "quotes_example":{
            "Moo::honk(int,int,int)":{
                "BASIS-PATH-001" :"-- Unit: quotes_example\n\n-- Subprogram: Moo::honk(int,int,int)\n\n-- Test Case: BASIS-PATH-001\nTEST.UNIT:quotes_example\nTEST.SUBPROGRAM:Moo::honk(int,int,int)\nTEST.REPLACE\nTEST.NAME:BASIS-PATH-001\nTEST.BASIS_PATH:1 of 1\nTEST.NOTES:\n   No branches in subprogram\nTEST.END_NOTES:\nTEST.VALUE:quotes_example.<<GLOBAL>>.(cl).Moo.Moo.<<constructor>>.Moo().<<call>>:0\nTEST.END" 
            }
        }
    },
    "cpp/unitTests/DATABASE-MANAGER":{
        "database":{
            "DataBase::~DataBase": {
                "BASIS-PATH-001" : "-- Unit: database\n\n-- Subprogram: DataBase::~DataBase\n\n-- Test Case: BASIS-PATH-001\nTEST.UNIT:database\nTEST.SUBPROGRAM:DataBase::~DataBase\nTEST.REPLACE\nTEST.NAME:BASIS-PATH-001\nTEST.BASIS_PATH:1 of 1\nTEST.NOTES:\n   No branches in subprogram\nTEST.END_NOTES:\nTEST.VALUE:database.<<GLOBAL>>.(cl).DataBase.DataBase.<<constructor>>.DataBase().<<call>>:0\nTEST.END"
             },
            "DataBase::DataBase": {
                "BASIS-PATH-001" : "-- Unit: database\n\n-- Subprogram: DataBase::DataBase\n\n-- Test Case: BASIS-PATH-001\nTEST.UNIT:database\nTEST.SUBPROGRAM:DataBase::DataBase\nTEST.REPLACE\nTEST.NAME:BASIS-PATH-001\nTEST.BASIS_PATH:1 of 1\nTEST.NOTES:\n   No branches in subprogram\nTEST.END_NOTES:\nTEST.END"
            },
            "DataBase::DeleteAllRecords": {
                "BASIS-PATH-001" :"-- Unit: database\n\n-- Subprogram: DataBase::DeleteAllRecords\n\n-- Test Case: BASIS-PATH-001\nTEST.UNIT:database\nTEST.SUBPROGRAM:DataBase::DeleteAllRecords\nTEST.REPLACE\nTEST.NAME:BASIS-PATH-001\nTEST.BASIS_PATH:1 of 2\nTEST.NOTES:\nThis is an automatically generated test case.\n   Test Path 1\n      (1) for (I < size) ==> FALSE\n   Test Case Generation Notes:\nTEST.END_NOTES:\nTEST.VALUE:database.<<GLOBAL>>.(cl).DataBase.DataBase.<<constructor>>.DataBase().<<call>>:0\nTEST.VALUE:database.DataBase::DeleteAllRecords.size:<<MIN>>\nTEST.VALUE:database.DataBase::DeleteAllRecords.Data:<<malloc 1>>\nTEST.END",
                "BASIS-PATH-002" :"-- Unit: database\n\n-- Subprogram: DataBase::DeleteAllRecords\n\n-- Test Case: BASIS-PATH-002\nTEST.UNIT:database\nTEST.SUBPROGRAM:DataBase::DeleteAllRecords\nTEST.REPLACE\nTEST.NAME:BASIS-PATH-002\nTEST.BASIS_PATH:2 of 2\nTEST.NOTES:\nThis is an automatically generated test case.\n   Test Path 2\n      (1) for (I < size) ==> TRUE\n   Test Case Generation Notes:\nTEST.END_NOTES:\nTEST.VALUE:database.<<GLOBAL>>.(cl).DataBase.DataBase.<<constructor>>.DataBase().<<call>>:0\nTEST.VALUE:database.DataBase::DeleteAllRecords.size:<<MAX>>\nTEST.VALUE:database.DataBase::DeleteAllRecords.Data:<<malloc 1>>\nTEST.END"
            },
            "DataBase::DeleteOneRecord":{
                "BASIS-PATH-001-PARTIAL":"-- Unit: database\n\n-- Subprogram: DataBase::DeleteOneRecord\n\n-- Test Case: BASIS-PATH-001-PARTIAL\nTEST.UNIT:database\nTEST.SUBPROGRAM:DataBase::DeleteOneRecord\nTEST.REPLACE\nTEST.NAME:BASIS-PATH-001-PARTIAL\nTEST.BASIS_PATH:1 of 2 (partial)\nTEST.NOTES:\nThis is an automatically generated test case.\n   Test Path 1\n      (1) for (J < SeatsAtOneTable) ==> FALSE\n   Test Case Generation Notes:\n      Cannot set local variable J in branch 1\nTEST.END_NOTES:\nTEST.VALUE:database.<<GLOBAL>>.(cl).DataBase.DataBase.<<constructor>>.DataBase().<<call>>:0\nTEST.VALUE:database.DataBase::DeleteOneRecord.Table:0\nTEST.VALUE:database.DataBase::DeleteOneRecord.Data:<<malloc 1>>\nTEST.END",
                "BASIS-PATH-002-PARTIAL":"-- Unit: database\n\n-- Subprogram: DataBase::DeleteOneRecord\n\n-- Test Case: BASIS-PATH-002-PARTIAL\nTEST.UNIT:database\nTEST.SUBPROGRAM:DataBase::DeleteOneRecord\nTEST.REPLACE\nTEST.NAME:BASIS-PATH-002-PARTIAL\nTEST.BASIS_PATH:2 of 2 (partial)\nTEST.NOTES:\nThis is an automatically generated test case.\n   Test Path 2\n      (1) for (J < SeatsAtOneTable) ==> TRUE\n   Test Case Generation Notes:\n      Cannot set local variable J in branch 1\nTEST.END_NOTES:\nTEST.VALUE:database.<<GLOBAL>>.(cl).DataBase.DataBase.<<constructor>>.DataBase().<<call>>:0\nTEST.VALUE:database.DataBase::DeleteOneRecord.Table:0\nTEST.VALUE:database.DataBase::DeleteOneRecord.Data:<<malloc 1>>\nTEST.END"
            },
            "DataBase::DeleteRecord":{
                "BASIS-PATH-001":"-- Unit: database\n\n-- Subprogram: DataBase::DeleteRecord\n\n-- Test Case: BASIS-PATH-001\nTEST.UNIT:database\nTEST.SUBPROGRAM:DataBase::DeleteRecord\nTEST.REPLACE\nTEST.NAME:BASIS-PATH-001\nTEST.BASIS_PATH:1 of 1\nTEST.NOTES:\n   No branches in subprogram\nTEST.END_NOTES:\nTEST.VALUE:database.<<GLOBAL>>.(cl).DataBase.DataBase.<<constructor>>.DataBase().<<call>>:0\nTEST.END"
            },
            "DataBase::DeleteTableRecord":{
                "BASIS-PATH-001":"-- Unit: database\n\n-- Subprogram: DataBase::DeleteTableRecord\n\n-- Test Case: BASIS-PATH-001\nTEST.UNIT:database\nTEST.SUBPROGRAM:DataBase::DeleteTableRecord\nTEST.REPLACE\nTEST.NAME:BASIS-PATH-001\nTEST.BASIS_PATH:1 of 1\nTEST.NOTES:\n   No branches in subprogram\nTEST.END_NOTES:\nTEST.VALUE:database.<<GLOBAL>>.(cl).DataBase.DataBase.<<constructor>>.DataBase().<<call>>:0\nTEST.END"
            },
            "DataBase::GetTableRecord":{
                "BASIS-PATH-001":"-- Unit: database\n\n-- Subprogram: DataBase::GetTableRecord\n\n-- Test Case: BASIS-PATH-001\nTEST.UNIT:database\nTEST.SUBPROGRAM:DataBase::GetTableRecord\nTEST.REPLACE\nTEST.NAME:BASIS-PATH-001\nTEST.BASIS_PATH:1 of 1\nTEST.NOTES:\n   No branches in subprogram\nTEST.END_NOTES:\nTEST.VALUE:database.<<GLOBAL>>.(cl).DataBase.DataBase.<<constructor>>.DataBase().<<call>>:0\nTEST.VALUE:database.DataBase::GetTableRecord.Table:<<MIN>>\nTEST.VALUE:database.DataBase::GetTableRecord.Data:<<malloc 1>>\nTEST.END"
            },
            "DataBase::UpdateTableRecord":{
                "BASIS-PATH-001":"-- Unit: database\n\n-- Subprogram: DataBase::UpdateTableRecord\n\n-- Test Case: BASIS-PATH-001\nTEST.UNIT:database\nTEST.SUBPROGRAM:DataBase::UpdateTableRecord\nTEST.REPLACE\nTEST.NAME:BASIS-PATH-001\nTEST.BASIS_PATH:1 of 1\nTEST.NOTES:\n   No branches in subprogram\nTEST.END_NOTES:\nTEST.VALUE:database.<<GLOBAL>>.(cl).DataBase.DataBase.<<constructor>>.DataBase().<<call>>:0\nTEST.VALUE:database.DataBase::UpdateTableRecord.Table:<<MIN>>\nTEST.VALUE:database.DataBase::UpdateTableRecord.Data:<<malloc 1>>\nTEST.END"
            }
        },
        "manager":{
           "Manager::AddIncludedDessert":{
            "BASIS-PATH-001":"-- Unit: manager\n\n-- Subprogram: Manager::AddIncludedDessert\n\n-- Test Case: BASIS-PATH-001\nTEST.UNIT:manager\nTEST.SUBPROGRAM:Manager::AddIncludedDessert\nTEST.REPLACE\nTEST.NAME:BASIS-PATH-001\nTEST.BASIS_PATH:1 of 4\nTEST.NOTES:\nThis is an automatically generated test case.\n   Test Path 1\n      (1) if (!Order) ==> TRUE\n   Test Case Generation Notes:\nTEST.END_NOTES:\nTEST.VALUE:manager.<<GLOBAL>>.(cl).Manager.Manager.<<constructor>>.Manager().<<call>>:0\nTEST.VALUE:manager.Manager::AddIncludedDessert.Order:<<null>>\nTEST.END",
            "BASIS-PATH-002":"-- Unit: manager\n\n-- Subprogram: Manager::AddIncludedDessert\n\n-- Test Case: BASIS-PATH-002\nTEST.UNIT:manager\nTEST.SUBPROGRAM:Manager::AddIncludedDessert\nTEST.REPLACE\nTEST.NAME:BASIS-PATH-002\nTEST.BASIS_PATH:2 of 4\nTEST.NOTES:\nThis is an automatically generated test case.\n   Test Path 2\n      (1) if (!Order) ==> FALSE\n      (2) if ((Order->Entree == (Steak) && Order->Salad == (Caesar)) && Order->Beverage == (MixedDrink)) ==> FALSE\n      (3) if ((Order->Entree == (Lobster) && Order->Salad == (Green)) && Order->Beverage == (Wine)) ==> FALSE\n   Test Case Generation Notes:\nTEST.END_NOTES:\nTEST.VALUE:manager.<<GLOBAL>>.(cl).Manager.Manager.<<constructor>>.Manager().<<call>>:0\nTEST.VALUE:manager.Manager::AddIncludedDessert.Order:<<malloc 1>>\nTEST.VALUE:manager.Manager::AddIncludedDessert.Order[0].Entree:NoEntree\nTEST.END",
            "BASIS-PATH-003":"-- Unit: manager\n\n-- Subprogram: Manager::AddIncludedDessert\n\n-- Test Case: BASIS-PATH-003\nTEST.UNIT:manager\nTEST.SUBPROGRAM:Manager::AddIncludedDessert\nTEST.REPLACE\nTEST.NAME:BASIS-PATH-003\nTEST.BASIS_PATH:3 of 4\nTEST.NOTES:\nThis is an automatically generated test case.\n   Test Path 3\n      (1) if (!Order) ==> FALSE\n      (2) if ((Order->Entree == (Steak) && Order->Salad == (Caesar)) && Order->Beverage == (MixedDrink)) ==> FALSE\n      (3) if ((Order->Entree == (Lobster) && Order->Salad == (Green)) && Order->Beverage == (Wine)) ==> TRUE\n   Test Case Generation Notes:\nTEST.END_NOTES:\nTEST.VALUE:manager.<<GLOBAL>>.(cl).Manager.Manager.<<constructor>>.Manager().<<call>>:0\nTEST.VALUE:manager.Manager::AddIncludedDessert.Order:<<malloc 1>>\nTEST.VALUE:manager.Manager::AddIncludedDessert.Order[0].Salad:Green\nTEST.VALUE:manager.Manager::AddIncludedDessert.Order[0].Entree:Lobster\nTEST.VALUE:manager.Manager::AddIncludedDessert.Order[0].Beverage:Wine\nTEST.END",
            "BASIS-PATH-004":"-- Unit: manager\n\n-- Subprogram: Manager::AddIncludedDessert\n\n-- Test Case: BASIS-PATH-004\nTEST.UNIT:manager\nTEST.SUBPROGRAM:Manager::AddIncludedDessert\nTEST.REPLACE\nTEST.NAME:BASIS-PATH-004\nTEST.BASIS_PATH:4 of 4\nTEST.NOTES:\nThis is an automatically generated test case.\n   Test Path 4\n      (1) if (!Order) ==> FALSE\n      (2) if ((Order->Entree == (Steak) && Order->Salad == (Caesar)) && Order->Beverage == (MixedDrink)) ==> TRUE\n   Test Case Generation Notes:\nTEST.END_NOTES:\nTEST.VALUE:manager.<<GLOBAL>>.(cl).Manager.Manager.<<constructor>>.Manager().<<call>>:0\nTEST.VALUE:manager.Manager::AddIncludedDessert.Order:<<malloc 1>>\nTEST.VALUE:manager.Manager::AddIncludedDessert.Order[0].Salad:Caesar\nTEST.VALUE:manager.Manager::AddIncludedDessert.Order[0].Entree:Steak\nTEST.VALUE:manager.Manager::AddIncludedDessert.Order[0].Beverage:MixedDrink\nTEST.END"
           },
           "Manager::AddPartyToWaitingList":{
            "BASIS-PATH-001":"-- Unit: manager\n\n-- Subprogram: Manager::AddPartyToWaitingList\n\n-- Test Case: BASIS-PATH-001\nTEST.UNIT:manager\nTEST.SUBPROGRAM:Manager::AddPartyToWaitingList\nTEST.REPLACE\nTEST.NAME:BASIS-PATH-001\nTEST.BASIS_PATH:1 of 3\nTEST.NOTES:\nThis is an automatically generated test case.\n   Test Path 1\n      (1) if (WaitingListSize > (9)) ==> FALSE\n      (2) while (Name && *Name) ==> FALSE\n   Test Case Generation Notes:\nTEST.END_NOTES:\nTEST.VALUE:manager.<<GLOBAL>>.(cl).Manager.Manager.<<constructor>>.Manager().<<call>>:0\nTEST.VALUE:manager.<<GLOBAL>>.(cl).Manager.Manager.WaitingListSize:<<MIN>>\nTEST.VALUE:manager.Manager::AddPartyToWaitingList.Name:<<null>>\nTEST.END",
            "BASIS-PATH-002":"-- Unit: manager\n\n-- Subprogram: Manager::AddPartyToWaitingList\n\n-- Test Case: BASIS-PATH-002\nTEST.UNIT:manager\nTEST.SUBPROGRAM:Manager::AddPartyToWaitingList\nTEST.REPLACE\nTEST.NAME:BASIS-PATH-002\nTEST.BASIS_PATH:2 of 3\nTEST.NOTES:\nThis is an automatically generated test case.\n   Test Path 2\n      (1) if (WaitingListSize > (9)) ==> FALSE\n      (2) while (Name && *Name) ==> TRUE\n   Test Case Generation Notes:\nTEST.END_NOTES:\nTEST.VALUE:manager.<<GLOBAL>>.(cl).Manager.Manager.<<constructor>>.Manager().<<call>>:0\nTEST.VALUE:manager.<<GLOBAL>>.(cl).Manager.Manager.WaitingListSize:<<MIN>>\nTEST.VALUE:manager.Manager::AddPartyToWaitingList.Name:<<malloc 1>>\nTEST.VALUE:manager.Manager::AddPartyToWaitingList.Name[0]:<<MIN>>\nTEST.END\n",
            "BASIS-PATH-003":"-- Unit: manager\n\n-- Subprogram: Manager::AddPartyToWaitingList\n\n-- Test Case: BASIS-PATH-003\nTEST.UNIT:manager\nTEST.SUBPROGRAM:Manager::AddPartyToWaitingList\nTEST.REPLACE\nTEST.NAME:BASIS-PATH-003\nTEST.BASIS_PATH:3 of 3\nTEST.NOTES:\nThis is an automatically generated test case.\n   Test Path 3\n      (1) if (WaitingListSize > (9)) ==> TRUE\n      (2) while (Name && *Name) ==> FALSE\n   Test Case Generation Notes:\nTEST.END_NOTES:\nTEST.VALUE:manager.<<GLOBAL>>.(cl).Manager.Manager.<<constructor>>.Manager().<<call>>:0\nTEST.VALUE:manager.<<GLOBAL>>.(cl).Manager.Manager.WaitingListSize:<<MAX>>\nTEST.VALUE:manager.Manager::AddPartyToWaitingList.Name:<<null>>\nTEST.END"
           },
           "Manager::ClearTable":{
            "BASIS-PATH-001":"-- Unit: manager\n\n-- Subprogram: Manager::ClearTable\n\n-- Test Case: BASIS-PATH-001\nTEST.UNIT:manager\nTEST.SUBPROGRAM:Manager::ClearTable\nTEST.REPLACE\nTEST.NAME:BASIS-PATH-001\nTEST.BASIS_PATH:1 of 1\nTEST.NOTES:\n   No branches in subprogram\nTEST.END_NOTES:\nTEST.VALUE:manager.<<GLOBAL>>.(cl).Manager.Manager.<<constructor>>.Manager().<<call>>:0\nTEST.END"
           },
           "Manager::GetCheckTotal":{
            "BASIS-PATH-001":"-- Unit: manager\n\n-- Subprogram: Manager::GetCheckTotal\n\n-- Test Case: BASIS-PATH-001\nTEST.UNIT:manager\nTEST.SUBPROGRAM:Manager::GetCheckTotal\nTEST.REPLACE\nTEST.NAME:BASIS-PATH-001\nTEST.BASIS_PATH:1 of 1\nTEST.NOTES:\n   No branches in subprogram\nTEST.END_NOTES:\nTEST.VALUE:manager.<<GLOBAL>>.(cl).Manager.Manager.<<constructor>>.Manager().<<call>>:0\nTEST.VALUE:manager.Manager::GetCheckTotal.Table:<<MIN>>\nTEST.END"
           },
           "Manager::GetNextPartyToBeSeated":{
            "BASIS-PATH-001":"-- Unit: manager\n\n-- Subprogram: Manager::GetNextPartyToBeSeated\n\n-- Test Case: BASIS-PATH-001\nTEST.UNIT:manager\nTEST.SUBPROGRAM:Manager::GetNextPartyToBeSeated\nTEST.REPLACE\nTEST.NAME:BASIS-PATH-001\nTEST.BASIS_PATH:1 of 2\nTEST.NOTES:\nThis is an automatically generated test case.\n   Test Path 1\n      (1) if (WaitingListIndex > (9)) ==> FALSE\n   Test Case Generation Notes:\nTEST.END_NOTES:\nTEST.VALUE:manager.<<GLOBAL>>.(cl).Manager.Manager.<<constructor>>.Manager().<<call>>:0\nTEST.VALUE:manager.<<GLOBAL>>.(cl).Manager.Manager.WaitingListIndex:<<MIN>>\nTEST.END",
            "BASIS-PATH-002":"-- Unit: manager\n\n-- Subprogram: Manager::GetNextPartyToBeSeated\n\n-- Test Case: BASIS-PATH-002\nTEST.UNIT:manager\nTEST.SUBPROGRAM:Manager::GetNextPartyToBeSeated\nTEST.REPLACE\nTEST.NAME:BASIS-PATH-002\nTEST.BASIS_PATH:2 of 2\nTEST.NOTES:\nThis is an automatically generated test case.\n   Test Path 2\n      (1) if (WaitingListIndex > (9)) ==> TRUE\n   Test Case Generation Notes:\nTEST.END_NOTES:\nTEST.VALUE:manager.<<GLOBAL>>.(cl).Manager.Manager.<<constructor>>.Manager().<<call>>:0\nTEST.VALUE:manager.<<GLOBAL>>.(cl).Manager.Manager.WaitingListIndex:<<MAX>>\nTEST.END"
           },
           "Manager::Manager":{
            "BASIS-PATH-001":"-- Unit: manager\n\n-- Subprogram: Manager::Manager\n\n-- Test Case: BASIS-PATH-001\nTEST.UNIT:manager\nTEST.SUBPROGRAM:Manager::Manager\nTEST.REPLACE\nTEST.NAME:BASIS-PATH-001\nTEST.BASIS_PATH:1 of 1\nTEST.NOTES:\n   No branches in subprogram\nTEST.END_NOTES:\nTEST.END"
           },
           "Manager::PlaceOrder":{
            "BASIS-PATH-001":"-- Unit: manager\n\n-- Subprogram: Manager::PlaceOrder\n\n-- Test Case: BASIS-PATH-001\nTEST.UNIT:manager\nTEST.SUBPROGRAM:Manager::PlaceOrder\nTEST.REPLACE\nTEST.NAME:BASIS-PATH-001\nTEST.BASIS_PATH:1 of 5\nTEST.NOTES:\nThis is an automatically generated test case.\n   Test Path 1\n      (5) case (Order.Entree) ==> default\n   Test Case Generation Notes:\nTEST.END_NOTES:\nTEST.VALUE:manager.<<GLOBAL>>.(cl).Manager.Manager.<<constructor>>.Manager().<<call>>:0\nTEST.VALUE:manager.Manager::PlaceOrder.Table:<<MIN>>\nTEST.VALUE:manager.Manager::PlaceOrder.Seat:<<MIN>>\nTEST.VALUE:manager.Manager::PlaceOrder.Order.Entree:NoEntree\nTEST.END",
            "BASIS-PATH-002":"-- Unit: manager\n\n-- Subprogram: Manager::PlaceOrder\n\n-- Test Case: BASIS-PATH-002\nTEST.UNIT:manager\nTEST.SUBPROGRAM:Manager::PlaceOrder\nTEST.REPLACE\nTEST.NAME:BASIS-PATH-002\nTEST.BASIS_PATH:2 of 5\nTEST.NOTES:\nThis is an automatically generated test case.\n   Test Path 2\n      (1) case (Order.Entree) ==> Steak\n   Test Case Generation Notes:\nTEST.END_NOTES:\nTEST.VALUE:manager.<<GLOBAL>>.(cl).Manager.Manager.<<constructor>>.Manager().<<call>>:0\nTEST.VALUE:manager.Manager::PlaceOrder.Table:<<MIN>>\nTEST.VALUE:manager.Manager::PlaceOrder.Seat:<<MIN>>\nTEST.VALUE:manager.Manager::PlaceOrder.Order.Entree:Steak\nTEST.END",
            "BASIS-PATH-003":"-- Unit: manager\n\n-- Subprogram: Manager::PlaceOrder\n\n-- Test Case: BASIS-PATH-003\nTEST.UNIT:manager\nTEST.SUBPROGRAM:Manager::PlaceOrder\nTEST.REPLACE\nTEST.NAME:BASIS-PATH-003\nTEST.BASIS_PATH:3 of 5\nTEST.NOTES:\nThis is an automatically generated test case.\n   Test Path 3\n      (2) case (Order.Entree) ==> Chicken\n   Test Case Generation Notes:\nTEST.END_NOTES:\nTEST.VALUE:manager.<<GLOBAL>>.(cl).Manager.Manager.<<constructor>>.Manager().<<call>>:0\nTEST.VALUE:manager.Manager::PlaceOrder.Table:<<MIN>>\nTEST.VALUE:manager.Manager::PlaceOrder.Seat:<<MIN>>\nTEST.VALUE:manager.Manager::PlaceOrder.Order.Entree:Chicken\nTEST.END",
            "BASIS-PATH-004":"-- Unit: manager\n\n-- Subprogram: Manager::PlaceOrder\n\n-- Test Case: BASIS-PATH-004\nTEST.UNIT:manager\nTEST.SUBPROGRAM:Manager::PlaceOrder\nTEST.REPLACE\nTEST.NAME:BASIS-PATH-004\nTEST.BASIS_PATH:4 of 5\nTEST.NOTES:\nThis is an automatically generated test case.\n   Test Path 4\n      (3) case (Order.Entree) ==> Lobster\n   Test Case Generation Notes:\nTEST.END_NOTES:\nTEST.VALUE:manager.<<GLOBAL>>.(cl).Manager.Manager.<<constructor>>.Manager().<<call>>:0\nTEST.VALUE:manager.Manager::PlaceOrder.Table:<<MIN>>\nTEST.VALUE:manager.Manager::PlaceOrder.Seat:<<MIN>>\nTEST.VALUE:manager.Manager::PlaceOrder.Order.Entree:Lobster\nTEST.END",
            "BASIS-PATH-005":"-- Unit: manager\n\n-- Subprogram: Manager::PlaceOrder\n\n-- Test Case: BASIS-PATH-005\nTEST.UNIT:manager\nTEST.SUBPROGRAM:Manager::PlaceOrder\nTEST.REPLACE\nTEST.NAME:BASIS-PATH-005\nTEST.BASIS_PATH:5 of 5\nTEST.NOTES:\nThis is an automatically generated test case.\n   Test Path 5\n      (4) case (Order.Entree) ==> Pasta\n   Test Case Generation Notes:\nTEST.END_NOTES:\nTEST.VALUE:manager.<<GLOBAL>>.(cl).Manager.Manager.<<constructor>>.Manager().<<call>>:0\nTEST.VALUE:manager.Manager::PlaceOrder.Table:<<MIN>>\nTEST.VALUE:manager.Manager::PlaceOrder.Seat:<<MIN>>\nTEST.VALUE:manager.Manager::PlaceOrder.Order.Entree:Pasta\nTEST.END"
           }
        }
    }
}
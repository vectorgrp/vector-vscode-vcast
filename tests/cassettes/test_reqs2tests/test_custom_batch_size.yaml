interactions:
- request:
    body: '{"messages": [{"content": "You are a world-class software engineer specializing
      in requirements engineering.", "role": "system"}, {"content": "\nFind non-atomic
      requirements in the given set of requirements and decompose them.\n\nAn atomic
      requirement is a singular, verifiable, and testable statement. It can be be
      directly validated by a single test case, following a unique execution path
      in the software.\nThe requirements you receive may already be atomic or they
      may contain multiple embedded requirements that need to be further decomposed
      into atomic statements such that each one is testable using a single test case.\nEach
      new atomic requirement must be a self-contained statement that can be directly
      tested. If one of the decomposed requirements refers to any of the others, it
      is not atomic and you have FAILED.\n\nRequirements:\n1. The system will support
      6 tables.\n2. The system will support 4 seats per table.\n3. The system will
      support the following entrees:\n\nsteak\nchicken\nlobster\npasta\nnone\n4. Placing
      an order updates the table''s occupied status to true within the table database.\n5.
      Placing an order updates the table''s number in party within the table database.\n6.
      Placing an order updates the seat''s order within the table database.\n7. Placing
      an order increases the table''s check total within the table database, by an
      amount depending on the entree ordered, according to the following schedule:\n\nEntree:
      Amount\n\nsteak: 14.0\nchicken: 10.0\nlobster: 18.0\npasta: 12.0\nnone: 0.0\n8.
      Clearing a table updates the table''s occupied status to false within the table
      database.\n9. Clearing a table updates the table''s number in party to 1 within
      the table database.\n10. Clearing a table clears the orders for all seats of
      the table within the table database.\n11. Clearing a table updates the table''s
      check total to 0.0 within the table database.\n12. The system will provide a
      way to obtain the check total for a given table.\n13. The system will support
      a waiting list of up to 10 parties.\n14. The system will provide a means of
      adding a party to the waiting list, with the party specified by name.\n15. The
      system will provide a means of obtaining the name of the party at the head of
      the waiting list.\n16. The head of the waiting list shall be reset when it reaches
      the end of the waiting list.\n17. Placing certain orders will qualify the seat
      for free dessert, according to the following schedule:\n\nSteak with caesar
      salad and a mixed drink qualifies a seat for pie.\nLobster with green salad
      and wine qualifies a seat for cake.\nNo free dessert otherwise.\n\nYour final
      answer must strictly adhere to the following model. Return your output as a
      JSON object:\n{\n    \"nonatomic_requirements\": [\n        {\n            \"original_requirement\":
      \"<original requirement>\",\n            \"original_requirement_index\": \"<index
      of the original requirement>\",\n            \"atomic_requirements\": [\n                \"<atomic
      requirement 1>\",\n                \"<atomic requirement 2>\", // Again: This
      requirement should not refer to atomic requirement 1, either directly or indirectly,
      and vice versa. It needs to be understandable on its own without having read
      the other atomic requirements\n                ...\n            ]\n        },\n        ...\n    ]\n}\n\nExceptions:\nSometimes
      there are multiple test conditions that need to be checked to validate a single
      requirement but this is possible using a single test case, i.e., a single run
      of the function with some inputs and expected outputs is sufficient.\nIn such
      cases, the requirement should be considered atomic and therefore not added to
      the output (even though it is technically composed of multiple test conditions).\n\nRemember:\n-
      The new requirements cannot refer to each other, e.g., \"If the above is not
      true, then the system should do X\" is not atomic nor is \"...as described above...\"\n",
      "role": "user"}], "model": "o4-mini", "response_format": {"json_schema": {"name":
      "RequirementDescription", "schema": {"$defs": {"DecomposedRequirement": {"additionalProperties":
      false, "properties": {"atomic_requirements": {"items": {"type": "string"}, "title":
      "Atomic Requirements", "type": "array"}, "original_requirement": {"title": "Original
      Requirement", "type": "string"}, "original_requirement_index": {"title": "Original
      Requirement Index", "type": "integer"}}, "required": ["original_requirement",
      "original_requirement_index", "atomic_requirements"], "title": "DecomposedRequirement",
      "type": "object"}}, "additionalProperties": false, "properties": {"nonatomic_requirements":
      {"items": {"$ref": "#/$defs/DecomposedRequirement"}, "title": "Nonatomic Requirements",
      "type": "array"}}, "required": ["nonatomic_requirements"], "title": "RequirementDescription",
      "type": "object"}, "strict": true}, "type": "json_schema"}, "seed": 42, "stream":
      false}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      api-key:
      - REDACTED
      authorization:
      - REDACTED
      connection:
      - keep-alive
      content-length:
      - '4879'
      content-type:
      - application/json
      host:
      - REDACTED
      user-agent:
      - AsyncAzureOpenAI/Python 1.58.1
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-helper-method:
      - beta.chat.completions.parse
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.58.1
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.12
    method: POST
    uri: https://rg-rds-play-openai-pes-ppt.openai.azure.com/openai/deployments/o4-mini/chat/completions?api-version=2024-12-01-preview
  response:
    body:
      string: '{"choices":[{"content_filter_results":{"hate":{"filtered":false,"severity":"safe"},"protected_material_code":{"filtered":false,"detected":false},"protected_material_text":{"filtered":false,"detected":false},"self_harm":{"filtered":false,"severity":"safe"},"sexual":{"filtered":false,"severity":"safe"},"violence":{"filtered":false,"severity":"safe"}},"finish_reason":"stop","index":0,"logprobs":null,"message":{"annotations":[],"content":"{\"nonatomic_requirements\":[{\"original_requirement\":\"Placing
        an order increases the table''s check total within the table database, by
        an amount depending on the entree ordered, according to the following schedule:\\n\\nEntree:
        Amount\\n\\nsteak: 14.0\\nchicken: 10.0\\nlobster: 18.0\\npasta: 12.0\\nnone:
        0.0\",\"original_requirement_index\":7,\"atomic_requirements\":[\"Placing
        an order for steak increases the table''s check total by 14.0 within the table
        database.\",\"Placing an order for chicken increases the table''s check total
        by 10.0 within the table database.\",\"Placing an order for lobster increases
        the table''s check total by 18.0 within the table database.\",\"Placing an
        order for pasta increases the table''s check total by 12.0 within the table
        database.\",\"Placing an order for none increases the table''s check total
        by 0.0 within the table database.\"]},{\"original_requirement\":\"Placing
        certain orders will qualify the seat for free dessert, according to the following
        schedule:\\n\\nSteak with caesar salad and a mixed drink qualifies a seat
        for pie.\\nLobster with green salad and wine qualifies a seat for cake.\\nNo
        free dessert otherwise.\",\"original_requirement_index\":17,\"atomic_requirements\":[\"If
        a seat places an order consisting of steak, caesar salad, and a mixed drink
        then the seat qualifies for free pie.\",\"If a seat places an order consisting
        of lobster, green salad, and wine then the seat qualifies for free cake.\",\"If
        a seat places any other combination of order items then the seat does not
        qualify for a free dessert.\"]}]}","refusal":null,"role":"assistant"}}],"created":1752564142,"id":"chatcmpl-BtUHWiukr458oIUQ7G2bz1IrV5fYN","model":"o4-mini-2025-04-16","object":"chat.completion","prompt_filter_results":[{"prompt_index":0,"content_filter_results":{"hate":{"filtered":false,"severity":"safe"},"jailbreak":{"filtered":false,"detected":false},"self_harm":{"filtered":false,"severity":"safe"},"sexual":{"filtered":false,"severity":"safe"},"violence":{"filtered":false,"severity":"safe"}}}],"system_fingerprint":null,"usage":{"completion_tokens":1586,"completion_tokens_details":{"accepted_prediction_tokens":0,"audio_tokens":0,"reasoning_tokens":1216,"rejected_prediction_tokens":0},"prompt_tokens":926,"prompt_tokens_details":{"audio_tokens":0,"cached_tokens":0},"total_tokens":2512}}

        '
    headers:
      Content-Length:
      - '2782'
      Content-Type:
      - application/json
      Date:
      - Tue, 15 Jul 2025 07:22:33 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      apim-request-id:
      - 4ecdcfa2-2926-47db-9f14-5ea33201ae2c
      azureml-model-session:
      - d320-20250619165241
      cmp-upstream-response-duration:
      - '12014'
      x-accel-buffering:
      - 'no'
      x-content-type-options:
      - nosniff
      x-ms-deployment-name:
      - o4-mini
      x-ms-rai-invoked:
      - 'true'
      x-ms-region:
      - Sweden Central
      x-ratelimit-limit-requests:
      - '4680'
      x-ratelimit-limit-tokens:
      - '4680000'
      x-ratelimit-remaining-requests:
      - '4673'
      x-ratelimit-remaining-tokens:
      - '4673392'
      x-request-id:
      - 272741fc-e3ab-4c87-b21d-c24306d79a23
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are a world-class software engineer specializing
      in requirements engineering.", "role": "system"}, {"content": "\nFind non-atomic
      requirements in the given set of requirements and decompose them.\n\nAn atomic
      requirement is a singular, verifiable, and testable statement. It can be be
      directly validated by a single test case, following a unique execution path
      in the software.\nThe requirements you receive may already be atomic or they
      may contain multiple embedded requirements that need to be further decomposed
      into atomic statements such that each one is testable using a single test case.\nEach
      new atomic requirement must be a self-contained statement that can be directly
      tested. If one of the decomposed requirements refers to any of the others, it
      is not atomic and you have FAILED.\n\nRequirements:\n1. The system will support
      6 tables.\n2. The system will support 4 seats per table.\n3. The system will
      support the following entrees:\n\nsteak\nchicken\nlobster\npasta\nnone\n4. Placing
      an order updates the table''s occupied status to true within the table database.\n5.
      Placing an order updates the table''s number in party within the table database.\n6.
      Placing an order updates the seat''s order within the table database.\n7. Placing
      an order increases the table''s check total within the table database, by an
      amount depending on the entree ordered, according to the following schedule:\n\nEntree:
      Amount\n\nsteak: 14.0\nchicken: 10.0\nlobster: 18.0\npasta: 12.0\nnone: 0.0\n8.
      Clearing a table updates the table''s occupied status to false within the table
      database.\n9. Clearing a table updates the table''s number in party to 1 within
      the table database.\n10. Clearing a table clears the orders for all seats of
      the table within the table database.\n11. Clearing a table updates the table''s
      check total to 0.0 within the table database.\n12. The system will provide a
      way to obtain the check total for a given table.\n13. The system will support
      a waiting list of up to 10 parties.\n14. The system will provide a means of
      adding a party to the waiting list, with the party specified by name.\n15. The
      system will provide a means of obtaining the name of the party at the head of
      the waiting list.\n16. The head of the waiting list shall be reset when it reaches
      the end of the waiting list.\n17. Placing certain orders will qualify the seat
      for free dessert, according to the following schedule:\n\nSteak with caesar
      salad and a mixed drink qualifies a seat for pie.\nLobster with green salad
      and wine qualifies a seat for cake.\nNo free dessert otherwise.\n\nYour final
      answer must strictly adhere to the following model. Return your output as a
      JSON object:\n{\n    \"nonatomic_requirements\": [\n        {\n            \"original_requirement\":
      \"<original requirement>\",\n            \"original_requirement_index\": \"<index
      of the original requirement>\",\n            \"atomic_requirements\": [\n                \"<atomic
      requirement 1>\",\n                \"<atomic requirement 2>\", // Again: This
      requirement should not refer to atomic requirement 1, either directly or indirectly,
      and vice versa. It needs to be understandable on its own without having read
      the other atomic requirements\n                ...\n            ]\n        },\n        ...\n    ]\n}\n\nExceptions:\nSometimes
      there are multiple test conditions that need to be checked to validate a single
      requirement but this is possible using a single test case, i.e., a single run
      of the function with some inputs and expected outputs is sufficient.\nIn such
      cases, the requirement should be considered atomic and therefore not added to
      the output (even though it is technically composed of multiple test conditions).\n\nRemember:\n-
      The new requirements cannot refer to each other, e.g., \"If the above is not
      true, then the system should do X\" is not atomic nor is \"...as described above...\"\n",
      "role": "user"}], "model": "o4-mini", "response_format": {"json_schema": {"name":
      "RequirementDescription", "schema": {"$defs": {"DecomposedRequirement": {"additionalProperties":
      false, "properties": {"atomic_requirements": {"items": {"type": "string"}, "title":
      "Atomic Requirements", "type": "array"}, "original_requirement": {"title": "Original
      Requirement", "type": "string"}, "original_requirement_index": {"title": "Original
      Requirement Index", "type": "integer"}}, "required": ["original_requirement",
      "original_requirement_index", "atomic_requirements"], "title": "DecomposedRequirement",
      "type": "object"}}, "additionalProperties": false, "properties": {"nonatomic_requirements":
      {"items": {"$ref": "#/$defs/DecomposedRequirement"}, "title": "Nonatomic Requirements",
      "type": "array"}}, "required": ["nonatomic_requirements"], "title": "RequirementDescription",
      "type": "object"}, "strict": true}, "type": "json_schema"}, "seed": 42, "stream":
      false}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      api-key:
      - REDACTED
      authorization:
      - REDACTED
      connection:
      - keep-alive
      content-length:
      - '4879'
      content-type:
      - application/json
      host:
      - REDACTED
      user-agent:
      - AsyncAzureOpenAI/Python 1.58.1
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-helper-method:
      - beta.chat.completions.parse
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.58.1
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.12
    method: POST
    uri: https://rg-rds-play-openai-pes-ppt.openai.azure.com/openai/deployments/o4-mini/chat/completions?api-version=2024-12-01-preview
  response:
    body:
      string: '{"choices":[{"content_filter_results":{"hate":{"filtered":false,"severity":"safe"},"protected_material_code":{"filtered":false,"detected":false},"protected_material_text":{"filtered":false,"detected":false},"self_harm":{"filtered":false,"severity":"safe"},"sexual":{"filtered":false,"severity":"safe"},"violence":{"filtered":false,"severity":"safe"}},"finish_reason":"stop","index":0,"logprobs":null,"message":{"annotations":[],"content":"{\"nonatomic_requirements\":[{\"original_requirement\":\"Placing
        an order increases the table''s check total within the table database, by
        an amount depending on the entree ordered, according to the following schedule:\\n\\nEntree:
        Amount\\n\\nsteak: 14.0\\nchicken: 10.0\\nlobster: 18.0\\npasta: 12.0\\nnone:
        0.0\",\"original_requirement_index\":7,\"atomic_requirements\":[\"Placing
        an order for steak increases the table''s check total by 14.0 within the table
        database.\",\"Placing an order for chicken increases the table''s check total
        by 10.0 within the table database.\",\"Placing an order for lobster increases
        the table''s check total by 18.0 within the table database.\",\"Placing an
        order for pasta increases the table''s check total by 12.0 within the table
        database.\",\"Placing an order for none increases the table''s check total
        by 0.0 within the table database.\"]},{\"original_requirement\":\"Placing
        certain orders will qualify the seat for free dessert, according to the following
        schedule:\\n\\nSteak with caesar salad and a mixed drink qualifies a seat
        for pie.\\nLobster with green salad and wine qualifies a seat for cake.\\nNo
        free dessert otherwise.\",\"original_requirement_index\":17,\"atomic_requirements\":[\"If
        a seat places an order consisting of steak, caesar salad, and a mixed drink
        then the seat qualifies for free pie.\",\"If a seat places an order consisting
        of lobster, green salad, and wine then the seat qualifies for free cake.\",\"If
        a seat places any other combination of order items then the seat does not
        qualify for a free dessert.\"]}]}","refusal":null,"role":"assistant"}}],"created":1752564141,"id":"chatcmpl-BtUHVXdMyvdoZnSRJmNBbqTmNmW2L","model":"o4-mini-2025-04-16","object":"chat.completion","prompt_filter_results":[{"prompt_index":0,"content_filter_results":{"hate":{"filtered":false,"severity":"safe"},"jailbreak":{"filtered":false,"detected":false},"self_harm":{"filtered":false,"severity":"safe"},"sexual":{"filtered":false,"severity":"safe"},"violence":{"filtered":false,"severity":"safe"}}}],"system_fingerprint":null,"usage":{"completion_tokens":1586,"completion_tokens_details":{"accepted_prediction_tokens":0,"audio_tokens":0,"reasoning_tokens":1216,"rejected_prediction_tokens":0},"prompt_tokens":926,"prompt_tokens_details":{"audio_tokens":0,"cached_tokens":0},"total_tokens":2512}}

        '
    headers:
      Content-Length:
      - '2782'
      Content-Type:
      - application/json
      Date:
      - Tue, 15 Jul 2025 07:22:36 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      apim-request-id:
      - a5acab15-2333-44db-8bcc-4619936b3f19
      azureml-model-session:
      - d353-20250620012749
      cmp-upstream-response-duration:
      - '14883'
      x-accel-buffering:
      - 'no'
      x-content-type-options:
      - nosniff
      x-ms-deployment-name:
      - o4-mini
      x-ms-rai-invoked:
      - 'true'
      x-ms-region:
      - Sweden Central
      x-ratelimit-limit-requests:
      - '4680'
      x-ratelimit-limit-tokens:
      - '4680000'
      x-ratelimit-remaining-requests:
      - '4679'
      x-ratelimit-remaining-tokens:
      - '4679056'
      x-request-id:
      - 73ad7a68-473e-4d58-8ae5-d67a0782bbeb
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are a world-class software engineer specializing
      in requirements engineering.", "role": "system"}, {"content": "\nFind non-atomic
      requirements in the given set of requirements and decompose them.\n\nAn atomic
      requirement is a singular, verifiable, and testable statement. It can be be
      directly validated by a single test case, following a unique execution path
      in the software.\nThe requirements you receive may already be atomic or they
      may contain multiple embedded requirements that need to be further decomposed
      into atomic statements such that each one is testable using a single test case.\nEach
      new atomic requirement must be a self-contained statement that can be directly
      tested. If one of the decomposed requirements refers to any of the others, it
      is not atomic and you have FAILED.\n\nRequirements:\n1. The system will support
      6 tables.\n2. The system will support 4 seats per table.\n3. The system will
      support the following entrees:\n\nsteak\nchicken\nlobster\npasta\nnone\n4. Placing
      an order updates the table''s occupied status to true within the table database.\n5.
      Placing an order updates the table''s number in party within the table database.\n6.
      Placing an order updates the seat''s order within the table database.\n7. Placing
      an order increases the table''s check total within the table database, by an
      amount depending on the entree ordered, according to the following schedule:\n\nEntree:
      Amount\n\nsteak: 14.0\nchicken: 10.0\nlobster: 18.0\npasta: 12.0\nnone: 0.0\n8.
      Clearing a table updates the table''s occupied status to false within the table
      database.\n9. Clearing a table updates the table''s number in party to 1 within
      the table database.\n10. Clearing a table clears the orders for all seats of
      the table within the table database.\n11. Clearing a table updates the table''s
      check total to 0.0 within the table database.\n12. The system will provide a
      way to obtain the check total for a given table.\n13. The system will support
      a waiting list of up to 10 parties.\n14. The system will provide a means of
      adding a party to the waiting list, with the party specified by name.\n15. The
      system will provide a means of obtaining the name of the party at the head of
      the waiting list.\n16. The head of the waiting list shall be reset when it reaches
      the end of the waiting list.\n17. Placing certain orders will qualify the seat
      for free dessert, according to the following schedule:\n\nSteak with caesar
      salad and a mixed drink qualifies a seat for pie.\nLobster with green salad
      and wine qualifies a seat for cake.\nNo free dessert otherwise.\n\nYour final
      answer must strictly adhere to the following model. Return your output as a
      JSON object:\n{\n    \"nonatomic_requirements\": [\n        {\n            \"original_requirement\":
      \"<original requirement>\",\n            \"original_requirement_index\": \"<index
      of the original requirement>\",\n            \"atomic_requirements\": [\n                \"<atomic
      requirement 1>\",\n                \"<atomic requirement 2>\", // Again: This
      requirement should not refer to atomic requirement 1, either directly or indirectly,
      and vice versa. It needs to be understandable on its own without having read
      the other atomic requirements\n                ...\n            ]\n        },\n        ...\n    ]\n}\n\nExceptions:\nSometimes
      there are multiple test conditions that need to be checked to validate a single
      requirement but this is possible using a single test case, i.e., a single run
      of the function with some inputs and expected outputs is sufficient.\nIn such
      cases, the requirement should be considered atomic and therefore not added to
      the output (even though it is technically composed of multiple test conditions).\n\nRemember:\n-
      The new requirements cannot refer to each other, e.g., \"If the above is not
      true, then the system should do X\" is not atomic nor is \"...as described above...\"\n",
      "role": "user"}], "model": "o4-mini", "response_format": {"json_schema": {"name":
      "RequirementDescription", "schema": {"$defs": {"DecomposedRequirement": {"additionalProperties":
      false, "properties": {"atomic_requirements": {"items": {"type": "string"}, "title":
      "Atomic Requirements", "type": "array"}, "original_requirement": {"title": "Original
      Requirement", "type": "string"}, "original_requirement_index": {"title": "Original
      Requirement Index", "type": "integer"}}, "required": ["original_requirement",
      "original_requirement_index", "atomic_requirements"], "title": "DecomposedRequirement",
      "type": "object"}}, "additionalProperties": false, "properties": {"nonatomic_requirements":
      {"items": {"$ref": "#/$defs/DecomposedRequirement"}, "title": "Nonatomic Requirements",
      "type": "array"}}, "required": ["nonatomic_requirements"], "title": "RequirementDescription",
      "type": "object"}, "strict": true}, "type": "json_schema"}, "seed": 42, "stream":
      false}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      api-key:
      - REDACTED
      authorization:
      - REDACTED
      connection:
      - keep-alive
      content-length:
      - '4879'
      content-type:
      - application/json
      host:
      - REDACTED
      user-agent:
      - AsyncAzureOpenAI/Python 1.58.1
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-helper-method:
      - beta.chat.completions.parse
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.58.1
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.12
    method: POST
    uri: https://rg-rds-play-openai-pes-ppt.openai.azure.com/openai/deployments/o4-mini/chat/completions?api-version=2024-12-01-preview
  response:
    body:
      string: '{"choices":[{"content_filter_results":{"hate":{"filtered":false,"severity":"safe"},"protected_material_code":{"filtered":false,"detected":false},"protected_material_text":{"filtered":false,"detected":false},"self_harm":{"filtered":false,"severity":"safe"},"sexual":{"filtered":false,"severity":"safe"},"violence":{"filtered":false,"severity":"safe"}},"finish_reason":"stop","index":0,"logprobs":null,"message":{"annotations":[],"content":"{\"nonatomic_requirements\":[{\"original_requirement\":\"Placing
        an order increases the table''s check total within the table database, by
        an amount depending on the entree ordered, according to the following schedule:\\n\\nEntree:
        Amount\\n\\nsteak: 14.0\\nchicken: 10.0\\nlobster: 18.0\\npasta: 12.0\\nnone:
        0.0\",\"original_requirement_index\":7,\"atomic_requirements\":[\"Placing
        an order for steak increases the table''s check total by 14.0 within the table
        database.\",\"Placing an order for chicken increases the table''s check total
        by 10.0 within the table database.\",\"Placing an order for lobster increases
        the table''s check total by 18.0 within the table database.\",\"Placing an
        order for pasta increases the table''s check total by 12.0 within the table
        database.\",\"Placing an order for none increases the table''s check total
        by 0.0 within the table database.\"]},{\"original_requirement\":\"Placing
        certain orders will qualify the seat for free dessert, according to the following
        schedule:\\n\\nSteak with caesar salad and a mixed drink qualifies a seat
        for pie.\\nLobster with green salad and wine qualifies a seat for cake.\\nNo
        free dessert otherwise.\",\"original_requirement_index\":17,\"atomic_requirements\":[\"If
        a seat places an order consisting of steak, caesar salad, and a mixed drink
        then the seat qualifies for free pie.\",\"If a seat places an order consisting
        of lobster, green salad, and wine then the seat qualifies for free cake.\",\"If
        a seat places any other combination of order items then the seat does not
        qualify for a free dessert.\"]}]}","refusal":null,"role":"assistant"}}],"created":1752564141,"id":"chatcmpl-BtUHVlf66hM5x7Jfi8cNxbOOD7Ck4","model":"o4-mini-2025-04-16","object":"chat.completion","prompt_filter_results":[{"prompt_index":0,"content_filter_results":{"hate":{"filtered":false,"severity":"safe"},"jailbreak":{"filtered":false,"detected":false},"self_harm":{"filtered":false,"severity":"safe"},"sexual":{"filtered":false,"severity":"safe"},"violence":{"filtered":false,"severity":"safe"}}}],"system_fingerprint":null,"usage":{"completion_tokens":1586,"completion_tokens_details":{"accepted_prediction_tokens":0,"audio_tokens":0,"reasoning_tokens":1216,"rejected_prediction_tokens":0},"prompt_tokens":926,"prompt_tokens_details":{"audio_tokens":0,"cached_tokens":0},"total_tokens":2512}}

        '
    headers:
      Content-Length:
      - '2782'
      Content-Type:
      - application/json
      Date:
      - Tue, 15 Jul 2025 07:22:36 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      apim-request-id:
      - bdd12c0b-1f8b-44ea-8aab-9ec35b7f090c
      azureml-model-session:
      - d353-20250620012749
      cmp-upstream-response-duration:
      - '14925'
      x-accel-buffering:
      - 'no'
      x-content-type-options:
      - nosniff
      x-ms-deployment-name:
      - o4-mini
      x-ms-rai-invoked:
      - 'true'
      x-ms-region:
      - Sweden Central
      x-ratelimit-limit-requests:
      - '4680'
      x-ratelimit-limit-tokens:
      - '4680000'
      x-ratelimit-remaining-requests:
      - '4679'
      x-ratelimit-remaining-tokens:
      - '4679056'
      x-request-id:
      - e7193b4e-677c-45ab-afa9-3a8957fa4113
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are a world-class software engineer specializing
      in requirements engineering.", "role": "system"}, {"content": "\nFind non-atomic
      requirements in the given set of requirements and decompose them.\n\nAn atomic
      requirement is a singular, verifiable, and testable statement. It can be be
      directly validated by a single test case, following a unique execution path
      in the software.\nThe requirements you receive may already be atomic or they
      may contain multiple embedded requirements that need to be further decomposed
      into atomic statements such that each one is testable using a single test case.\nEach
      new atomic requirement must be a self-contained statement that can be directly
      tested. If one of the decomposed requirements refers to any of the others, it
      is not atomic and you have FAILED.\n\nRequirements:\n1. The system will support
      6 tables.\n2. The system will support 4 seats per table.\n3. The system will
      support the following entrees:\n\nsteak\nchicken\nlobster\npasta\nnone\n4. Placing
      an order updates the table''s occupied status to true within the table database.\n5.
      Placing an order updates the table''s number in party within the table database.\n6.
      Placing an order updates the seat''s order within the table database.\n7. Placing
      an order increases the table''s check total within the table database, by an
      amount depending on the entree ordered, according to the following schedule:\n\nEntree:
      Amount\n\nsteak: 14.0\nchicken: 10.0\nlobster: 18.0\npasta: 12.0\nnone: 0.0\n8.
      Clearing a table updates the table''s occupied status to false within the table
      database.\n9. Clearing a table updates the table''s number in party to 1 within
      the table database.\n10. Clearing a table clears the orders for all seats of
      the table within the table database.\n11. Clearing a table updates the table''s
      check total to 0.0 within the table database.\n12. The system will provide a
      way to obtain the check total for a given table.\n13. The system will support
      a waiting list of up to 10 parties.\n14. The system will provide a means of
      adding a party to the waiting list, with the party specified by name.\n15. The
      system will provide a means of obtaining the name of the party at the head of
      the waiting list.\n16. The head of the waiting list shall be reset when it reaches
      the end of the waiting list.\n17. Placing certain orders will qualify the seat
      for free dessert, according to the following schedule:\n\nSteak with caesar
      salad and a mixed drink qualifies a seat for pie.\nLobster with green salad
      and wine qualifies a seat for cake.\nNo free dessert otherwise.\n\nYour final
      answer must strictly adhere to the following model. Return your output as a
      JSON object:\n{\n    \"nonatomic_requirements\": [\n        {\n            \"original_requirement\":
      \"<original requirement>\",\n            \"original_requirement_index\": \"<index
      of the original requirement>\",\n            \"atomic_requirements\": [\n                \"<atomic
      requirement 1>\",\n                \"<atomic requirement 2>\", // Again: This
      requirement should not refer to atomic requirement 1, either directly or indirectly,
      and vice versa. It needs to be understandable on its own without having read
      the other atomic requirements\n                ...\n            ]\n        },\n        ...\n    ]\n}\n\nExceptions:\nSometimes
      there are multiple test conditions that need to be checked to validate a single
      requirement but this is possible using a single test case, i.e., a single run
      of the function with some inputs and expected outputs is sufficient.\nIn such
      cases, the requirement should be considered atomic and therefore not added to
      the output (even though it is technically composed of multiple test conditions).\n\nRemember:\n-
      The new requirements cannot refer to each other, e.g., \"If the above is not
      true, then the system should do X\" is not atomic nor is \"...as described above...\"\n",
      "role": "user"}], "model": "o4-mini", "response_format": {"json_schema": {"name":
      "RequirementDescription", "schema": {"$defs": {"DecomposedRequirement": {"additionalProperties":
      false, "properties": {"atomic_requirements": {"items": {"type": "string"}, "title":
      "Atomic Requirements", "type": "array"}, "original_requirement": {"title": "Original
      Requirement", "type": "string"}, "original_requirement_index": {"title": "Original
      Requirement Index", "type": "integer"}}, "required": ["original_requirement",
      "original_requirement_index", "atomic_requirements"], "title": "DecomposedRequirement",
      "type": "object"}}, "additionalProperties": false, "properties": {"nonatomic_requirements":
      {"items": {"$ref": "#/$defs/DecomposedRequirement"}, "title": "Nonatomic Requirements",
      "type": "array"}}, "required": ["nonatomic_requirements"], "title": "RequirementDescription",
      "type": "object"}, "strict": true}, "type": "json_schema"}, "seed": 42, "stream":
      false}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      api-key:
      - REDACTED
      authorization:
      - REDACTED
      connection:
      - keep-alive
      content-length:
      - '4879'
      content-type:
      - application/json
      host:
      - REDACTED
      user-agent:
      - AsyncAzureOpenAI/Python 1.58.1
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-helper-method:
      - beta.chat.completions.parse
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.58.1
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.12
    method: POST
    uri: https://rg-rds-play-openai-pes-ppt.openai.azure.com/openai/deployments/o4-mini/chat/completions?api-version=2024-12-01-preview
  response:
    body:
      string: '{"choices":[{"content_filter_results":{"hate":{"filtered":false,"severity":"safe"},"protected_material_code":{"filtered":false,"detected":false},"protected_material_text":{"filtered":false,"detected":false},"self_harm":{"filtered":false,"severity":"safe"},"sexual":{"filtered":false,"severity":"safe"},"violence":{"filtered":false,"severity":"safe"}},"finish_reason":"stop","index":0,"logprobs":null,"message":{"annotations":[],"content":"{\"nonatomic_requirements\":[{\"original_requirement\":\"Placing
        an order increases the table''s check total within the table database, by
        an amount depending on the entree ordered, according to the following schedule:\\n\\nEntree:
        Amount\\n\\nsteak: 14.0\\nchicken: 10.0\\nlobster: 18.0\\npasta: 12.0\\nnone:
        0.0\",\"original_requirement_index\":7,\"atomic_requirements\":[\"Placing
        an order for steak increases the table''s check total by 14.0 within the table
        database.\",\"Placing an order for chicken increases the table''s check total
        by 10.0 within the table database.\",\"Placing an order for lobster increases
        the table''s check total by 18.0 within the table database.\",\"Placing an
        order for pasta increases the table''s check total by 12.0 within the table
        database.\",\"Placing an order for none increases the table''s check total
        by 0.0 within the table database.\"]},{\"original_requirement\":\"Placing
        certain orders will qualify the seat for free dessert, according to the following
        schedule:\\n\\nSteak with caesar salad and a mixed drink qualifies a seat
        for pie.\\nLobster with green salad and wine qualifies a seat for cake.\\nNo
        free dessert otherwise.\",\"original_requirement_index\":17,\"atomic_requirements\":[\"If
        a seat places an order consisting of steak, caesar salad, and a mixed drink
        then the seat qualifies for free pie.\",\"If a seat places an order consisting
        of lobster, green salad, and wine then the seat qualifies for free cake.\",\"If
        a seat places any other combination of order items then the seat does not
        qualify for a free dessert.\"]}]}","refusal":null,"role":"assistant"}}],"created":1752564141,"id":"chatcmpl-BtUHVRrpKv1LApAfzgYUgdhyjc5t0","model":"o4-mini-2025-04-16","object":"chat.completion","prompt_filter_results":[{"prompt_index":0,"content_filter_results":{"hate":{"filtered":false,"severity":"safe"},"jailbreak":{"filtered":false,"detected":false},"self_harm":{"filtered":false,"severity":"safe"},"sexual":{"filtered":false,"severity":"safe"},"violence":{"filtered":false,"severity":"safe"}}}],"system_fingerprint":null,"usage":{"completion_tokens":1586,"completion_tokens_details":{"accepted_prediction_tokens":0,"audio_tokens":0,"reasoning_tokens":1216,"rejected_prediction_tokens":0},"prompt_tokens":926,"prompt_tokens_details":{"audio_tokens":0,"cached_tokens":0},"total_tokens":2512}}

        '
    headers:
      Content-Length:
      - '2782'
      Content-Type:
      - application/json
      Date:
      - Tue, 15 Jul 2025 07:22:36 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      apim-request-id:
      - a11ca0a7-5c3a-456b-8cef-01e53cd0259e
      azureml-model-session:
      - d353-20250620012749
      cmp-upstream-response-duration:
      - '14905'
      x-accel-buffering:
      - 'no'
      x-content-type-options:
      - nosniff
      x-ms-deployment-name:
      - o4-mini
      x-ms-rai-invoked:
      - 'true'
      x-ms-region:
      - Sweden Central
      x-ratelimit-limit-requests:
      - '4680'
      x-ratelimit-limit-tokens:
      - '4680000'
      x-ratelimit-remaining-requests:
      - '4678'
      x-ratelimit-remaining-tokens:
      - '4678112'
      x-request-id:
      - 57b1ae02-24ba-4bf9-8488-8b6126f1d7c3
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are a world-class software engineer specializing
      in requirements engineering.", "role": "system"}, {"content": "\nFind non-atomic
      requirements in the given set of requirements and decompose them.\n\nAn atomic
      requirement is a singular, verifiable, and testable statement. It can be be
      directly validated by a single test case, following a unique execution path
      in the software.\nThe requirements you receive may already be atomic or they
      may contain multiple embedded requirements that need to be further decomposed
      into atomic statements such that each one is testable using a single test case.\nEach
      new atomic requirement must be a self-contained statement that can be directly
      tested. If one of the decomposed requirements refers to any of the others, it
      is not atomic and you have FAILED.\n\nRequirements:\n1. The system will support
      6 tables.\n2. The system will support 4 seats per table.\n3. The system will
      support the following entrees:\n\nsteak\nchicken\nlobster\npasta\nnone\n4. Placing
      an order updates the table''s occupied status to true within the table database.\n5.
      Placing an order updates the table''s number in party within the table database.\n6.
      Placing an order updates the seat''s order within the table database.\n7. Placing
      an order increases the table''s check total within the table database, by an
      amount depending on the entree ordered, according to the following schedule:\n\nEntree:
      Amount\n\nsteak: 14.0\nchicken: 10.0\nlobster: 18.0\npasta: 12.0\nnone: 0.0\n8.
      Clearing a table updates the table''s occupied status to false within the table
      database.\n9. Clearing a table updates the table''s number in party to 1 within
      the table database.\n10. Clearing a table clears the orders for all seats of
      the table within the table database.\n11. Clearing a table updates the table''s
      check total to 0.0 within the table database.\n12. The system will provide a
      way to obtain the check total for a given table.\n13. The system will support
      a waiting list of up to 10 parties.\n14. The system will provide a means of
      adding a party to the waiting list, with the party specified by name.\n15. The
      system will provide a means of obtaining the name of the party at the head of
      the waiting list.\n16. The head of the waiting list shall be reset when it reaches
      the end of the waiting list.\n17. Placing certain orders will qualify the seat
      for free dessert, according to the following schedule:\n\nSteak with caesar
      salad and a mixed drink qualifies a seat for pie.\nLobster with green salad
      and wine qualifies a seat for cake.\nNo free dessert otherwise.\n\nYour final
      answer must strictly adhere to the following model. Return your output as a
      JSON object:\n{\n    \"nonatomic_requirements\": [\n        {\n            \"original_requirement\":
      \"<original requirement>\",\n            \"original_requirement_index\": \"<index
      of the original requirement>\",\n            \"atomic_requirements\": [\n                \"<atomic
      requirement 1>\",\n                \"<atomic requirement 2>\", // Again: This
      requirement should not refer to atomic requirement 1, either directly or indirectly,
      and vice versa. It needs to be understandable on its own without having read
      the other atomic requirements\n                ...\n            ]\n        },\n        ...\n    ]\n}\n\nExceptions:\nSometimes
      there are multiple test conditions that need to be checked to validate a single
      requirement but this is possible using a single test case, i.e., a single run
      of the function with some inputs and expected outputs is sufficient.\nIn such
      cases, the requirement should be considered atomic and therefore not added to
      the output (even though it is technically composed of multiple test conditions).\n\nRemember:\n-
      The new requirements cannot refer to each other, e.g., \"If the above is not
      true, then the system should do X\" is not atomic nor is \"...as described above...\"\n",
      "role": "user"}], "model": "o4-mini", "response_format": {"json_schema": {"name":
      "RequirementDescription", "schema": {"$defs": {"DecomposedRequirement": {"additionalProperties":
      false, "properties": {"atomic_requirements": {"items": {"type": "string"}, "title":
      "Atomic Requirements", "type": "array"}, "original_requirement": {"title": "Original
      Requirement", "type": "string"}, "original_requirement_index": {"title": "Original
      Requirement Index", "type": "integer"}}, "required": ["original_requirement",
      "original_requirement_index", "atomic_requirements"], "title": "DecomposedRequirement",
      "type": "object"}}, "additionalProperties": false, "properties": {"nonatomic_requirements":
      {"items": {"$ref": "#/$defs/DecomposedRequirement"}, "title": "Nonatomic Requirements",
      "type": "array"}}, "required": ["nonatomic_requirements"], "title": "RequirementDescription",
      "type": "object"}, "strict": true}, "type": "json_schema"}, "seed": 42, "stream":
      false}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      api-key:
      - REDACTED
      authorization:
      - REDACTED
      connection:
      - keep-alive
      content-length:
      - '4879'
      content-type:
      - application/json
      host:
      - REDACTED
      user-agent:
      - AsyncAzureOpenAI/Python 1.58.1
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-helper-method:
      - beta.chat.completions.parse
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.58.1
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.12
    method: POST
    uri: https://rg-rds-play-openai-pes-ppt.openai.azure.com/openai/deployments/o4-mini/chat/completions?api-version=2024-12-01-preview
  response:
    body:
      string: '{"choices":[{"content_filter_results":{"hate":{"filtered":false,"severity":"safe"},"protected_material_code":{"filtered":false,"detected":false},"protected_material_text":{"filtered":false,"detected":false},"self_harm":{"filtered":false,"severity":"safe"},"sexual":{"filtered":false,"severity":"safe"},"violence":{"filtered":false,"severity":"safe"}},"finish_reason":"stop","index":0,"logprobs":null,"message":{"annotations":[],"content":"{\"nonatomic_requirements\":[{\"original_requirement\":\"Placing
        an order increases the table''s check total within the table database, by
        an amount depending on the entree ordered, according to the following schedule:\\n\\nEntree:
        Amount\\n\\nsteak: 14.0\\nchicken: 10.0\\nlobster: 18.0\\npasta: 12.0\\nnone:
        0.0\",\"original_requirement_index\":7,\"atomic_requirements\":[\"Placing
        an order for steak increases the table''s check total by 14.0 within the table
        database.\",\"Placing an order for chicken increases the table''s check total
        by 10.0 within the table database.\",\"Placing an order for lobster increases
        the table''s check total by 18.0 within the table database.\",\"Placing an
        order for pasta increases the table''s check total by 12.0 within the table
        database.\",\"Placing an order for none increases the table''s check total
        by 0.0 within the table database.\"]},{\"original_requirement\":\"Placing
        certain orders will qualify the seat for free dessert, according to the following
        schedule:\\n\\nSteak with caesar salad and a mixed drink qualifies a seat
        for pie.\\nLobster with green salad and wine qualifies a seat for cake.\\nNo
        free dessert otherwise.\",\"original_requirement_index\":17,\"atomic_requirements\":[\"If
        a seat places an order consisting of steak, caesar salad, and a mixed drink
        then the seat qualifies for free pie.\",\"If a seat places an order consisting
        of lobster, green salad, and wine then the seat qualifies for free cake.\",\"If
        a seat places any other combination of order items then the seat does not
        qualify for a free dessert.\"]}]}","refusal":null,"role":"assistant"}}],"created":1752564142,"id":"chatcmpl-BtUHWI4qRygcxACsi1X4PAVrZ6k5E","model":"o4-mini-2025-04-16","object":"chat.completion","prompt_filter_results":[{"prompt_index":0,"content_filter_results":{"hate":{"filtered":false,"severity":"safe"},"jailbreak":{"filtered":false,"detected":false},"self_harm":{"filtered":false,"severity":"safe"},"sexual":{"filtered":false,"severity":"safe"},"violence":{"filtered":false,"severity":"safe"}}}],"system_fingerprint":null,"usage":{"completion_tokens":1586,"completion_tokens_details":{"accepted_prediction_tokens":0,"audio_tokens":0,"reasoning_tokens":1216,"rejected_prediction_tokens":0},"prompt_tokens":926,"prompt_tokens_details":{"audio_tokens":0,"cached_tokens":0},"total_tokens":2512}}

        '
    headers:
      Content-Length:
      - '2782'
      Content-Type:
      - application/json
      Date:
      - Tue, 15 Jul 2025 07:22:39 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      apim-request-id:
      - 8c7bcc79-fe00-42f6-a369-4702ca9d52d9
      azureml-model-session:
      - d360-20250620024803
      cmp-upstream-response-duration:
      - '18041'
      x-accel-buffering:
      - 'no'
      x-content-type-options:
      - nosniff
      x-ms-deployment-name:
      - o4-mini
      x-ms-rai-invoked:
      - 'true'
      x-ms-region:
      - Sweden Central
      x-ratelimit-limit-requests:
      - '4680'
      x-ratelimit-limit-tokens:
      - '4680000'
      x-ratelimit-remaining-requests:
      - '4673'
      x-ratelimit-remaining-tokens:
      - '4673392'
      x-request-id:
      - 6af6e109-af23-4cca-8472-3ab1099434c4
    status:
      code: 200
      message: OK
- request:
    body: '{"max_completion_tokens": 8192, "messages": [{"content": "You are an AI
      assistant that generates test code for given requirements.", "role": "system"},
      {"content": "\nBased on the following requirements, references, and code, generate
      one test case per given requirement that exercises it.\n\nTest framework reference:\n##
      Test Case Format\nThe format of a test case is as follows:\n{\n    \"test_name\":
      <some descriptive test name>,\n    \"test_description\": <more details about
      the test>\n    \"requirement_id\": <requirement being tested by this test> (optional)\n    \"unit_name\":
      <unit_name>,\n    \"subprogram_name\": <subprogram_name>,\n    \"input_values\":
      [\n        { \"identifier\": <identifier>, \"value\": <value> },\n        ...\n    ],\n    \"expected_values\":
      [\n        { \"identifier\": <identifier>, \"value\": <value> },\n        ...\n    ]\n}\n\n###
      Identifier and Value Syntax\nThe following sections describe the syntax for
      specifying the `identifier` and `value` fields in the test case format. `unit_name`
      and `subprogram_name` refer to file names of C/C++ files (without extension)
      and function names in these files respectively (to refer to methods in classes
      use `<class name>::<method name>`). It is only possible to include identifiers
      from different units and other subprograms if they are called/used in the subprogram
      being tested.\n\n#### Numeric Types\n- Assign the number directly.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.parameter\", \"value\": \"42\" }\n    { \"identifier\":
      \"unit.subprogram.parameter\", \"value\": \"84\" }\n\n#### Structure Types\n-
      Use the standard C syntax to refer to fields within structures.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.struct_param.field\", \"value\": \"CAESAR\"
      }\n    { \"identifier\": \"unit.subprogram.struct_param.field\", \"value\":
      \"STEAK\" }\n\n#### Enumeration Types\n- Use the enumeral value directly.\n  -
      Example:\n    { \"identifier\": \"unit.subprogram.enum_param\", \"value\": \"ENUM_VALUE\"
      }\n\n#### Character and String Types\n- Use standard C delimiters for characters
      and strings.\n  - Example:\n    { \"identifier\": \"unit.subprogram.char_param\",
      \"value\": \"''a''\" }\n    { \"identifier\": \"unit.subprogram.string_param\",
      \"value\": \"\\\"Hello, World\\\"\" }\n- Treat strings as atomic values to set.
      Do not attempt to treat them as a char array, i.e., do not malloc or attempt
      to access chars at individual indices.\n\n#### Pointer and Array Types\n- For
      constrained arrays, specify the index and value.\n  - Example:\n    { \"identifier\":
      \"unit.subprogram.array_param[2]\", \"value\": \"42\" }\n- For unconstrained
      arrays, use `<<malloc [amount of slots to allocate as integer]>>` to allocate
      memory.\n  - Example:\n    { \"identifier\": \"unit.subprogram.array_param\",
      \"value\": \"<<malloc 2>>\" }\n    { \"identifier\": \"unit.subprogram.array_param[1]\",
      \"value\": \"3\" }\n- For pointers, use index 0 to access it (generally pointers
      and unconstrained arrays are the same after all)\n  - Example:\n    { \"identifier\":
      \"unit.subprogram.ptr_param[0]\", \"value\": \"12\" }\n- If you want to make
      something null then use `<<null>>`.\n  - Example:\n    { \"identifier\": \"unit.subprogram.pointer_param\",
      \"value\": \"<<null>>\" }\n    or\n    { \"identifier\": \"unit.subprogram.array_param\",
      \"value\": \"<<null>>\" }\n\n#### Function Return Parameters\n- Use the keyword
      `return` for function return values.\n  - Example:\n    { \"identifier\": \"unit.subprogram.return\",
      \"value\": \"23.0\" }\n\n#### Global Objects\n- Use the syntax `UNIT.<<GLOBAL>>.OBJECT`
      to set values for global objects.\n  - Example:\n    { \"identifier\": \"unit.<<GLOBAL>>.global_object.field\",
      \"value\": \"VALUE\" }\n- Note: `UNIT.OBJECT` is NEVER valid syntax\n\n#####
      Classes\n- To set and expect values of methods in a class (unlike standalone
      subprograms), it is necessary to first instantiate a base object using a constructor\n-
      Use the syntax `UNIT.<<GLOBAL>>.(cl).CLASS_NAME.SUBCLASS_NAME.<<constructor>>.<<call>>`
      to call the constructor of `SUBCLASS` to instantiate a `CLASS` object\n  - Example:\n    {
      \"identifier\": \"unit.<<GLOBAL>>.(cl).class_name.class_name.<<constructor>>.<<call>>\",
      \"value\": \"0\" }\n  - Note: The value in this case is irrelevant and always
      set to 0.\n- To set and expect member variables of a constructed object use
      the syntax `UNIT.<<GLOBAL>>.(cl).CLASS_NAME.SUBCLASS_NAME.MEMBER_NAME`\n  -
      Example:\n    { \"identifier\": \"unit.<<GLOBAL>>.(cl).class_name.class_name.member\",
      \"value\": \"test\" }\n  - Note: If the member is a structured entity like a
      struct or a class instance you can access the subfields like described in the
      `Structure Types` section.\n- To set and expect arguments and return values
      of methods in a class use the name do so like you would for regular subprograms
      except that you prefix the name with the class name and `::`\n  - Example:\n    {
      \"identifier\": \"unit.class_name::member_method.parameter\", \"value\": \"2\"
      }\n  - Note: If you use this ALWAYS first call the class constructor!\n\n####
      Range of Values for Input Data\n- Use range expressions to test a range of values.\n  -
      Example:\n    { \"identifier\": \"unit.subprogram.parameter\", \"value\": \"vary
      from: 0.0 to: 90.0 by: 0.1\" }\n\n#### Range of Values for Expected Results\n-
      Use the syntax `<min> .. <max>` for expected value ranges.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.parameter\", \"value\": \"257.1 .. 259.9\"
      }\n\n#### List of Values\n- Use a comma-separated list for multiple values.\n  -
      Example:\n    { \"identifier\": \"unit.subprogram.parameter\", \"value\": \"1,2,4\"
      }\n- Use parentheses for repeated values.\n  - Example:\n    { \"identifier\":
      \"unit.subprogram.parameter\", \"value\": \"1,(4)2,4\" }\n- Note: This is used
      in case something needs to be set multiple times (like for a stub return) during
      one call, NOT to specify values in an array. To do so, use the regular index
      syntax as outlined above instead.\n\n#### Working with Overloaded Subprograms\n-
      Append the parameter type list to the subprogram name.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram(int).parameter\", \"value\": \"3\" }\n    {
      \"identifier\": \"unit.subprogram(char).parameter\", \"value\": \"''d''\" }\n\n####
      Boolean Values\n- Use `1` for `true` and `0` for `false`.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.boolean_param\", \"value\": \"1\" }\n    {
      \"identifier\": \"unit.subprogram.boolean_param\", \"value\": \"0\" }\n\n####
      Accessing Subprograms Outside the Unit\n- Use `uut_prototype_stubs` as the unit
      for subprograms defined outside of the unit of the test case.\n  - Example:\n    {
      \"identifier\": \"uut_prototype_stubs.name_of_external_subprogram.parameter\",
      \"value\": \"42\" }\n\n#### Emulating stubbed pointer manipulating functions\n-
      Normally it is easy to emulate a stubbed function returning some value (by setting
      the return value of the stubbed function)\n- This is not possible if the stubbed
      function works with pointers as only values can be specified (so only ever the
      contents of a pointer), e.g., functions like memcpy\n- Therefore, in these cases
      you can emulate the stubbed function setting the contents of the pointer using
      <<pointer value_to_set>>\n  - For example assume we have a pointer input variable
      *float x that is modified by a stubbed called to foo(*float pointer_to_modify),
      i.e., foo(x). Then you can change the value, i.e., *x to 10 like so:\n    {
      \"identifier\": \"uut_prototype_stubs.foo.pointer_to_modify\", \"value\": \"<<pointer
      10>>\" }\n  - The other input values of the function of course do not need to
      be specified explicitly (unless you also want to see the values of those input
      pointers)\n- You can only set one variable like this per test case due to technical
      reasons so choose wisely (if you use this feature)\n\n#### Emulating multiple
      function calls\n- Use the multiple value syntax, one value will be read everytime
      the stubbed function is called\n  - Example (foo is called twice, and should
      return 2 the first time and 3 the second):\n    { \"identifier\": \"uut_prototype_stubs.foo.return\",
      \"value\": \"2,3\" }\n\n## Test Case Execution\n1. The test framework will call
      the specified subprogram/function\n2. When a value of a variable would be read,
      if it is specified as a test value, it is set to that value instead\n3. After
      the subprogram finishes, the expected values are checked against the actual
      values at that point\n\nAll tests are executed in isolation. The execution of
      one test does not influence the execution of others.\n\n### Stubbing behaviour\n-
      All function calls from external files, i.e, those referenced with `uut_prototype_stubs`
      are stubbed automatically and do not implement any behaviour. Setting their
      input values has no effect on their output values (instead default values are
      output unless you specify values for them).\n- If any of the parameters or return
      value of a called function (which is not automatically stubbed as outlined above)
      are set or expected to be some value using an identifier, the function will
      be stubbed during execution and not implement any behaviour. In this case it
      is forbidden to also expect the return value to equal something (it won''t as
      the function will be stubbed).\n  - If none are set or expected the function
      will execute as normal\n\n### Default identifier values and initialization\n-
      In general any value not set (input of course), will fall back to a default
      value. However this should be avoided to prevent undefined behaviour. This means
      all input variables (and outputs of stubbed values) should be exhaustively described.\n-
      Do not set an identifier multiple times, it just results in overriding of the
      previous value\n- To access methods of a class and set values it is imperative
      to first instantiate the class using a constructor. For all classes a default
      object is ready to be initialized if needed using the respective constructor.\n-
      Similarly, arrays or pointers should always be allocated\n\n## Examples\n\nLet''s
      consider a more complex C++ code snippet in a file named `data_processor.cpp`:\n\n```cpp\n//
      File: data_processor.cpp\n// Unit: data_processor\n\ntypedef struct {\n    int
      id;\n    float value;\n    char status;\n} DataRecord;\n\ntypedef enum {\n    MODE_NORMAL
      = 0,\n    MODE_DEBUG = 1,\n    MODE_ERROR = 2\n} ProcessingMode;\n\n// External
      function declarations\nextern int validate_record(DataRecord* record);\nextern
      void log_error(const char* message);\nextern DataRecord* allocate_buffer(int
      size);\n\nProcessingMode current_mode = MODE_NORMAL;\n\nint process_data_array(DataRecord*
      input_array, int array_size, DataRecord** output_array) {\n    if (input_array
      == NULL || array_size <= 0) {\n        if (current_mode == MODE_DEBUG) {\n            log_error(\"Invalid
      input parameters\");\n        }\n        return -1;\n    }\n    \n    // Allocate
      output buffer\n    *output_array = allocate_buffer(array_size);\n    if (*output_array
      == NULL) {\n        log_error(\"Memory allocation failed\");\n        return
      -2;\n    }\n    \n    int processed_count = 0;\n    for (int i = 0; i < array_size;
      i++) {\n        // Validate each record using external function\n        int
      validation_result = validate_record(&input_array[i]);\n        \n        if
      (validation_result > 0) {\n            // Copy valid record to output with modified
      value\n            (*output_array)[processed_count].id = input_array[i].id;\n            (*output_array)[processed_count].value
      = input_array[i].value * 1.5f;\n            (*output_array)[processed_count].status
      = ''V''; // Valid\n            processed_count++;\n        } else if (current_mode
      == MODE_ERROR) {\n            // In error mode, stop processing on first invalid
      record\n            log_error(\"Invalid record encountered in error mode\");\n            return
      processed_count;\n        }\n        // In normal mode, skip invalid records
      and continue\n    }\n    \n    return processed_count;\n}\n```\n\n### Example
      1: Testing Null Input Handling with Branching\n\n**Requirement REQ-DP-001:**
      The `process_data_array` function shall return -1 when input_array is NULL and
      log an error message if in DEBUG mode.\n\n```json\n{\n  \"test_name\": \"Test_Null_Input_Debug_Mode\",\n  \"test_description\":
      \"Tests process_data_array with NULL input in DEBUG mode to ensure it returns
      -1 and calls log_error.\",\n  \"requirement_id\": \"REQ-DP-001\",\n  \"unit_name\":
      \"data_processor\",\n  \"subprogram_name\": \"process_data_array\",\n  \"input_values\":
      [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\", \"value\":
      \"MODE_DEBUG\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<null>>\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"5\" },\n  ],\n  \"expected_values\": [\n    { \"identifier\": \"uut_prototype_stubs.log_error.message\",
      \"value\": \"\\\"Invalid input parameters\\\"\" },\n    { \"identifier\": \"data_processor.process_data_array.return\",
      \"value\": \"-1\" }\n  ]\n}\n```\n\n### Example 2: Testing Memory Allocation
      with Stubbing\n\n**Requirement REQ-DP-002:** The `process_data_array` function
      shall return -2 and log an error when memory allocation fails.\n\n```json\n{\n  \"test_name\":
      \"Test_Memory_Allocation_Failure\",\n  \"test_description\": \"Tests process_data_array
      when allocate_buffer returns NULL to ensure proper error handling.\",\n  \"requirement_id\":
      \"REQ-DP-002\",\n  \"unit_name\": \"data_processor\",\n  \"subprogram_name\":
      \"process_data_array\",\n  \"input_values\": [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\",
      \"value\": \"MODE_NORMAL\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<malloc 1>>\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].id\",
      \"value\": \"1\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].value\",
      \"value\": \"10.5\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].status\",
      \"value\": \"''A''\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"2\" },\n    { \"identifier\": \"uut_prototype_stubs.allocate_buffer.return\",
      \"value\": \"<<null>>\" },\n  ],\n  \"expected_values\": [\n    { \"identifier\":
      \"uut_prototype_stubs.log_error.message\", \"value\": \"\\\"Memory allocation
      failed\\\"\" },\n    { \"identifier\": \"data_processor.process_data_array.return\",
      \"value\": \"-2\" }\n  ]\n}\n```\n\n### Example 3: Testing Complex Processing
      with Multiple Stubs\n\n**Requirement REQ-DP-003:** The `process_data_array`
      function shall process valid records by multiplying their values by 1.5 and
      setting status to ''V''.\n\n```json\n{\n  \"test_name\": \"Test_Valid_Record_Processing\",\n  \"test_description\":
      \"Tests process_data_array with mixed valid/invalid records to ensure proper
      processing and output.\",\n  \"requirement_id\": \"REQ-DP-003\",\n  \"unit_name\":
      \"data_processor\",\n  \"subprogram_name\": \"process_data_array\",\n  \"input_values\":
      [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\", \"value\":
      \"MODE_NORMAL\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].id\",
      \"value\": \"100\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].value\",
      \"value\": \"20.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].status\",
      \"value\": \"''A''\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].id\",
      \"value\": \"200\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].status\",
      \"value\": \"''B''\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[2].id\",
      \"value\": \"300\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[2].value\",
      \"value\": \"40.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[2].status\",
      \"value\": \"''C''\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"3\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0]\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"uut_prototype_stubs.validate_record.return\",
      \"value\": \"1,0,1\" }\n  ],\n  \"expected_values\": [\n    { \"identifier\":
      \"data_processor.process_data_array.return\", \"value\": \"2\" },\n    { \"identifier\":
      \"data_processor.process_data_array.output_array[0][0].id\", \"value\": \"100\"
      },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].status\",
      \"value\": \"''V''\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][1].id\",
      \"value\": \"300\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][1].value\",
      \"value\": \"60.0\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][1].status\",
      \"value\": \"''V''\" }\n  ]\n}\n```\n\n### Example 4: Testing Error Mode with
      Early Termination\n\n**Requirement REQ-DP-004:** The `process_data_array` function
      shall stop processing and return the current count when an invalid record is
      encountered in ERROR mode.\n\n```json\n{\n  \"test_name\": \"Test_Error_Mode_Early_Termination\",\n  \"test_description\":
      \"Tests process_data_array in ERROR mode to ensure it stops processing on first
      invalid record.\",\n  \"requirement_id\": \"REQ-DP-004\",\n  \"unit_name\":
      \"data_processor\",\n  \"subprogram_name\": \"process_data_array\",\n  \"input_values\":
      [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\", \"value\":
      \"MODE_ERROR\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].id\",
      \"value\": \"100\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].value\",
      \"value\": \"20.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].id\",
      \"value\": \"200\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"3\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0]\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"uut_prototype_stubs.allocate_buffer.size\",
      \"value\": \"3\" },\n    { \"identifier\": \"uut_prototype_stubs.validate_record.return\",
      \"value\": \"1,-1\" },\n  ],\n  \"expected_values\": [\n    { \"identifier\":
      \"uut_prototype_stubs.log_error.message\", \"value\": \"\\\"Invalid record encountered
      in error mode\\\"\" },\n    { \"identifier\": \"data_processor.process_data_array.return\",
      \"value\": \"1\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].id\",
      \"value\": \"100\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].status\",
      \"value\": \"''V''\" }\n  ]\n}\n```\n\nRelevant Code:\n```cpp\n// Unit: manager\n\n//
      Definitions of types, called functions and data structures:\n\nenum soups {
      NO_SOUP, ONION, CHOWDER };\n\nenum salads { NO_SALAD, CAESAR, GREEN };\n\nenum
      entrees { NO_ENTREE, STEAK, CHICKEN, LOBSTER, PASTA };\n\nenum desserts { NO_DESSERT,
      CAKE, PIE, FRUIT };\n\nenum beverages { NO_BEVERAGE, WINE, BEER, MIXED_DRINK,
      SODA };\n\nstruct order_type\n{\n  enum soups Soup;\n  enum salads Salad;\n  enum
      entrees Entree;\n  enum desserts Dessert;\n  enum beverages Beverage;\n};\n\n//
      Code for Add_Included_Dessert:\nvoid Add_Included_Dessert(struct order_type*
      Order)\n{\n  if(Order->Entree == STEAK &&\n     Order->Salad == CAESAR &&\n     Order->Beverage
      == MIXED_DRINK) {\n\n    Order->Dessert = PIE;\n\n  } else if(Order->Entree
      == LOBSTER &&\n            Order->Salad == GREEN &&\n            Order->Beverage
      == WINE) {\n\n    Order->Dessert = CAKE;\n  }\n}\n```\n\nExample Test Cases:\n```json\n[\n  {\n    \"test_name\":
      \"BASIS-PATH-003\",\n    \"test_description\": \"This is an automatically generated
      test case.\\nTest Path 3\\n(1) if ((Order->Entree == (STEAK) && Order->Salad
      == (CAESAR)) && Order->Beverage == (MIXED_DRINK)) ==> TRUE\\nTest Case Generation
      Notes:\",\n    \"unit_name\": \"manager\",\n    \"subprogram_name\": \"Add_Included_Dessert\",\n    \"input_values\":
      [\n      {\n        \"identifier\": \"manager.Add_Included_Dessert.Order.Entree\",\n        \"value\":
      \"STEAK\"\n      },\n      {\n        \"identifier\": \"manager.Add_Included_Dessert.Order\",\n        \"value\":
      \"<<malloc 1>>\"\n      },\n      {\n        \"identifier\": \"manager.Add_Included_Dessert.Order.Salad\",\n        \"value\":
      \"CAESAR\"\n      },\n      {\n        \"identifier\": \"manager.Add_Included_Dessert.Order.Beverage\",\n        \"value\":
      \"MIXED_DRINK\"\n      }\n    ],\n    \"expected_values\": [],\n    \"requirement_id\":
      null\n  }\n]\n```\n\nRequirements:\n1. FR27.3: If a seat places any other combination
      of order items then the seat does not qualify for a free dessert.\n\nDetailed
      task description:\nBased on the above requirements and code, generate unit tests
      that exercise all requirements.\nMake sure the generated test cases clearly
      test the provided requirements.\n\nSolve the problem using the following approach:\nFor
      each requirement in order...\n    1. Come up with descriptive (unique) name
      for the test case and describe in natural language how this test exercises the
      requirement\n    2. Provide the name of the unit being tested (base file name
      without extension) and the name of the subprogram being tested (function name)\n    3.
      Provide the input and expected values by providing the correct identifier and
      value in the syntax outlined above.\n\nYou are allowed to use the following
      identifiers in your test case:\n- manager.Add_Included_Dessert.Order\n- manager.Add_Included_Dessert.Order[i].Soup
      (for all: i in 0..31)\n- manager.Add_Included_Dessert.Order[i].Salad (for all:
      i in 0..31)\n- manager.Add_Included_Dessert.Order[i].Entree (for all: i in 0..31)\n-
      manager.Add_Included_Dessert.Order[i].Dessert (for all: i in 0..31)\n- manager.Add_Included_Dessert.Order[i].Beverage
      (for all: i in 0..31)\n\nYou MUST set an input value for all input to the functions,
      used globals and called stubs.\nIf you do not ensure this, it can happen that
      your test does not cover the correct path corresponding to the requirement.\nAn
      expected value is not required for all identifiers. Only for those relevant
      to the requirement.\n\n\nNotes:\n- You are NOT allowed to invent any syntax
      that is not specified in the syntax reference. Stick to the syntax provided.\n-
      You are NOT allowed to invent any units or functions that are not present in
      the provided code.\n- This is a highly critical task, please ensure that the
      test cases are correct and complete and do not contain any logical or syntactical
      errors.\n- Test cases are independent of each other, i.e., they should not rely
      on one being run before the other (or environment being modified by one).\n-
      Generate exactly one test case per requirement.\n- In case the requirement and
      the code differ, the requirement is what you should test, i.e., it is the source
      of truth.\n- It might be that some of the provided code context and identifiers
      are incorrect. Use the most obviously correct parts of both and ignore the rest.\n\nReturn
      your answer in the following format:\n```json\n{\n    \"test_case_for_requirement_1\":
      <test case testing the first requirement in the list>,\n    \"test_case_for_requirement_2\":
      <test case testing the second requirement in the list>,\n    ...\n}\n```\n",
      "role": "user"}], "model": "gpt-4.1", "response_format": {"json_schema": {"name":
      "TestGenerationResult", "schema": {"$defs": {"ExpectedValueMapping": {"additionalProperties":
      false, "properties": {"identifier": {"$ref": "#/$defs/Identifier"}, "value":
      {"title": "Value", "type": "string"}}, "required": ["identifier", "value"],
      "title": "ExpectedValueMapping", "type": "object"}, "Identifier": {"enum": ["manager.Add_Included_Dessert.Order",
      "manager.Add_Included_Dessert.Order[0].Soup", "manager.Add_Included_Dessert.Order[0].Salad",
      "manager.Add_Included_Dessert.Order[0].Entree", "manager.Add_Included_Dessert.Order[0].Dessert",
      "manager.Add_Included_Dessert.Order[0].Beverage", "manager.Add_Included_Dessert.Order[1].Soup",
      "manager.Add_Included_Dessert.Order[1].Salad", "manager.Add_Included_Dessert.Order[1].Entree",
      "manager.Add_Included_Dessert.Order[1].Dessert", "manager.Add_Included_Dessert.Order[1].Beverage",
      "manager.Add_Included_Dessert.Order[2].Soup", "manager.Add_Included_Dessert.Order[2].Salad",
      "manager.Add_Included_Dessert.Order[2].Entree", "manager.Add_Included_Dessert.Order[2].Dessert",
      "manager.Add_Included_Dessert.Order[2].Beverage", "manager.Add_Included_Dessert.Order[3].Soup",
      "manager.Add_Included_Dessert.Order[3].Salad", "manager.Add_Included_Dessert.Order[3].Entree",
      "manager.Add_Included_Dessert.Order[3].Dessert", "manager.Add_Included_Dessert.Order[3].Beverage",
      "manager.Add_Included_Dessert.Order[4].Soup", "manager.Add_Included_Dessert.Order[4].Salad",
      "manager.Add_Included_Dessert.Order[4].Entree", "manager.Add_Included_Dessert.Order[4].Dessert",
      "manager.Add_Included_Dessert.Order[4].Beverage", "manager.Add_Included_Dessert.Order[5].Soup",
      "manager.Add_Included_Dessert.Order[5].Salad", "manager.Add_Included_Dessert.Order[5].Entree",
      "manager.Add_Included_Dessert.Order[5].Dessert", "manager.Add_Included_Dessert.Order[5].Beverage",
      "manager.Add_Included_Dessert.Order[6].Soup", "manager.Add_Included_Dessert.Order[6].Salad",
      "manager.Add_Included_Dessert.Order[6].Entree", "manager.Add_Included_Dessert.Order[6].Dessert",
      "manager.Add_Included_Dessert.Order[6].Beverage", "manager.Add_Included_Dessert.Order[7].Soup",
      "manager.Add_Included_Dessert.Order[7].Salad", "manager.Add_Included_Dessert.Order[7].Entree",
      "manager.Add_Included_Dessert.Order[7].Dessert", "manager.Add_Included_Dessert.Order[7].Beverage",
      "manager.Add_Included_Dessert.Order[8].Soup", "manager.Add_Included_Dessert.Order[8].Salad",
      "manager.Add_Included_Dessert.Order[8].Entree", "manager.Add_Included_Dessert.Order[8].Dessert",
      "manager.Add_Included_Dessert.Order[8].Beverage", "manager.Add_Included_Dessert.Order[9].Soup",
      "manager.Add_Included_Dessert.Order[9].Salad", "manager.Add_Included_Dessert.Order[9].Entree",
      "manager.Add_Included_Dessert.Order[9].Dessert", "manager.Add_Included_Dessert.Order[9].Beverage",
      "manager.Add_Included_Dessert.Order[10].Soup", "manager.Add_Included_Dessert.Order[10].Salad",
      "manager.Add_Included_Dessert.Order[10].Entree", "manager.Add_Included_Dessert.Order[10].Dessert",
      "manager.Add_Included_Dessert.Order[10].Beverage", "manager.Add_Included_Dessert.Order[11].Soup",
      "manager.Add_Included_Dessert.Order[11].Salad", "manager.Add_Included_Dessert.Order[11].Entree",
      "manager.Add_Included_Dessert.Order[11].Dessert", "manager.Add_Included_Dessert.Order[11].Beverage",
      "manager.Add_Included_Dessert.Order[12].Soup", "manager.Add_Included_Dessert.Order[12].Salad",
      "manager.Add_Included_Dessert.Order[12].Entree", "manager.Add_Included_Dessert.Order[12].Dessert",
      "manager.Add_Included_Dessert.Order[12].Beverage", "manager.Add_Included_Dessert.Order[13].Soup",
      "manager.Add_Included_Dessert.Order[13].Salad", "manager.Add_Included_Dessert.Order[13].Entree",
      "manager.Add_Included_Dessert.Order[13].Dessert", "manager.Add_Included_Dessert.Order[13].Beverage",
      "manager.Add_Included_Dessert.Order[14].Soup", "manager.Add_Included_Dessert.Order[14].Salad",
      "manager.Add_Included_Dessert.Order[14].Entree", "manager.Add_Included_Dessert.Order[14].Dessert",
      "manager.Add_Included_Dessert.Order[14].Beverage", "manager.Add_Included_Dessert.Order[15].Soup",
      "manager.Add_Included_Dessert.Order[15].Salad", "manager.Add_Included_Dessert.Order[15].Entree",
      "manager.Add_Included_Dessert.Order[15].Dessert", "manager.Add_Included_Dessert.Order[15].Beverage",
      "manager.Add_Included_Dessert.Order[16].Soup", "manager.Add_Included_Dessert.Order[16].Salad",
      "manager.Add_Included_Dessert.Order[16].Entree", "manager.Add_Included_Dessert.Order[16].Dessert",
      "manager.Add_Included_Dessert.Order[16].Beverage", "manager.Add_Included_Dessert.Order[17].Soup",
      "manager.Add_Included_Dessert.Order[17].Salad", "manager.Add_Included_Dessert.Order[17].Entree",
      "manager.Add_Included_Dessert.Order[17].Dessert", "manager.Add_Included_Dessert.Order[17].Beverage",
      "manager.Add_Included_Dessert.Order[18].Soup", "manager.Add_Included_Dessert.Order[18].Salad",
      "manager.Add_Included_Dessert.Order[18].Entree", "manager.Add_Included_Dessert.Order[18].Dessert",
      "manager.Add_Included_Dessert.Order[18].Beverage", "manager.Add_Included_Dessert.Order[19].Soup",
      "manager.Add_Included_Dessert.Order[19].Salad", "manager.Add_Included_Dessert.Order[19].Entree",
      "manager.Add_Included_Dessert.Order[19].Dessert", "manager.Add_Included_Dessert.Order[19].Beverage",
      "manager.Add_Included_Dessert.Order[20].Soup", "manager.Add_Included_Dessert.Order[20].Salad",
      "manager.Add_Included_Dessert.Order[20].Entree", "manager.Add_Included_Dessert.Order[20].Dessert",
      "manager.Add_Included_Dessert.Order[20].Beverage", "manager.Add_Included_Dessert.Order[21].Soup",
      "manager.Add_Included_Dessert.Order[21].Salad", "manager.Add_Included_Dessert.Order[21].Entree",
      "manager.Add_Included_Dessert.Order[21].Dessert", "manager.Add_Included_Dessert.Order[21].Beverage",
      "manager.Add_Included_Dessert.Order[22].Soup", "manager.Add_Included_Dessert.Order[22].Salad",
      "manager.Add_Included_Dessert.Order[22].Entree", "manager.Add_Included_Dessert.Order[22].Dessert",
      "manager.Add_Included_Dessert.Order[22].Beverage", "manager.Add_Included_Dessert.Order[23].Soup",
      "manager.Add_Included_Dessert.Order[23].Salad", "manager.Add_Included_Dessert.Order[23].Entree",
      "manager.Add_Included_Dessert.Order[23].Dessert", "manager.Add_Included_Dessert.Order[23].Beverage",
      "manager.Add_Included_Dessert.Order[24].Soup", "manager.Add_Included_Dessert.Order[24].Salad",
      "manager.Add_Included_Dessert.Order[24].Entree", "manager.Add_Included_Dessert.Order[24].Dessert",
      "manager.Add_Included_Dessert.Order[24].Beverage", "manager.Add_Included_Dessert.Order[25].Soup",
      "manager.Add_Included_Dessert.Order[25].Salad", "manager.Add_Included_Dessert.Order[25].Entree",
      "manager.Add_Included_Dessert.Order[25].Dessert", "manager.Add_Included_Dessert.Order[25].Beverage",
      "manager.Add_Included_Dessert.Order[26].Soup", "manager.Add_Included_Dessert.Order[26].Salad",
      "manager.Add_Included_Dessert.Order[26].Entree", "manager.Add_Included_Dessert.Order[26].Dessert",
      "manager.Add_Included_Dessert.Order[26].Beverage", "manager.Add_Included_Dessert.Order[27].Soup",
      "manager.Add_Included_Dessert.Order[27].Salad", "manager.Add_Included_Dessert.Order[27].Entree",
      "manager.Add_Included_Dessert.Order[27].Dessert", "manager.Add_Included_Dessert.Order[27].Beverage",
      "manager.Add_Included_Dessert.Order[28].Soup", "manager.Add_Included_Dessert.Order[28].Salad",
      "manager.Add_Included_Dessert.Order[28].Entree", "manager.Add_Included_Dessert.Order[28].Dessert",
      "manager.Add_Included_Dessert.Order[28].Beverage", "manager.Add_Included_Dessert.Order[29].Soup",
      "manager.Add_Included_Dessert.Order[29].Salad", "manager.Add_Included_Dessert.Order[29].Entree",
      "manager.Add_Included_Dessert.Order[29].Dessert", "manager.Add_Included_Dessert.Order[29].Beverage",
      "manager.Add_Included_Dessert.Order[30].Soup", "manager.Add_Included_Dessert.Order[30].Salad",
      "manager.Add_Included_Dessert.Order[30].Entree", "manager.Add_Included_Dessert.Order[30].Dessert",
      "manager.Add_Included_Dessert.Order[30].Beverage", "manager.Add_Included_Dessert.Order[31].Soup",
      "manager.Add_Included_Dessert.Order[31].Salad", "manager.Add_Included_Dessert.Order[31].Entree",
      "manager.Add_Included_Dessert.Order[31].Dessert", "manager.Add_Included_Dessert.Order[31].Beverage"],
      "title": "Identifier", "type": "string"}, "InputValueMapping": {"additionalProperties":
      false, "properties": {"identifier": {"$ref": "#/$defs/Identifier"}, "value":
      {"title": "Value", "type": "string"}}, "required": ["identifier", "value"],
      "title": "InputValueMapping", "type": "object"}, "TestCase": {"additionalProperties":
      false, "properties": {"expected_values": {"items": {"$ref": "#/$defs/ExpectedValueMapping"},
      "title": "Expected Values", "type": "array"}, "input_values": {"items": {"$ref":
      "#/$defs/InputValueMapping"}, "title": "Input Values", "type": "array"}, "requirement_id":
      {"title": "Requirement Id", "type": "string"}, "subprogram_name": {"title":
      "Subprogram Name", "type": "string"}, "test_description": {"title": "Test Description",
      "type": "string"}, "test_name": {"title": "Test Name", "type": "string"}, "unit_name":
      {"title": "Unit Name", "type": "string"}}, "required": ["test_name", "test_description",
      "requirement_id", "unit_name", "subprogram_name", "input_values", "expected_values"],
      "title": "TestCase", "type": "object"}}, "additionalProperties": false, "properties":
      {"test_case_for_requirement": {"$ref": "#/$defs/TestCase"}}, "required": ["test_case_for_requirement"],
      "title": "TestGenerationResult", "type": "object"}, "strict": true}, "type":
      "json_schema"}, "seed": 42, "stream": false, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      api-key:
      - REDACTED
      authorization:
      - REDACTED
      connection:
      - keep-alive
      content-length:
      - '33899'
      content-type:
      - application/json
      host:
      - REDACTED
      user-agent:
      - AsyncAzureOpenAI/Python 1.58.1
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-helper-method:
      - beta.chat.completions.parse
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.58.1
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.12
    method: POST
    uri: https://rg-rds-play-openai-pes-ppt.openai.azure.com/openai/deployments/gpt-4.1/chat/completions?api-version=2024-12-01-preview
  response:
    body:
      string: '{"choices":[{"content_filter_results":{"hate":{"filtered":false,"severity":"safe"},"protected_material_code":{"filtered":false,"detected":false},"protected_material_text":{"filtered":false,"detected":false},"self_harm":{"filtered":false,"severity":"safe"},"sexual":{"filtered":false,"severity":"safe"},"violence":{"filtered":false,"severity":"safe"}},"finish_reason":"stop","index":0,"logprobs":null,"message":{"annotations":[],"content":"{\"test_case_for_requirement_1\":{\"test_name\":\"Test_No_Free_Dessert_For_Non_Qualifying_Combination\",\"test_description\":\"Tests
        that Add_Included_Dessert does not assign a free dessert when the order does
        not match any qualifying combination (neither STEAK+CAESAR+MIXED_DRINK nor
        LOBSTER+GREEN+WINE). This exercises FR27.3, ensuring that for any other combination,
        the Dessert field remains unchanged (NO_DESSERT).\",\"requirement_id\":\"FR27.3\",\"unit_name\":\"manager\",\"subprogram_name\":\"Add_Included_Dessert\",\"input_values\":[{\"identifier\":\"manager.Add_Included_Dessert.Order\",\"value\":\"\u003c\u003cmalloc
        1\u003e\u003e\"},{\"identifier\":\"manager.Add_Included_Dessert.Order[0].Entree\",\"value\":\"CHICKEN\"},{\"identifier\":\"manager.Add_Included_Dessert.Order[0].Salad\",\"value\":\"GREEN\"},{\"identifier\":\"manager.Add_Included_Dessert.Order[0].Beverage\",\"value\":\"SODA\"},{\"identifier\":\"manager.Add_Included_Dessert.Order[0].Dessert\",\"value\":\"NO_DESSERT\"},{\"identifier\":\"manager.Add_Included_Dessert.Order[0].Soup\",\"value\":\"NO_SOUP\"}],\"expected_values\":[{\"identifier\":\"manager.Add_Included_Dessert.Order[0].Dessert\",\"value\":\"NO_DESSERT\"}]}}","refusal":null,"role":"assistant"}}],"created":1752564162,"id":"chatcmpl-BtUHqtlDIJqNPTloeKzLhCgQ3n8ly","model":"gpt-4.1-2025-04-14","object":"chat.completion","prompt_filter_results":[{"prompt_index":0,"content_filter_results":{"hate":{"filtered":false,"severity":"safe"},"jailbreak":{"filtered":false,"detected":false},"self_harm":{"filtered":false,"severity":"safe"},"sexual":{"filtered":false,"severity":"safe"},"violence":{"filtered":false,"severity":"safe"}}}],"system_fingerprint":"fp_07e970ab25","usage":{"completion_tokens":290,"completion_tokens_details":{"accepted_prediction_tokens":0,"audio_tokens":0,"reasoning_tokens":0,"rejected_prediction_tokens":0},"prompt_tokens":8177,"prompt_tokens_details":{"audio_tokens":0,"cached_tokens":0},"total_tokens":8467}}

        '
    headers:
      Content-Length:
      - '2410'
      Content-Type:
      - application/json
      Date:
      - Tue, 15 Jul 2025 07:22:45 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      apim-request-id:
      - c0b8312f-b127-4d8e-b4c9-cb69ff2a4342
      azureml-model-session:
      - d073-20250625151118
      cmp-upstream-response-duration:
      - '3380'
      x-accel-buffering:
      - 'no'
      x-content-type-options:
      - nosniff
      x-ms-deployment-name:
      - gpt-4.1
      x-ms-rai-invoked:
      - 'true'
      x-ms-region:
      - Sweden Central
      x-ratelimit-limit-requests:
      - '1006'
      x-ratelimit-limit-tokens:
      - '1006000'
      x-ratelimit-remaining-requests:
      - '999'
      x-ratelimit-remaining-tokens:
      - '963219'
      x-request-id:
      - bab7d374-155f-4d4a-a8e0-8e88857ddf78
    status:
      code: 200
      message: OK
- request:
    body: '{"max_completion_tokens": 8192, "messages": [{"content": "You are an AI
      assistant that generates test code for given requirements.", "role": "system"},
      {"content": "\nBased on the following requirements, references, and code, generate
      one test case per given requirement that exercises it.\n\nTest framework reference:\n##
      Test Case Format\nThe format of a test case is as follows:\n{\n    \"test_name\":
      <some descriptive test name>,\n    \"test_description\": <more details about
      the test>\n    \"requirement_id\": <requirement being tested by this test> (optional)\n    \"unit_name\":
      <unit_name>,\n    \"subprogram_name\": <subprogram_name>,\n    \"input_values\":
      [\n        { \"identifier\": <identifier>, \"value\": <value> },\n        ...\n    ],\n    \"expected_values\":
      [\n        { \"identifier\": <identifier>, \"value\": <value> },\n        ...\n    ]\n}\n\n###
      Identifier and Value Syntax\nThe following sections describe the syntax for
      specifying the `identifier` and `value` fields in the test case format. `unit_name`
      and `subprogram_name` refer to file names of C/C++ files (without extension)
      and function names in these files respectively (to refer to methods in classes
      use `<class name>::<method name>`). It is only possible to include identifiers
      from different units and other subprograms if they are called/used in the subprogram
      being tested.\n\n#### Numeric Types\n- Assign the number directly.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.parameter\", \"value\": \"42\" }\n    { \"identifier\":
      \"unit.subprogram.parameter\", \"value\": \"84\" }\n\n#### Structure Types\n-
      Use the standard C syntax to refer to fields within structures.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.struct_param.field\", \"value\": \"CAESAR\"
      }\n    { \"identifier\": \"unit.subprogram.struct_param.field\", \"value\":
      \"STEAK\" }\n\n#### Enumeration Types\n- Use the enumeral value directly.\n  -
      Example:\n    { \"identifier\": \"unit.subprogram.enum_param\", \"value\": \"ENUM_VALUE\"
      }\n\n#### Character and String Types\n- Use standard C delimiters for characters
      and strings.\n  - Example:\n    { \"identifier\": \"unit.subprogram.char_param\",
      \"value\": \"''a''\" }\n    { \"identifier\": \"unit.subprogram.string_param\",
      \"value\": \"\\\"Hello, World\\\"\" }\n- Treat strings as atomic values to set.
      Do not attempt to treat them as a char array, i.e., do not malloc or attempt
      to access chars at individual indices.\n\n#### Pointer and Array Types\n- For
      constrained arrays, specify the index and value.\n  - Example:\n    { \"identifier\":
      \"unit.subprogram.array_param[2]\", \"value\": \"42\" }\n- For unconstrained
      arrays, use `<<malloc [amount of slots to allocate as integer]>>` to allocate
      memory.\n  - Example:\n    { \"identifier\": \"unit.subprogram.array_param\",
      \"value\": \"<<malloc 2>>\" }\n    { \"identifier\": \"unit.subprogram.array_param[1]\",
      \"value\": \"3\" }\n- For pointers, use index 0 to access it (generally pointers
      and unconstrained arrays are the same after all)\n  - Example:\n    { \"identifier\":
      \"unit.subprogram.ptr_param[0]\", \"value\": \"12\" }\n- If you want to make
      something null then use `<<null>>`.\n  - Example:\n    { \"identifier\": \"unit.subprogram.pointer_param\",
      \"value\": \"<<null>>\" }\n    or\n    { \"identifier\": \"unit.subprogram.array_param\",
      \"value\": \"<<null>>\" }\n\n#### Function Return Parameters\n- Use the keyword
      `return` for function return values.\n  - Example:\n    { \"identifier\": \"unit.subprogram.return\",
      \"value\": \"23.0\" }\n\n#### Global Objects\n- Use the syntax `UNIT.<<GLOBAL>>.OBJECT`
      to set values for global objects.\n  - Example:\n    { \"identifier\": \"unit.<<GLOBAL>>.global_object.field\",
      \"value\": \"VALUE\" }\n- Note: `UNIT.OBJECT` is NEVER valid syntax\n\n#####
      Classes\n- To set and expect values of methods in a class (unlike standalone
      subprograms), it is necessary to first instantiate a base object using a constructor\n-
      Use the syntax `UNIT.<<GLOBAL>>.(cl).CLASS_NAME.SUBCLASS_NAME.<<constructor>>.<<call>>`
      to call the constructor of `SUBCLASS` to instantiate a `CLASS` object\n  - Example:\n    {
      \"identifier\": \"unit.<<GLOBAL>>.(cl).class_name.class_name.<<constructor>>.<<call>>\",
      \"value\": \"0\" }\n  - Note: The value in this case is irrelevant and always
      set to 0.\n- To set and expect member variables of a constructed object use
      the syntax `UNIT.<<GLOBAL>>.(cl).CLASS_NAME.SUBCLASS_NAME.MEMBER_NAME`\n  -
      Example:\n    { \"identifier\": \"unit.<<GLOBAL>>.(cl).class_name.class_name.member\",
      \"value\": \"test\" }\n  - Note: If the member is a structured entity like a
      struct or a class instance you can access the subfields like described in the
      `Structure Types` section.\n- To set and expect arguments and return values
      of methods in a class use the name do so like you would for regular subprograms
      except that you prefix the name with the class name and `::`\n  - Example:\n    {
      \"identifier\": \"unit.class_name::member_method.parameter\", \"value\": \"2\"
      }\n  - Note: If you use this ALWAYS first call the class constructor!\n\n####
      Range of Values for Input Data\n- Use range expressions to test a range of values.\n  -
      Example:\n    { \"identifier\": \"unit.subprogram.parameter\", \"value\": \"vary
      from: 0.0 to: 90.0 by: 0.1\" }\n\n#### Range of Values for Expected Results\n-
      Use the syntax `<min> .. <max>` for expected value ranges.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.parameter\", \"value\": \"257.1 .. 259.9\"
      }\n\n#### List of Values\n- Use a comma-separated list for multiple values.\n  -
      Example:\n    { \"identifier\": \"unit.subprogram.parameter\", \"value\": \"1,2,4\"
      }\n- Use parentheses for repeated values.\n  - Example:\n    { \"identifier\":
      \"unit.subprogram.parameter\", \"value\": \"1,(4)2,4\" }\n- Note: This is used
      in case something needs to be set multiple times (like for a stub return) during
      one call, NOT to specify values in an array. To do so, use the regular index
      syntax as outlined above instead.\n\n#### Working with Overloaded Subprograms\n-
      Append the parameter type list to the subprogram name.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram(int).parameter\", \"value\": \"3\" }\n    {
      \"identifier\": \"unit.subprogram(char).parameter\", \"value\": \"''d''\" }\n\n####
      Boolean Values\n- Use `1` for `true` and `0` for `false`.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.boolean_param\", \"value\": \"1\" }\n    {
      \"identifier\": \"unit.subprogram.boolean_param\", \"value\": \"0\" }\n\n####
      Accessing Subprograms Outside the Unit\n- Use `uut_prototype_stubs` as the unit
      for subprograms defined outside of the unit of the test case.\n  - Example:\n    {
      \"identifier\": \"uut_prototype_stubs.name_of_external_subprogram.parameter\",
      \"value\": \"42\" }\n\n#### Emulating stubbed pointer manipulating functions\n-
      Normally it is easy to emulate a stubbed function returning some value (by setting
      the return value of the stubbed function)\n- This is not possible if the stubbed
      function works with pointers as only values can be specified (so only ever the
      contents of a pointer), e.g., functions like memcpy\n- Therefore, in these cases
      you can emulate the stubbed function setting the contents of the pointer using
      <<pointer value_to_set>>\n  - For example assume we have a pointer input variable
      *float x that is modified by a stubbed called to foo(*float pointer_to_modify),
      i.e., foo(x). Then you can change the value, i.e., *x to 10 like so:\n    {
      \"identifier\": \"uut_prototype_stubs.foo.pointer_to_modify\", \"value\": \"<<pointer
      10>>\" }\n  - The other input values of the function of course do not need to
      be specified explicitly (unless you also want to see the values of those input
      pointers)\n- You can only set one variable like this per test case due to technical
      reasons so choose wisely (if you use this feature)\n\n#### Emulating multiple
      function calls\n- Use the multiple value syntax, one value will be read everytime
      the stubbed function is called\n  - Example (foo is called twice, and should
      return 2 the first time and 3 the second):\n    { \"identifier\": \"uut_prototype_stubs.foo.return\",
      \"value\": \"2,3\" }\n\n## Test Case Execution\n1. The test framework will call
      the specified subprogram/function\n2. When a value of a variable would be read,
      if it is specified as a test value, it is set to that value instead\n3. After
      the subprogram finishes, the expected values are checked against the actual
      values at that point\n\nAll tests are executed in isolation. The execution of
      one test does not influence the execution of others.\n\n### Stubbing behaviour\n-
      All function calls from external files, i.e, those referenced with `uut_prototype_stubs`
      are stubbed automatically and do not implement any behaviour. Setting their
      input values has no effect on their output values (instead default values are
      output unless you specify values for them).\n- If any of the parameters or return
      value of a called function (which is not automatically stubbed as outlined above)
      are set or expected to be some value using an identifier, the function will
      be stubbed during execution and not implement any behaviour. In this case it
      is forbidden to also expect the return value to equal something (it won''t as
      the function will be stubbed).\n  - If none are set or expected the function
      will execute as normal\n\n### Default identifier values and initialization\n-
      In general any value not set (input of course), will fall back to a default
      value. However this should be avoided to prevent undefined behaviour. This means
      all input variables (and outputs of stubbed values) should be exhaustively described.\n-
      Do not set an identifier multiple times, it just results in overriding of the
      previous value\n- To access methods of a class and set values it is imperative
      to first instantiate the class using a constructor. For all classes a default
      object is ready to be initialized if needed using the respective constructor.\n-
      Similarly, arrays or pointers should always be allocated\n\n## Examples\n\nLet''s
      consider a more complex C++ code snippet in a file named `data_processor.cpp`:\n\n```cpp\n//
      File: data_processor.cpp\n// Unit: data_processor\n\ntypedef struct {\n    int
      id;\n    float value;\n    char status;\n} DataRecord;\n\ntypedef enum {\n    MODE_NORMAL
      = 0,\n    MODE_DEBUG = 1,\n    MODE_ERROR = 2\n} ProcessingMode;\n\n// External
      function declarations\nextern int validate_record(DataRecord* record);\nextern
      void log_error(const char* message);\nextern DataRecord* allocate_buffer(int
      size);\n\nProcessingMode current_mode = MODE_NORMAL;\n\nint process_data_array(DataRecord*
      input_array, int array_size, DataRecord** output_array) {\n    if (input_array
      == NULL || array_size <= 0) {\n        if (current_mode == MODE_DEBUG) {\n            log_error(\"Invalid
      input parameters\");\n        }\n        return -1;\n    }\n    \n    // Allocate
      output buffer\n    *output_array = allocate_buffer(array_size);\n    if (*output_array
      == NULL) {\n        log_error(\"Memory allocation failed\");\n        return
      -2;\n    }\n    \n    int processed_count = 0;\n    for (int i = 0; i < array_size;
      i++) {\n        // Validate each record using external function\n        int
      validation_result = validate_record(&input_array[i]);\n        \n        if
      (validation_result > 0) {\n            // Copy valid record to output with modified
      value\n            (*output_array)[processed_count].id = input_array[i].id;\n            (*output_array)[processed_count].value
      = input_array[i].value * 1.5f;\n            (*output_array)[processed_count].status
      = ''V''; // Valid\n            processed_count++;\n        } else if (current_mode
      == MODE_ERROR) {\n            // In error mode, stop processing on first invalid
      record\n            log_error(\"Invalid record encountered in error mode\");\n            return
      processed_count;\n        }\n        // In normal mode, skip invalid records
      and continue\n    }\n    \n    return processed_count;\n}\n```\n\n### Example
      1: Testing Null Input Handling with Branching\n\n**Requirement REQ-DP-001:**
      The `process_data_array` function shall return -1 when input_array is NULL and
      log an error message if in DEBUG mode.\n\n```json\n{\n  \"test_name\": \"Test_Null_Input_Debug_Mode\",\n  \"test_description\":
      \"Tests process_data_array with NULL input in DEBUG mode to ensure it returns
      -1 and calls log_error.\",\n  \"requirement_id\": \"REQ-DP-001\",\n  \"unit_name\":
      \"data_processor\",\n  \"subprogram_name\": \"process_data_array\",\n  \"input_values\":
      [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\", \"value\":
      \"MODE_DEBUG\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<null>>\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"5\" },\n  ],\n  \"expected_values\": [\n    { \"identifier\": \"uut_prototype_stubs.log_error.message\",
      \"value\": \"\\\"Invalid input parameters\\\"\" },\n    { \"identifier\": \"data_processor.process_data_array.return\",
      \"value\": \"-1\" }\n  ]\n}\n```\n\n### Example 2: Testing Memory Allocation
      with Stubbing\n\n**Requirement REQ-DP-002:** The `process_data_array` function
      shall return -2 and log an error when memory allocation fails.\n\n```json\n{\n  \"test_name\":
      \"Test_Memory_Allocation_Failure\",\n  \"test_description\": \"Tests process_data_array
      when allocate_buffer returns NULL to ensure proper error handling.\",\n  \"requirement_id\":
      \"REQ-DP-002\",\n  \"unit_name\": \"data_processor\",\n  \"subprogram_name\":
      \"process_data_array\",\n  \"input_values\": [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\",
      \"value\": \"MODE_NORMAL\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<malloc 1>>\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].id\",
      \"value\": \"1\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].value\",
      \"value\": \"10.5\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].status\",
      \"value\": \"''A''\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"2\" },\n    { \"identifier\": \"uut_prototype_stubs.allocate_buffer.return\",
      \"value\": \"<<null>>\" },\n  ],\n  \"expected_values\": [\n    { \"identifier\":
      \"uut_prototype_stubs.log_error.message\", \"value\": \"\\\"Memory allocation
      failed\\\"\" },\n    { \"identifier\": \"data_processor.process_data_array.return\",
      \"value\": \"-2\" }\n  ]\n}\n```\n\n### Example 3: Testing Complex Processing
      with Multiple Stubs\n\n**Requirement REQ-DP-003:** The `process_data_array`
      function shall process valid records by multiplying their values by 1.5 and
      setting status to ''V''.\n\n```json\n{\n  \"test_name\": \"Test_Valid_Record_Processing\",\n  \"test_description\":
      \"Tests process_data_array with mixed valid/invalid records to ensure proper
      processing and output.\",\n  \"requirement_id\": \"REQ-DP-003\",\n  \"unit_name\":
      \"data_processor\",\n  \"subprogram_name\": \"process_data_array\",\n  \"input_values\":
      [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\", \"value\":
      \"MODE_NORMAL\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].id\",
      \"value\": \"100\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].value\",
      \"value\": \"20.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].status\",
      \"value\": \"''A''\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].id\",
      \"value\": \"200\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].status\",
      \"value\": \"''B''\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[2].id\",
      \"value\": \"300\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[2].value\",
      \"value\": \"40.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[2].status\",
      \"value\": \"''C''\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"3\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0]\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"uut_prototype_stubs.validate_record.return\",
      \"value\": \"1,0,1\" }\n  ],\n  \"expected_values\": [\n    { \"identifier\":
      \"data_processor.process_data_array.return\", \"value\": \"2\" },\n    { \"identifier\":
      \"data_processor.process_data_array.output_array[0][0].id\", \"value\": \"100\"
      },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].status\",
      \"value\": \"''V''\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][1].id\",
      \"value\": \"300\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][1].value\",
      \"value\": \"60.0\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][1].status\",
      \"value\": \"''V''\" }\n  ]\n}\n```\n\n### Example 4: Testing Error Mode with
      Early Termination\n\n**Requirement REQ-DP-004:** The `process_data_array` function
      shall stop processing and return the current count when an invalid record is
      encountered in ERROR mode.\n\n```json\n{\n  \"test_name\": \"Test_Error_Mode_Early_Termination\",\n  \"test_description\":
      \"Tests process_data_array in ERROR mode to ensure it stops processing on first
      invalid record.\",\n  \"requirement_id\": \"REQ-DP-004\",\n  \"unit_name\":
      \"data_processor\",\n  \"subprogram_name\": \"process_data_array\",\n  \"input_values\":
      [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\", \"value\":
      \"MODE_ERROR\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].id\",
      \"value\": \"100\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].value\",
      \"value\": \"20.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].id\",
      \"value\": \"200\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"3\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0]\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"uut_prototype_stubs.allocate_buffer.size\",
      \"value\": \"3\" },\n    { \"identifier\": \"uut_prototype_stubs.validate_record.return\",
      \"value\": \"1,-1\" },\n  ],\n  \"expected_values\": [\n    { \"identifier\":
      \"uut_prototype_stubs.log_error.message\", \"value\": \"\\\"Invalid record encountered
      in error mode\\\"\" },\n    { \"identifier\": \"data_processor.process_data_array.return\",
      \"value\": \"1\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].id\",
      \"value\": \"100\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].status\",
      \"value\": \"''V''\" }\n  ]\n}\n```\n\nRelevant Code:\n```cpp\n// Unit: manager\n\n//
      Definitions of types, called functions and data structures:\n\nenum soups {
      NO_SOUP, ONION, CHOWDER };\n\nenum salads { NO_SALAD, CAESAR, GREEN };\n\nenum
      entrees { NO_ENTREE, STEAK, CHICKEN, LOBSTER, PASTA };\n\nenum desserts { NO_DESSERT,
      CAKE, PIE, FRUIT };\n\nenum beverages { NO_BEVERAGE, WINE, BEER, MIXED_DRINK,
      SODA };\n\nstruct order_type\n{\n  enum soups Soup;\n  enum salads Salad;\n  enum
      entrees Entree;\n  enum desserts Dessert;\n  enum beverages Beverage;\n};\n\n//
      Code for Add_Included_Dessert:\nvoid Add_Included_Dessert(struct order_type*
      Order)\n{\n  if(Order->Entree == STEAK &&\n     Order->Salad == CAESAR &&\n     Order->Beverage
      == MIXED_DRINK) {\n\n    Order->Dessert = PIE;\n\n  } else if(Order->Entree
      == LOBSTER &&\n            Order->Salad == GREEN &&\n            Order->Beverage
      == WINE) {\n\n    Order->Dessert = CAKE;\n  }\n}\n```\n\nExample Test Cases:\n```json\n[\n  {\n    \"test_name\":
      \"BASIS-PATH-003\",\n    \"test_description\": \"This is an automatically generated
      test case.\\nTest Path 3\\n(1) if ((Order->Entree == (STEAK) && Order->Salad
      == (CAESAR)) && Order->Beverage == (MIXED_DRINK)) ==> TRUE\\nTest Case Generation
      Notes:\",\n    \"unit_name\": \"manager\",\n    \"subprogram_name\": \"Add_Included_Dessert\",\n    \"input_values\":
      [\n      {\n        \"identifier\": \"manager.Add_Included_Dessert.Order.Entree\",\n        \"value\":
      \"STEAK\"\n      },\n      {\n        \"identifier\": \"manager.Add_Included_Dessert.Order\",\n        \"value\":
      \"<<malloc 1>>\"\n      },\n      {\n        \"identifier\": \"manager.Add_Included_Dessert.Order.Salad\",\n        \"value\":
      \"CAESAR\"\n      },\n      {\n        \"identifier\": \"manager.Add_Included_Dessert.Order.Beverage\",\n        \"value\":
      \"MIXED_DRINK\"\n      }\n    ],\n    \"expected_values\": [],\n    \"requirement_id\":
      null\n  }\n]\n```\n\nRequirements:\n1. FR27.1: If a seat places an order consisting
      of steak, caesar salad, and a mixed drink then the seat qualifies for free pie.\n2.
      FR27.2: If a seat places an order consisting of lobster, green salad, and wine
      then the seat qualifies for free cake.\n\nDetailed task description:\nBased
      on the above requirements and code, generate unit tests that exercise all requirements.\nMake
      sure the generated test cases clearly test the provided requirements.\n\nSolve
      the problem using the following approach:\nFor each requirement in order...\n    1.
      Come up with descriptive (unique) name for the test case and describe in natural
      language how this test exercises the requirement\n    2. Provide the name of
      the unit being tested (base file name without extension) and the name of the
      subprogram being tested (function name)\n    3. Provide the input and expected
      values by providing the correct identifier and value in the syntax outlined
      above.\n\nYou are allowed to use the following identifiers in your test case:\n-
      manager.Add_Included_Dessert.Order\n- manager.Add_Included_Dessert.Order[i].Soup
      (for all: i in 0..31)\n- manager.Add_Included_Dessert.Order[i].Salad (for all:
      i in 0..31)\n- manager.Add_Included_Dessert.Order[i].Entree (for all: i in 0..31)\n-
      manager.Add_Included_Dessert.Order[i].Dessert (for all: i in 0..31)\n- manager.Add_Included_Dessert.Order[i].Beverage
      (for all: i in 0..31)\n\nYou MUST set an input value for all input to the functions,
      used globals and called stubs.\nIf you do not ensure this, it can happen that
      your test does not cover the correct path corresponding to the requirement.\nAn
      expected value is not required for all identifiers. Only for those relevant
      to the requirement.\n\n\nNotes:\n- You are NOT allowed to invent any syntax
      that is not specified in the syntax reference. Stick to the syntax provided.\n-
      You are NOT allowed to invent any units or functions that are not present in
      the provided code.\n- This is a highly critical task, please ensure that the
      test cases are correct and complete and do not contain any logical or syntactical
      errors.\n- Test cases are independent of each other, i.e., they should not rely
      on one being run before the other (or environment being modified by one).\n-
      Generate exactly one test case per requirement.\n- In case the requirement and
      the code differ, the requirement is what you should test, i.e., it is the source
      of truth.\n- It might be that some of the provided code context and identifiers
      are incorrect. Use the most obviously correct parts of both and ignore the rest.\n\nReturn
      your answer in the following format:\n```json\n{\n    \"test_case_for_requirement_1\":
      <test case testing the first requirement in the list>,\n    \"test_case_for_requirement_2\":
      <test case testing the second requirement in the list>,\n    ...\n}\n```\n",
      "role": "user"}], "model": "gpt-4.1", "response_format": {"json_schema": {"name":
      "TestGenerationResult", "schema": {"$defs": {"ExpectedValueMapping": {"additionalProperties":
      false, "properties": {"identifier": {"$ref": "#/$defs/Identifier"}, "value":
      {"title": "Value", "type": "string"}}, "required": ["identifier", "value"],
      "title": "ExpectedValueMapping", "type": "object"}, "Identifier": {"enum": ["manager.Add_Included_Dessert.Order",
      "manager.Add_Included_Dessert.Order[0].Soup", "manager.Add_Included_Dessert.Order[0].Salad",
      "manager.Add_Included_Dessert.Order[0].Entree", "manager.Add_Included_Dessert.Order[0].Dessert",
      "manager.Add_Included_Dessert.Order[0].Beverage", "manager.Add_Included_Dessert.Order[1].Soup",
      "manager.Add_Included_Dessert.Order[1].Salad", "manager.Add_Included_Dessert.Order[1].Entree",
      "manager.Add_Included_Dessert.Order[1].Dessert", "manager.Add_Included_Dessert.Order[1].Beverage",
      "manager.Add_Included_Dessert.Order[2].Soup", "manager.Add_Included_Dessert.Order[2].Salad",
      "manager.Add_Included_Dessert.Order[2].Entree", "manager.Add_Included_Dessert.Order[2].Dessert",
      "manager.Add_Included_Dessert.Order[2].Beverage", "manager.Add_Included_Dessert.Order[3].Soup",
      "manager.Add_Included_Dessert.Order[3].Salad", "manager.Add_Included_Dessert.Order[3].Entree",
      "manager.Add_Included_Dessert.Order[3].Dessert", "manager.Add_Included_Dessert.Order[3].Beverage",
      "manager.Add_Included_Dessert.Order[4].Soup", "manager.Add_Included_Dessert.Order[4].Salad",
      "manager.Add_Included_Dessert.Order[4].Entree", "manager.Add_Included_Dessert.Order[4].Dessert",
      "manager.Add_Included_Dessert.Order[4].Beverage", "manager.Add_Included_Dessert.Order[5].Soup",
      "manager.Add_Included_Dessert.Order[5].Salad", "manager.Add_Included_Dessert.Order[5].Entree",
      "manager.Add_Included_Dessert.Order[5].Dessert", "manager.Add_Included_Dessert.Order[5].Beverage",
      "manager.Add_Included_Dessert.Order[6].Soup", "manager.Add_Included_Dessert.Order[6].Salad",
      "manager.Add_Included_Dessert.Order[6].Entree", "manager.Add_Included_Dessert.Order[6].Dessert",
      "manager.Add_Included_Dessert.Order[6].Beverage", "manager.Add_Included_Dessert.Order[7].Soup",
      "manager.Add_Included_Dessert.Order[7].Salad", "manager.Add_Included_Dessert.Order[7].Entree",
      "manager.Add_Included_Dessert.Order[7].Dessert", "manager.Add_Included_Dessert.Order[7].Beverage",
      "manager.Add_Included_Dessert.Order[8].Soup", "manager.Add_Included_Dessert.Order[8].Salad",
      "manager.Add_Included_Dessert.Order[8].Entree", "manager.Add_Included_Dessert.Order[8].Dessert",
      "manager.Add_Included_Dessert.Order[8].Beverage", "manager.Add_Included_Dessert.Order[9].Soup",
      "manager.Add_Included_Dessert.Order[9].Salad", "manager.Add_Included_Dessert.Order[9].Entree",
      "manager.Add_Included_Dessert.Order[9].Dessert", "manager.Add_Included_Dessert.Order[9].Beverage",
      "manager.Add_Included_Dessert.Order[10].Soup", "manager.Add_Included_Dessert.Order[10].Salad",
      "manager.Add_Included_Dessert.Order[10].Entree", "manager.Add_Included_Dessert.Order[10].Dessert",
      "manager.Add_Included_Dessert.Order[10].Beverage", "manager.Add_Included_Dessert.Order[11].Soup",
      "manager.Add_Included_Dessert.Order[11].Salad", "manager.Add_Included_Dessert.Order[11].Entree",
      "manager.Add_Included_Dessert.Order[11].Dessert", "manager.Add_Included_Dessert.Order[11].Beverage",
      "manager.Add_Included_Dessert.Order[12].Soup", "manager.Add_Included_Dessert.Order[12].Salad",
      "manager.Add_Included_Dessert.Order[12].Entree", "manager.Add_Included_Dessert.Order[12].Dessert",
      "manager.Add_Included_Dessert.Order[12].Beverage", "manager.Add_Included_Dessert.Order[13].Soup",
      "manager.Add_Included_Dessert.Order[13].Salad", "manager.Add_Included_Dessert.Order[13].Entree",
      "manager.Add_Included_Dessert.Order[13].Dessert", "manager.Add_Included_Dessert.Order[13].Beverage",
      "manager.Add_Included_Dessert.Order[14].Soup", "manager.Add_Included_Dessert.Order[14].Salad",
      "manager.Add_Included_Dessert.Order[14].Entree", "manager.Add_Included_Dessert.Order[14].Dessert",
      "manager.Add_Included_Dessert.Order[14].Beverage", "manager.Add_Included_Dessert.Order[15].Soup",
      "manager.Add_Included_Dessert.Order[15].Salad", "manager.Add_Included_Dessert.Order[15].Entree",
      "manager.Add_Included_Dessert.Order[15].Dessert", "manager.Add_Included_Dessert.Order[15].Beverage",
      "manager.Add_Included_Dessert.Order[16].Soup", "manager.Add_Included_Dessert.Order[16].Salad",
      "manager.Add_Included_Dessert.Order[16].Entree", "manager.Add_Included_Dessert.Order[16].Dessert",
      "manager.Add_Included_Dessert.Order[16].Beverage", "manager.Add_Included_Dessert.Order[17].Soup",
      "manager.Add_Included_Dessert.Order[17].Salad", "manager.Add_Included_Dessert.Order[17].Entree",
      "manager.Add_Included_Dessert.Order[17].Dessert", "manager.Add_Included_Dessert.Order[17].Beverage",
      "manager.Add_Included_Dessert.Order[18].Soup", "manager.Add_Included_Dessert.Order[18].Salad",
      "manager.Add_Included_Dessert.Order[18].Entree", "manager.Add_Included_Dessert.Order[18].Dessert",
      "manager.Add_Included_Dessert.Order[18].Beverage", "manager.Add_Included_Dessert.Order[19].Soup",
      "manager.Add_Included_Dessert.Order[19].Salad", "manager.Add_Included_Dessert.Order[19].Entree",
      "manager.Add_Included_Dessert.Order[19].Dessert", "manager.Add_Included_Dessert.Order[19].Beverage",
      "manager.Add_Included_Dessert.Order[20].Soup", "manager.Add_Included_Dessert.Order[20].Salad",
      "manager.Add_Included_Dessert.Order[20].Entree", "manager.Add_Included_Dessert.Order[20].Dessert",
      "manager.Add_Included_Dessert.Order[20].Beverage", "manager.Add_Included_Dessert.Order[21].Soup",
      "manager.Add_Included_Dessert.Order[21].Salad", "manager.Add_Included_Dessert.Order[21].Entree",
      "manager.Add_Included_Dessert.Order[21].Dessert", "manager.Add_Included_Dessert.Order[21].Beverage",
      "manager.Add_Included_Dessert.Order[22].Soup", "manager.Add_Included_Dessert.Order[22].Salad",
      "manager.Add_Included_Dessert.Order[22].Entree", "manager.Add_Included_Dessert.Order[22].Dessert",
      "manager.Add_Included_Dessert.Order[22].Beverage", "manager.Add_Included_Dessert.Order[23].Soup",
      "manager.Add_Included_Dessert.Order[23].Salad", "manager.Add_Included_Dessert.Order[23].Entree",
      "manager.Add_Included_Dessert.Order[23].Dessert", "manager.Add_Included_Dessert.Order[23].Beverage",
      "manager.Add_Included_Dessert.Order[24].Soup", "manager.Add_Included_Dessert.Order[24].Salad",
      "manager.Add_Included_Dessert.Order[24].Entree", "manager.Add_Included_Dessert.Order[24].Dessert",
      "manager.Add_Included_Dessert.Order[24].Beverage", "manager.Add_Included_Dessert.Order[25].Soup",
      "manager.Add_Included_Dessert.Order[25].Salad", "manager.Add_Included_Dessert.Order[25].Entree",
      "manager.Add_Included_Dessert.Order[25].Dessert", "manager.Add_Included_Dessert.Order[25].Beverage",
      "manager.Add_Included_Dessert.Order[26].Soup", "manager.Add_Included_Dessert.Order[26].Salad",
      "manager.Add_Included_Dessert.Order[26].Entree", "manager.Add_Included_Dessert.Order[26].Dessert",
      "manager.Add_Included_Dessert.Order[26].Beverage", "manager.Add_Included_Dessert.Order[27].Soup",
      "manager.Add_Included_Dessert.Order[27].Salad", "manager.Add_Included_Dessert.Order[27].Entree",
      "manager.Add_Included_Dessert.Order[27].Dessert", "manager.Add_Included_Dessert.Order[27].Beverage",
      "manager.Add_Included_Dessert.Order[28].Soup", "manager.Add_Included_Dessert.Order[28].Salad",
      "manager.Add_Included_Dessert.Order[28].Entree", "manager.Add_Included_Dessert.Order[28].Dessert",
      "manager.Add_Included_Dessert.Order[28].Beverage", "manager.Add_Included_Dessert.Order[29].Soup",
      "manager.Add_Included_Dessert.Order[29].Salad", "manager.Add_Included_Dessert.Order[29].Entree",
      "manager.Add_Included_Dessert.Order[29].Dessert", "manager.Add_Included_Dessert.Order[29].Beverage",
      "manager.Add_Included_Dessert.Order[30].Soup", "manager.Add_Included_Dessert.Order[30].Salad",
      "manager.Add_Included_Dessert.Order[30].Entree", "manager.Add_Included_Dessert.Order[30].Dessert",
      "manager.Add_Included_Dessert.Order[30].Beverage", "manager.Add_Included_Dessert.Order[31].Soup",
      "manager.Add_Included_Dessert.Order[31].Salad", "manager.Add_Included_Dessert.Order[31].Entree",
      "manager.Add_Included_Dessert.Order[31].Dessert", "manager.Add_Included_Dessert.Order[31].Beverage"],
      "title": "Identifier", "type": "string"}, "InputValueMapping": {"additionalProperties":
      false, "properties": {"identifier": {"$ref": "#/$defs/Identifier"}, "value":
      {"title": "Value", "type": "string"}}, "required": ["identifier", "value"],
      "title": "InputValueMapping", "type": "object"}, "TestCase": {"additionalProperties":
      false, "properties": {"expected_values": {"items": {"$ref": "#/$defs/ExpectedValueMapping"},
      "title": "Expected Values", "type": "array"}, "input_values": {"items": {"$ref":
      "#/$defs/InputValueMapping"}, "title": "Input Values", "type": "array"}, "requirement_id":
      {"title": "Requirement Id", "type": "string"}, "subprogram_name": {"title":
      "Subprogram Name", "type": "string"}, "test_description": {"title": "Test Description",
      "type": "string"}, "test_name": {"title": "Test Name", "type": "string"}, "unit_name":
      {"title": "Unit Name", "type": "string"}}, "required": ["test_name", "test_description",
      "requirement_id", "unit_name", "subprogram_name", "input_values", "expected_values"],
      "title": "TestCase", "type": "object"}}, "additionalProperties": false, "properties":
      {"test_case_for_requirement": {"$ref": "#/$defs/TestCase"}}, "required": ["test_case_for_requirement",
      "test_case_for_requirement"], "title": "TestGenerationResult", "type": "object"},
      "strict": true}, "type": "json_schema"}, "seed": 42, "stream": false, "temperature":
      0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      api-key:
      - REDACTED
      authorization:
      - REDACTED
      connection:
      - keep-alive
      content-length:
      - '34139'
      content-type:
      - application/json
      host:
      - REDACTED
      user-agent:
      - AsyncAzureOpenAI/Python 1.58.1
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-helper-method:
      - beta.chat.completions.parse
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.58.1
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.12
    method: POST
    uri: https://rg-rds-play-openai-pes-ppt.openai.azure.com/openai/deployments/gpt-4.1/chat/completions?api-version=2024-12-01-preview
  response:
    body:
      string: '{"choices":[{"content_filter_results":{"hate":{"filtered":false,"severity":"safe"},"protected_material_code":{"filtered":false,"detected":false},"protected_material_text":{"filtered":false,"detected":false},"self_harm":{"filtered":false,"severity":"safe"},"sexual":{"filtered":false,"severity":"safe"},"violence":{"filtered":false,"severity":"safe"}},"finish_reason":"stop","index":0,"logprobs":null,"message":{"annotations":[],"content":"{\n  \"test_case_for_requirement_1\":
        {\n    \"test_name\": \"Test_Steak_Caesar_MixedDrink_Qualifies_For_Free_Pie\",\n    \"test_description\":
        \"Verifies that an order with steak, caesar salad, and a mixed drink qualifies
        for free pie as dessert according to FR27.1.\",\n    \"requirement_id\": \"FR27.1\",\n    \"unit_name\":
        \"manager\",\n    \"subprogram_name\": \"Add_Included_Dessert\",\n    \"input_values\":
        [\n      { \"identifier\": \"manager.Add_Included_Dessert.Order\", \"value\":
        \"\u003c\u003cmalloc 1\u003e\u003e\" },\n      { \"identifier\": \"manager.Add_Included_Dessert.Order[0].Entree\",
        \"value\": \"STEAK\" },\n      { \"identifier\": \"manager.Add_Included_Dessert.Order[0].Salad\",
        \"value\": \"CAESAR\" },\n      { \"identifier\": \"manager.Add_Included_Dessert.Order[0].Beverage\",
        \"value\": \"MIXED_DRINK\" },\n      { \"identifier\": \"manager.Add_Included_Dessert.Order[0].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"manager.Add_Included_Dessert.Order[0].Dessert\",
        \"value\": \"NO_DESSERT\" }\n    ],\n    \"expected_values\": [\n      { \"identifier\":
        \"manager.Add_Included_Dessert.Order[0].Dessert\", \"value\": \"PIE\" }\n    ]\n  },\n  \"test_case_for_requirement_2\":
        {\n    \"test_name\": \"Test_Lobster_Green_Wine_Qualifies_For_Free_Cake\",\n    \"test_description\":
        \"Verifies that an order with lobster, green salad, and wine qualifies for
        free cake as dessert according to FR27.2.\",\n    \"requirement_id\": \"FR27.2\",\n    \"unit_name\":
        \"manager\",\n    \"subprogram_name\": \"Add_Included_Dessert\",\n    \"input_values\":
        [\n      { \"identifier\": \"manager.Add_Included_Dessert.Order\", \"value\":
        \"\u003c\u003cmalloc 1\u003e\u003e\" },\n      { \"identifier\": \"manager.Add_Included_Dessert.Order[0].Entree\",
        \"value\": \"LOBSTER\" },\n      { \"identifier\": \"manager.Add_Included_Dessert.Order[0].Salad\",
        \"value\": \"GREEN\" },\n      { \"identifier\": \"manager.Add_Included_Dessert.Order[0].Beverage\",
        \"value\": \"WINE\" },\n      { \"identifier\": \"manager.Add_Included_Dessert.Order[0].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"manager.Add_Included_Dessert.Order[0].Dessert\",
        \"value\": \"NO_DESSERT\" }\n    ],\n    \"expected_values\": [\n      { \"identifier\":
        \"manager.Add_Included_Dessert.Order[0].Dessert\", \"value\": \"CAKE\" }\n    ]\n  }\n}","refusal":null,"role":"assistant"}}],"created":1752564162,"id":"chatcmpl-BtUHqwBHwWDwTQGhAA8c5UGuH9JCu","model":"gpt-4.1-2025-04-14","object":"chat.completion","prompt_filter_results":[{"prompt_index":0,"content_filter_results":{"hate":{"filtered":false,"severity":"safe"},"jailbreak":{"filtered":false,"detected":false},"self_harm":{"filtered":false,"severity":"safe"},"sexual":{"filtered":false,"severity":"safe"},"violence":{"filtered":false,"severity":"safe"}}}],"system_fingerprint":"fp_07e970ab25","usage":{"completion_tokens":635,"completion_tokens_details":{"accepted_prediction_tokens":0,"audio_tokens":0,"reasoning_tokens":0,"rejected_prediction_tokens":0},"prompt_tokens":8235,"prompt_tokens_details":{"audio_tokens":0,"cached_tokens":0},"total_tokens":8870}}

        '
    headers:
      Content-Length:
      - '3571'
      Content-Type:
      - application/json
      Date:
      - Tue, 15 Jul 2025 07:22:44 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      apim-request-id:
      - 21b2172f-077f-4c98-b910-386961acacc7
      azureml-model-session:
      - d056-20250701210615
      cmp-upstream-response-duration:
      - '3489'
      x-accel-buffering:
      - 'no'
      x-content-type-options:
      - nosniff
      x-ms-deployment-name:
      - gpt-4.1
      x-ms-rai-invoked:
      - 'true'
      x-ms-region:
      - Sweden Central
      x-ratelimit-limit-requests:
      - '1006'
      x-ratelimit-limit-tokens:
      - '1006000'
      x-ratelimit-remaining-requests:
      - '1002'
      x-ratelimit-remaining-tokens:
      - '982037'
      x-request-id:
      - a2bb50e6-7fd9-443d-8b21-25895b59f800
    status:
      code: 200
      message: OK
- request:
    body: '{"max_completion_tokens": 8192, "messages": [{"content": "You are an AI
      assistant that generates test code for given requirements.", "role": "system"},
      {"content": "\nBased on the following requirements, references, and code, generate
      one test case per given requirement that exercises it.\n\nTest framework reference:\n##
      Test Case Format\nThe format of a test case is as follows:\n{\n    \"test_name\":
      <some descriptive test name>,\n    \"test_description\": <more details about
      the test>\n    \"requirement_id\": <requirement being tested by this test> (optional)\n    \"unit_name\":
      <unit_name>,\n    \"subprogram_name\": <subprogram_name>,\n    \"input_values\":
      [\n        { \"identifier\": <identifier>, \"value\": <value> },\n        ...\n    ],\n    \"expected_values\":
      [\n        { \"identifier\": <identifier>, \"value\": <value> },\n        ...\n    ]\n}\n\n###
      Identifier and Value Syntax\nThe following sections describe the syntax for
      specifying the `identifier` and `value` fields in the test case format. `unit_name`
      and `subprogram_name` refer to file names of C/C++ files (without extension)
      and function names in these files respectively (to refer to methods in classes
      use `<class name>::<method name>`). It is only possible to include identifiers
      from different units and other subprograms if they are called/used in the subprogram
      being tested.\n\n#### Numeric Types\n- Assign the number directly.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.parameter\", \"value\": \"42\" }\n    { \"identifier\":
      \"unit.subprogram.parameter\", \"value\": \"84\" }\n\n#### Structure Types\n-
      Use the standard C syntax to refer to fields within structures.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.struct_param.field\", \"value\": \"CAESAR\"
      }\n    { \"identifier\": \"unit.subprogram.struct_param.field\", \"value\":
      \"STEAK\" }\n\n#### Enumeration Types\n- Use the enumeral value directly.\n  -
      Example:\n    { \"identifier\": \"unit.subprogram.enum_param\", \"value\": \"ENUM_VALUE\"
      }\n\n#### Character and String Types\n- Use standard C delimiters for characters
      and strings.\n  - Example:\n    { \"identifier\": \"unit.subprogram.char_param\",
      \"value\": \"''a''\" }\n    { \"identifier\": \"unit.subprogram.string_param\",
      \"value\": \"\\\"Hello, World\\\"\" }\n- Treat strings as atomic values to set.
      Do not attempt to treat them as a char array, i.e., do not malloc or attempt
      to access chars at individual indices.\n\n#### Pointer and Array Types\n- For
      constrained arrays, specify the index and value.\n  - Example:\n    { \"identifier\":
      \"unit.subprogram.array_param[2]\", \"value\": \"42\" }\n- For unconstrained
      arrays, use `<<malloc [amount of slots to allocate as integer]>>` to allocate
      memory.\n  - Example:\n    { \"identifier\": \"unit.subprogram.array_param\",
      \"value\": \"<<malloc 2>>\" }\n    { \"identifier\": \"unit.subprogram.array_param[1]\",
      \"value\": \"3\" }\n- For pointers, use index 0 to access it (generally pointers
      and unconstrained arrays are the same after all)\n  - Example:\n    { \"identifier\":
      \"unit.subprogram.ptr_param[0]\", \"value\": \"12\" }\n- If you want to make
      something null then use `<<null>>`.\n  - Example:\n    { \"identifier\": \"unit.subprogram.pointer_param\",
      \"value\": \"<<null>>\" }\n    or\n    { \"identifier\": \"unit.subprogram.array_param\",
      \"value\": \"<<null>>\" }\n\n#### Function Return Parameters\n- Use the keyword
      `return` for function return values.\n  - Example:\n    { \"identifier\": \"unit.subprogram.return\",
      \"value\": \"23.0\" }\n\n#### Global Objects\n- Use the syntax `UNIT.<<GLOBAL>>.OBJECT`
      to set values for global objects.\n  - Example:\n    { \"identifier\": \"unit.<<GLOBAL>>.global_object.field\",
      \"value\": \"VALUE\" }\n- Note: `UNIT.OBJECT` is NEVER valid syntax\n\n#####
      Classes\n- To set and expect values of methods in a class (unlike standalone
      subprograms), it is necessary to first instantiate a base object using a constructor\n-
      Use the syntax `UNIT.<<GLOBAL>>.(cl).CLASS_NAME.SUBCLASS_NAME.<<constructor>>.<<call>>`
      to call the constructor of `SUBCLASS` to instantiate a `CLASS` object\n  - Example:\n    {
      \"identifier\": \"unit.<<GLOBAL>>.(cl).class_name.class_name.<<constructor>>.<<call>>\",
      \"value\": \"0\" }\n  - Note: The value in this case is irrelevant and always
      set to 0.\n- To set and expect member variables of a constructed object use
      the syntax `UNIT.<<GLOBAL>>.(cl).CLASS_NAME.SUBCLASS_NAME.MEMBER_NAME`\n  -
      Example:\n    { \"identifier\": \"unit.<<GLOBAL>>.(cl).class_name.class_name.member\",
      \"value\": \"test\" }\n  - Note: If the member is a structured entity like a
      struct or a class instance you can access the subfields like described in the
      `Structure Types` section.\n- To set and expect arguments and return values
      of methods in a class use the name do so like you would for regular subprograms
      except that you prefix the name with the class name and `::`\n  - Example:\n    {
      \"identifier\": \"unit.class_name::member_method.parameter\", \"value\": \"2\"
      }\n  - Note: If you use this ALWAYS first call the class constructor!\n\n####
      Range of Values for Input Data\n- Use range expressions to test a range of values.\n  -
      Example:\n    { \"identifier\": \"unit.subprogram.parameter\", \"value\": \"vary
      from: 0.0 to: 90.0 by: 0.1\" }\n\n#### Range of Values for Expected Results\n-
      Use the syntax `<min> .. <max>` for expected value ranges.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.parameter\", \"value\": \"257.1 .. 259.9\"
      }\n\n#### List of Values\n- Use a comma-separated list for multiple values.\n  -
      Example:\n    { \"identifier\": \"unit.subprogram.parameter\", \"value\": \"1,2,4\"
      }\n- Use parentheses for repeated values.\n  - Example:\n    { \"identifier\":
      \"unit.subprogram.parameter\", \"value\": \"1,(4)2,4\" }\n- Note: This is used
      in case something needs to be set multiple times (like for a stub return) during
      one call, NOT to specify values in an array. To do so, use the regular index
      syntax as outlined above instead.\n\n#### Working with Overloaded Subprograms\n-
      Append the parameter type list to the subprogram name.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram(int).parameter\", \"value\": \"3\" }\n    {
      \"identifier\": \"unit.subprogram(char).parameter\", \"value\": \"''d''\" }\n\n####
      Boolean Values\n- Use `1` for `true` and `0` for `false`.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.boolean_param\", \"value\": \"1\" }\n    {
      \"identifier\": \"unit.subprogram.boolean_param\", \"value\": \"0\" }\n\n####
      Accessing Subprograms Outside the Unit\n- Use `uut_prototype_stubs` as the unit
      for subprograms defined outside of the unit of the test case.\n  - Example:\n    {
      \"identifier\": \"uut_prototype_stubs.name_of_external_subprogram.parameter\",
      \"value\": \"42\" }\n\n#### Emulating stubbed pointer manipulating functions\n-
      Normally it is easy to emulate a stubbed function returning some value (by setting
      the return value of the stubbed function)\n- This is not possible if the stubbed
      function works with pointers as only values can be specified (so only ever the
      contents of a pointer), e.g., functions like memcpy\n- Therefore, in these cases
      you can emulate the stubbed function setting the contents of the pointer using
      <<pointer value_to_set>>\n  - For example assume we have a pointer input variable
      *float x that is modified by a stubbed called to foo(*float pointer_to_modify),
      i.e., foo(x). Then you can change the value, i.e., *x to 10 like so:\n    {
      \"identifier\": \"uut_prototype_stubs.foo.pointer_to_modify\", \"value\": \"<<pointer
      10>>\" }\n  - The other input values of the function of course do not need to
      be specified explicitly (unless you also want to see the values of those input
      pointers)\n- You can only set one variable like this per test case due to technical
      reasons so choose wisely (if you use this feature)\n\n#### Emulating multiple
      function calls\n- Use the multiple value syntax, one value will be read everytime
      the stubbed function is called\n  - Example (foo is called twice, and should
      return 2 the first time and 3 the second):\n    { \"identifier\": \"uut_prototype_stubs.foo.return\",
      \"value\": \"2,3\" }\n\n## Test Case Execution\n1. The test framework will call
      the specified subprogram/function\n2. When a value of a variable would be read,
      if it is specified as a test value, it is set to that value instead\n3. After
      the subprogram finishes, the expected values are checked against the actual
      values at that point\n\nAll tests are executed in isolation. The execution of
      one test does not influence the execution of others.\n\n### Stubbing behaviour\n-
      All function calls from external files, i.e, those referenced with `uut_prototype_stubs`
      are stubbed automatically and do not implement any behaviour. Setting their
      input values has no effect on their output values (instead default values are
      output unless you specify values for them).\n- If any of the parameters or return
      value of a called function (which is not automatically stubbed as outlined above)
      are set or expected to be some value using an identifier, the function will
      be stubbed during execution and not implement any behaviour. In this case it
      is forbidden to also expect the return value to equal something (it won''t as
      the function will be stubbed).\n  - If none are set or expected the function
      will execute as normal\n\n### Default identifier values and initialization\n-
      In general any value not set (input of course), will fall back to a default
      value. However this should be avoided to prevent undefined behaviour. This means
      all input variables (and outputs of stubbed values) should be exhaustively described.\n-
      Do not set an identifier multiple times, it just results in overriding of the
      previous value\n- To access methods of a class and set values it is imperative
      to first instantiate the class using a constructor. For all classes a default
      object is ready to be initialized if needed using the respective constructor.\n-
      Similarly, arrays or pointers should always be allocated\n\n## Examples\n\nLet''s
      consider a more complex C++ code snippet in a file named `data_processor.cpp`:\n\n```cpp\n//
      File: data_processor.cpp\n// Unit: data_processor\n\ntypedef struct {\n    int
      id;\n    float value;\n    char status;\n} DataRecord;\n\ntypedef enum {\n    MODE_NORMAL
      = 0,\n    MODE_DEBUG = 1,\n    MODE_ERROR = 2\n} ProcessingMode;\n\n// External
      function declarations\nextern int validate_record(DataRecord* record);\nextern
      void log_error(const char* message);\nextern DataRecord* allocate_buffer(int
      size);\n\nProcessingMode current_mode = MODE_NORMAL;\n\nint process_data_array(DataRecord*
      input_array, int array_size, DataRecord** output_array) {\n    if (input_array
      == NULL || array_size <= 0) {\n        if (current_mode == MODE_DEBUG) {\n            log_error(\"Invalid
      input parameters\");\n        }\n        return -1;\n    }\n    \n    // Allocate
      output buffer\n    *output_array = allocate_buffer(array_size);\n    if (*output_array
      == NULL) {\n        log_error(\"Memory allocation failed\");\n        return
      -2;\n    }\n    \n    int processed_count = 0;\n    for (int i = 0; i < array_size;
      i++) {\n        // Validate each record using external function\n        int
      validation_result = validate_record(&input_array[i]);\n        \n        if
      (validation_result > 0) {\n            // Copy valid record to output with modified
      value\n            (*output_array)[processed_count].id = input_array[i].id;\n            (*output_array)[processed_count].value
      = input_array[i].value * 1.5f;\n            (*output_array)[processed_count].status
      = ''V''; // Valid\n            processed_count++;\n        } else if (current_mode
      == MODE_ERROR) {\n            // In error mode, stop processing on first invalid
      record\n            log_error(\"Invalid record encountered in error mode\");\n            return
      processed_count;\n        }\n        // In normal mode, skip invalid records
      and continue\n    }\n    \n    return processed_count;\n}\n```\n\n### Example
      1: Testing Null Input Handling with Branching\n\n**Requirement REQ-DP-001:**
      The `process_data_array` function shall return -1 when input_array is NULL and
      log an error message if in DEBUG mode.\n\n```json\n{\n  \"test_name\": \"Test_Null_Input_Debug_Mode\",\n  \"test_description\":
      \"Tests process_data_array with NULL input in DEBUG mode to ensure it returns
      -1 and calls log_error.\",\n  \"requirement_id\": \"REQ-DP-001\",\n  \"unit_name\":
      \"data_processor\",\n  \"subprogram_name\": \"process_data_array\",\n  \"input_values\":
      [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\", \"value\":
      \"MODE_DEBUG\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<null>>\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"5\" },\n  ],\n  \"expected_values\": [\n    { \"identifier\": \"uut_prototype_stubs.log_error.message\",
      \"value\": \"\\\"Invalid input parameters\\\"\" },\n    { \"identifier\": \"data_processor.process_data_array.return\",
      \"value\": \"-1\" }\n  ]\n}\n```\n\n### Example 2: Testing Memory Allocation
      with Stubbing\n\n**Requirement REQ-DP-002:** The `process_data_array` function
      shall return -2 and log an error when memory allocation fails.\n\n```json\n{\n  \"test_name\":
      \"Test_Memory_Allocation_Failure\",\n  \"test_description\": \"Tests process_data_array
      when allocate_buffer returns NULL to ensure proper error handling.\",\n  \"requirement_id\":
      \"REQ-DP-002\",\n  \"unit_name\": \"data_processor\",\n  \"subprogram_name\":
      \"process_data_array\",\n  \"input_values\": [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\",
      \"value\": \"MODE_NORMAL\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<malloc 1>>\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].id\",
      \"value\": \"1\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].value\",
      \"value\": \"10.5\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].status\",
      \"value\": \"''A''\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"2\" },\n    { \"identifier\": \"uut_prototype_stubs.allocate_buffer.return\",
      \"value\": \"<<null>>\" },\n  ],\n  \"expected_values\": [\n    { \"identifier\":
      \"uut_prototype_stubs.log_error.message\", \"value\": \"\\\"Memory allocation
      failed\\\"\" },\n    { \"identifier\": \"data_processor.process_data_array.return\",
      \"value\": \"-2\" }\n  ]\n}\n```\n\n### Example 3: Testing Complex Processing
      with Multiple Stubs\n\n**Requirement REQ-DP-003:** The `process_data_array`
      function shall process valid records by multiplying their values by 1.5 and
      setting status to ''V''.\n\n```json\n{\n  \"test_name\": \"Test_Valid_Record_Processing\",\n  \"test_description\":
      \"Tests process_data_array with mixed valid/invalid records to ensure proper
      processing and output.\",\n  \"requirement_id\": \"REQ-DP-003\",\n  \"unit_name\":
      \"data_processor\",\n  \"subprogram_name\": \"process_data_array\",\n  \"input_values\":
      [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\", \"value\":
      \"MODE_NORMAL\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].id\",
      \"value\": \"100\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].value\",
      \"value\": \"20.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].status\",
      \"value\": \"''A''\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].id\",
      \"value\": \"200\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].status\",
      \"value\": \"''B''\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[2].id\",
      \"value\": \"300\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[2].value\",
      \"value\": \"40.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[2].status\",
      \"value\": \"''C''\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"3\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0]\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"uut_prototype_stubs.validate_record.return\",
      \"value\": \"1,0,1\" }\n  ],\n  \"expected_values\": [\n    { \"identifier\":
      \"data_processor.process_data_array.return\", \"value\": \"2\" },\n    { \"identifier\":
      \"data_processor.process_data_array.output_array[0][0].id\", \"value\": \"100\"
      },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].status\",
      \"value\": \"''V''\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][1].id\",
      \"value\": \"300\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][1].value\",
      \"value\": \"60.0\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][1].status\",
      \"value\": \"''V''\" }\n  ]\n}\n```\n\n### Example 4: Testing Error Mode with
      Early Termination\n\n**Requirement REQ-DP-004:** The `process_data_array` function
      shall stop processing and return the current count when an invalid record is
      encountered in ERROR mode.\n\n```json\n{\n  \"test_name\": \"Test_Error_Mode_Early_Termination\",\n  \"test_description\":
      \"Tests process_data_array in ERROR mode to ensure it stops processing on first
      invalid record.\",\n  \"requirement_id\": \"REQ-DP-004\",\n  \"unit_name\":
      \"data_processor\",\n  \"subprogram_name\": \"process_data_array\",\n  \"input_values\":
      [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\", \"value\":
      \"MODE_ERROR\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].id\",
      \"value\": \"100\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].value\",
      \"value\": \"20.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].id\",
      \"value\": \"200\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"3\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0]\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"uut_prototype_stubs.allocate_buffer.size\",
      \"value\": \"3\" },\n    { \"identifier\": \"uut_prototype_stubs.validate_record.return\",
      \"value\": \"1,-1\" },\n  ],\n  \"expected_values\": [\n    { \"identifier\":
      \"uut_prototype_stubs.log_error.message\", \"value\": \"\\\"Invalid record encountered
      in error mode\\\"\" },\n    { \"identifier\": \"data_processor.process_data_array.return\",
      \"value\": \"1\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].id\",
      \"value\": \"100\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].status\",
      \"value\": \"''V''\" }\n  ]\n}\n```\n\nRelevant Code:\n```cpp\n// Unit: manager\n\n//
      Definitions of types, called functions and data structures:\n\ntypedef char
      name_type[32];\n\nstatic name_type WaitingList[10];\n\nstatic unsigned int WaitingListSize
      = 0;\n\n// Code for Add_Party_To_Waiting_List:\nvoid Add_Party_To_Waiting_List(char*
      Name)\n{\n  int i = 0;\n  if(WaitingListSize > 9)\n    WaitingListSize = 0;\n\n  while(Name
      && *Name) {\n    WaitingList[WaitingListSize][i++] = *Name;\n    Name++;\n  }\n  WaitingList[WaitingListSize++][i]
      = 0;\n}\n```\n\nExample Test Cases:\n```json\n[\n  {\n    \"test_name\": \"BASIS-PATH-003\",\n    \"test_description\":
      \"This is an automatically generated test case.\\nTest Path 3\\n(1) if (WaitingListSize
      > (9)) ==> TRUE\\n(2) while (Name && *Name) ==> FALSE\\nTest Case Generation
      Notes:\",\n    \"unit_name\": \"manager\",\n    \"subprogram_name\": \"Add_Party_To_Waiting_List\",\n    \"input_values\":
      [\n      {\n        \"identifier\": \"manager.<<GLOBAL>>.WaitingListSize\",\n        \"value\":
      \"<<MAX>>\"\n      },\n      {\n        \"identifier\": \"manager.Add_Party_To_Waiting_List.Name\",\n        \"value\":
      \"<<null>>\"\n      }\n    ],\n    \"expected_values\": [],\n    \"requirement_id\":
      null\n  }\n]\n```\n\nRequirements:\n1. FR23.1: The system will support a waiting
      list of up to 10 parties.\n2. FR24.1: The system will provide a means of adding
      a party to the waiting list, with the party specified by name.\n\nDetailed task
      description:\nBased on the above requirements and code, generate unit tests
      that exercise all requirements.\nMake sure the generated test cases clearly
      test the provided requirements.\n\nSolve the problem using the following approach:\nFor
      each requirement in order...\n    1. Come up with descriptive (unique) name
      for the test case and describe in natural language how this test exercises the
      requirement\n    2. Provide the name of the unit being tested (base file name
      without extension) and the name of the subprogram being tested (function name)\n    3.
      Provide the input and expected values by providing the correct identifier and
      value in the syntax outlined above.\n\nYou are allowed to use the following
      identifiers in your test case:\n- manager.<<GLOBAL>>.WaitingListSize\n- manager.<<GLOBAL>>.WaitingList[i]
      (for all: i in 0..9)\n- manager.Add_Party_To_Waiting_List.Name\n\nYou MUST set
      an input value for all input to the functions, used globals and called stubs.\nIf
      you do not ensure this, it can happen that your test does not cover the correct
      path corresponding to the requirement.\nAn expected value is not required for
      all identifiers. Only for those relevant to the requirement.\n\n\nNotes:\n-
      You are NOT allowed to invent any syntax that is not specified in the syntax
      reference. Stick to the syntax provided.\n- You are NOT allowed to invent any
      units or functions that are not present in the provided code.\n- This is a highly
      critical task, please ensure that the test cases are correct and complete and
      do not contain any logical or syntactical errors.\n- Test cases are independent
      of each other, i.e., they should not rely on one being run before the other
      (or environment being modified by one).\n- Generate exactly one test case per
      requirement.\n- In case the requirement and the code differ, the requirement
      is what you should test, i.e., it is the source of truth.\n- It might be that
      some of the provided code context and identifiers are incorrect. Use the most
      obviously correct parts of both and ignore the rest.\n\nReturn your answer in
      the following format:\n```json\n{\n    \"test_case_for_requirement_1\": <test
      case testing the first requirement in the list>,\n    \"test_case_for_requirement_2\":
      <test case testing the second requirement in the list>,\n    ...\n}\n```\n",
      "role": "user"}], "model": "gpt-4.1", "response_format": {"json_schema": {"name":
      "TestGenerationResult", "schema": {"$defs": {"ExpectedValueMapping": {"additionalProperties":
      false, "properties": {"identifier": {"$ref": "#/$defs/Identifier"}, "value":
      {"title": "Value", "type": "string"}}, "required": ["identifier", "value"],
      "title": "ExpectedValueMapping", "type": "object"}, "Identifier": {"enum": ["manager.<<GLOBAL>>.WaitingListSize",
      "manager.<<GLOBAL>>.WaitingList[0]", "manager.<<GLOBAL>>.WaitingList[1]", "manager.<<GLOBAL>>.WaitingList[2]",
      "manager.<<GLOBAL>>.WaitingList[3]", "manager.<<GLOBAL>>.WaitingList[4]", "manager.<<GLOBAL>>.WaitingList[5]",
      "manager.<<GLOBAL>>.WaitingList[6]", "manager.<<GLOBAL>>.WaitingList[7]", "manager.<<GLOBAL>>.WaitingList[8]",
      "manager.<<GLOBAL>>.WaitingList[9]", "manager.Add_Party_To_Waiting_List.Name"],
      "title": "Identifier", "type": "string"}, "InputValueMapping": {"additionalProperties":
      false, "properties": {"identifier": {"$ref": "#/$defs/Identifier"}, "value":
      {"title": "Value", "type": "string"}}, "required": ["identifier", "value"],
      "title": "InputValueMapping", "type": "object"}, "TestCase": {"additionalProperties":
      false, "properties": {"expected_values": {"items": {"$ref": "#/$defs/ExpectedValueMapping"},
      "title": "Expected Values", "type": "array"}, "input_values": {"items": {"$ref":
      "#/$defs/InputValueMapping"}, "title": "Input Values", "type": "array"}, "requirement_id":
      {"title": "Requirement Id", "type": "string"}, "subprogram_name": {"title":
      "Subprogram Name", "type": "string"}, "test_description": {"title": "Test Description",
      "type": "string"}, "test_name": {"title": "Test Name", "type": "string"}, "unit_name":
      {"title": "Unit Name", "type": "string"}}, "required": ["test_name", "test_description",
      "requirement_id", "unit_name", "subprogram_name", "input_values", "expected_values"],
      "title": "TestCase", "type": "object"}}, "additionalProperties": false, "properties":
      {"test_case_for_requirement": {"$ref": "#/$defs/TestCase"}}, "required": ["test_case_for_requirement",
      "test_case_for_requirement"], "title": "TestGenerationResult", "type": "object"},
      "strict": true}, "type": "json_schema"}, "seed": 42, "stream": false, "temperature":
      0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      api-key:
      - REDACTED
      authorization:
      - REDACTED
      connection:
      - keep-alive
      content-length:
      - '25775'
      content-type:
      - application/json
      host:
      - REDACTED
      user-agent:
      - AsyncAzureOpenAI/Python 1.58.1
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-helper-method:
      - beta.chat.completions.parse
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.58.1
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.12
    method: POST
    uri: https://rg-rds-play-openai-pes-ppt.openai.azure.com/openai/deployments/gpt-4.1/chat/completions?api-version=2024-12-01-preview
  response:
    body:
      string: '{"choices":[{"content_filter_results":{"hate":{"filtered":false,"severity":"safe"},"protected_material_code":{"filtered":false,"detected":false},"protected_material_text":{"filtered":false,"detected":false},"self_harm":{"filtered":false,"severity":"safe"},"sexual":{"filtered":false,"severity":"safe"},"violence":{"filtered":false,"severity":"safe"}},"finish_reason":"stop","index":0,"logprobs":null,"message":{"annotations":[],"content":"{\n  \"test_case_for_requirement_1\":
        {\n    \"test_name\": \"Test_Waiting_List_Maximum_Capacity\",\n    \"test_description\":
        \"Verifies that the waiting list supports up to 10 parties by adding a party
        when the list is at its maximum capacity (index 9), ensuring the 10th slot
        is used and the size does not exceed 10.\",\n    \"requirement_id\": \"FR23.1\",\n    \"unit_name\":
        \"manager\",\n    \"subprogram_name\": \"Add_Party_To_Waiting_List\",\n    \"input_values\":
        [\n      { \"identifier\": \"manager.\u003c\u003cGLOBAL\u003e\u003e.WaitingListSize\",
        \"value\": \"9\" },\n      { \"identifier\": \"manager.Add_Party_To_Waiting_List.Name\",
        \"value\": \"\\\"PartyTen\\\"\" }\n    ],\n    \"expected_values\": [\n      {
        \"identifier\": \"manager.\u003c\u003cGLOBAL\u003e\u003e.WaitingList[9]\",
        \"value\": \"\\\"PartyTen\\\"\" },\n      { \"identifier\": \"manager.\u003c\u003cGLOBAL\u003e\u003e.WaitingListSize\",
        \"value\": \"10\" }\n    ]\n  },\n  \"test_case_for_requirement_2\": {\n    \"test_name\":
        \"Test_Add_Party_To_Waiting_List_By_Name\",\n    \"test_description\": \"Verifies
        that a party can be added to the waiting list by specifying its name, and
        that the name is correctly stored in the next available slot.\",\n    \"requirement_id\":
        \"FR24.1\",\n    \"unit_name\": \"manager\",\n    \"subprogram_name\": \"Add_Party_To_Waiting_List\",\n    \"input_values\":
        [\n      { \"identifier\": \"manager.\u003c\u003cGLOBAL\u003e\u003e.WaitingListSize\",
        \"value\": \"0\" },\n      { \"identifier\": \"manager.Add_Party_To_Waiting_List.Name\",
        \"value\": \"\\\"Smith\\\"\" }\n    ],\n    \"expected_values\": [\n      {
        \"identifier\": \"manager.\u003c\u003cGLOBAL\u003e\u003e.WaitingList[0]\",
        \"value\": \"\\\"Smith\\\"\" },\n      { \"identifier\": \"manager.\u003c\u003cGLOBAL\u003e\u003e.WaitingListSize\",
        \"value\": \"1\" }\n    ]\n  }\n}","refusal":null,"role":"assistant"}}],"created":1752564162,"id":"chatcmpl-BtUHqDksDC5coT6D9UEyhPwjNWTHt","model":"gpt-4.1-2025-04-14","object":"chat.completion","prompt_filter_results":[{"prompt_index":0,"content_filter_results":{"hate":{"filtered":false,"severity":"safe"},"jailbreak":{"filtered":false,"detected":false},"self_harm":{"filtered":false,"severity":"safe"},"sexual":{"filtered":false,"severity":"safe"},"violence":{"filtered":false,"severity":"safe"}}}],"system_fingerprint":"fp_07e970ab25","usage":{"completion_tokens":444,"completion_tokens_details":{"accepted_prediction_tokens":0,"audio_tokens":0,"reasoning_tokens":0,"rejected_prediction_tokens":0},"prompt_tokens":5842,"prompt_tokens_details":{"audio_tokens":0,"cached_tokens":0},"total_tokens":6286}}

        '
    headers:
      Content-Length:
      - '3074'
      Content-Type:
      - application/json
      Date:
      - Tue, 15 Jul 2025 07:22:45 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      apim-request-id:
      - 571aab90-093f-436b-8ef7-d513f4c9bff9
      azureml-model-session:
      - d082-20250625183649
      cmp-upstream-response-duration:
      - '4529'
      x-accel-buffering:
      - 'no'
      x-content-type-options:
      - nosniff
      x-ms-deployment-name:
      - gpt-4.1
      x-ms-rai-invoked:
      - 'true'
      x-ms-region:
      - Sweden Central
      x-ratelimit-limit-requests:
      - '1006'
      x-ratelimit-limit-tokens:
      - '1006000'
      x-ratelimit-remaining-requests:
      - '996'
      x-ratelimit-remaining-tokens:
      - '945847'
      x-request-id:
      - 91a48d8d-a057-4605-a5d5-51f5d2b63c0b
    status:
      code: 200
      message: OK
- request:
    body: '{"max_completion_tokens": 8192, "messages": [{"content": "You are an AI
      assistant that generates test code for given requirements.", "role": "system"},
      {"content": "\nBased on the following requirements, references, and code, generate
      one test case per given requirement that exercises it.\n\nTest framework reference:\n##
      Test Case Format\nThe format of a test case is as follows:\n{\n    \"test_name\":
      <some descriptive test name>,\n    \"test_description\": <more details about
      the test>\n    \"requirement_id\": <requirement being tested by this test> (optional)\n    \"unit_name\":
      <unit_name>,\n    \"subprogram_name\": <subprogram_name>,\n    \"input_values\":
      [\n        { \"identifier\": <identifier>, \"value\": <value> },\n        ...\n    ],\n    \"expected_values\":
      [\n        { \"identifier\": <identifier>, \"value\": <value> },\n        ...\n    ]\n}\n\n###
      Identifier and Value Syntax\nThe following sections describe the syntax for
      specifying the `identifier` and `value` fields in the test case format. `unit_name`
      and `subprogram_name` refer to file names of C/C++ files (without extension)
      and function names in these files respectively (to refer to methods in classes
      use `<class name>::<method name>`). It is only possible to include identifiers
      from different units and other subprograms if they are called/used in the subprogram
      being tested.\n\n#### Numeric Types\n- Assign the number directly.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.parameter\", \"value\": \"42\" }\n    { \"identifier\":
      \"unit.subprogram.parameter\", \"value\": \"84\" }\n\n#### Structure Types\n-
      Use the standard C syntax to refer to fields within structures.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.struct_param.field\", \"value\": \"CAESAR\"
      }\n    { \"identifier\": \"unit.subprogram.struct_param.field\", \"value\":
      \"STEAK\" }\n\n#### Enumeration Types\n- Use the enumeral value directly.\n  -
      Example:\n    { \"identifier\": \"unit.subprogram.enum_param\", \"value\": \"ENUM_VALUE\"
      }\n\n#### Character and String Types\n- Use standard C delimiters for characters
      and strings.\n  - Example:\n    { \"identifier\": \"unit.subprogram.char_param\",
      \"value\": \"''a''\" }\n    { \"identifier\": \"unit.subprogram.string_param\",
      \"value\": \"\\\"Hello, World\\\"\" }\n- Treat strings as atomic values to set.
      Do not attempt to treat them as a char array, i.e., do not malloc or attempt
      to access chars at individual indices.\n\n#### Pointer and Array Types\n- For
      constrained arrays, specify the index and value.\n  - Example:\n    { \"identifier\":
      \"unit.subprogram.array_param[2]\", \"value\": \"42\" }\n- For unconstrained
      arrays, use `<<malloc [amount of slots to allocate as integer]>>` to allocate
      memory.\n  - Example:\n    { \"identifier\": \"unit.subprogram.array_param\",
      \"value\": \"<<malloc 2>>\" }\n    { \"identifier\": \"unit.subprogram.array_param[1]\",
      \"value\": \"3\" }\n- For pointers, use index 0 to access it (generally pointers
      and unconstrained arrays are the same after all)\n  - Example:\n    { \"identifier\":
      \"unit.subprogram.ptr_param[0]\", \"value\": \"12\" }\n- If you want to make
      something null then use `<<null>>`.\n  - Example:\n    { \"identifier\": \"unit.subprogram.pointer_param\",
      \"value\": \"<<null>>\" }\n    or\n    { \"identifier\": \"unit.subprogram.array_param\",
      \"value\": \"<<null>>\" }\n\n#### Function Return Parameters\n- Use the keyword
      `return` for function return values.\n  - Example:\n    { \"identifier\": \"unit.subprogram.return\",
      \"value\": \"23.0\" }\n\n#### Global Objects\n- Use the syntax `UNIT.<<GLOBAL>>.OBJECT`
      to set values for global objects.\n  - Example:\n    { \"identifier\": \"unit.<<GLOBAL>>.global_object.field\",
      \"value\": \"VALUE\" }\n- Note: `UNIT.OBJECT` is NEVER valid syntax\n\n#####
      Classes\n- To set and expect values of methods in a class (unlike standalone
      subprograms), it is necessary to first instantiate a base object using a constructor\n-
      Use the syntax `UNIT.<<GLOBAL>>.(cl).CLASS_NAME.SUBCLASS_NAME.<<constructor>>.<<call>>`
      to call the constructor of `SUBCLASS` to instantiate a `CLASS` object\n  - Example:\n    {
      \"identifier\": \"unit.<<GLOBAL>>.(cl).class_name.class_name.<<constructor>>.<<call>>\",
      \"value\": \"0\" }\n  - Note: The value in this case is irrelevant and always
      set to 0.\n- To set and expect member variables of a constructed object use
      the syntax `UNIT.<<GLOBAL>>.(cl).CLASS_NAME.SUBCLASS_NAME.MEMBER_NAME`\n  -
      Example:\n    { \"identifier\": \"unit.<<GLOBAL>>.(cl).class_name.class_name.member\",
      \"value\": \"test\" }\n  - Note: If the member is a structured entity like a
      struct or a class instance you can access the subfields like described in the
      `Structure Types` section.\n- To set and expect arguments and return values
      of methods in a class use the name do so like you would for regular subprograms
      except that you prefix the name with the class name and `::`\n  - Example:\n    {
      \"identifier\": \"unit.class_name::member_method.parameter\", \"value\": \"2\"
      }\n  - Note: If you use this ALWAYS first call the class constructor!\n\n####
      Range of Values for Input Data\n- Use range expressions to test a range of values.\n  -
      Example:\n    { \"identifier\": \"unit.subprogram.parameter\", \"value\": \"vary
      from: 0.0 to: 90.0 by: 0.1\" }\n\n#### Range of Values for Expected Results\n-
      Use the syntax `<min> .. <max>` for expected value ranges.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.parameter\", \"value\": \"257.1 .. 259.9\"
      }\n\n#### List of Values\n- Use a comma-separated list for multiple values.\n  -
      Example:\n    { \"identifier\": \"unit.subprogram.parameter\", \"value\": \"1,2,4\"
      }\n- Use parentheses for repeated values.\n  - Example:\n    { \"identifier\":
      \"unit.subprogram.parameter\", \"value\": \"1,(4)2,4\" }\n- Note: This is used
      in case something needs to be set multiple times (like for a stub return) during
      one call, NOT to specify values in an array. To do so, use the regular index
      syntax as outlined above instead.\n\n#### Working with Overloaded Subprograms\n-
      Append the parameter type list to the subprogram name.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram(int).parameter\", \"value\": \"3\" }\n    {
      \"identifier\": \"unit.subprogram(char).parameter\", \"value\": \"''d''\" }\n\n####
      Boolean Values\n- Use `1` for `true` and `0` for `false`.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.boolean_param\", \"value\": \"1\" }\n    {
      \"identifier\": \"unit.subprogram.boolean_param\", \"value\": \"0\" }\n\n####
      Accessing Subprograms Outside the Unit\n- Use `uut_prototype_stubs` as the unit
      for subprograms defined outside of the unit of the test case.\n  - Example:\n    {
      \"identifier\": \"uut_prototype_stubs.name_of_external_subprogram.parameter\",
      \"value\": \"42\" }\n\n#### Emulating stubbed pointer manipulating functions\n-
      Normally it is easy to emulate a stubbed function returning some value (by setting
      the return value of the stubbed function)\n- This is not possible if the stubbed
      function works with pointers as only values can be specified (so only ever the
      contents of a pointer), e.g., functions like memcpy\n- Therefore, in these cases
      you can emulate the stubbed function setting the contents of the pointer using
      <<pointer value_to_set>>\n  - For example assume we have a pointer input variable
      *float x that is modified by a stubbed called to foo(*float pointer_to_modify),
      i.e., foo(x). Then you can change the value, i.e., *x to 10 like so:\n    {
      \"identifier\": \"uut_prototype_stubs.foo.pointer_to_modify\", \"value\": \"<<pointer
      10>>\" }\n  - The other input values of the function of course do not need to
      be specified explicitly (unless you also want to see the values of those input
      pointers)\n- You can only set one variable like this per test case due to technical
      reasons so choose wisely (if you use this feature)\n\n#### Emulating multiple
      function calls\n- Use the multiple value syntax, one value will be read everytime
      the stubbed function is called\n  - Example (foo is called twice, and should
      return 2 the first time and 3 the second):\n    { \"identifier\": \"uut_prototype_stubs.foo.return\",
      \"value\": \"2,3\" }\n\n## Test Case Execution\n1. The test framework will call
      the specified subprogram/function\n2. When a value of a variable would be read,
      if it is specified as a test value, it is set to that value instead\n3. After
      the subprogram finishes, the expected values are checked against the actual
      values at that point\n\nAll tests are executed in isolation. The execution of
      one test does not influence the execution of others.\n\n### Stubbing behaviour\n-
      All function calls from external files, i.e, those referenced with `uut_prototype_stubs`
      are stubbed automatically and do not implement any behaviour. Setting their
      input values has no effect on their output values (instead default values are
      output unless you specify values for them).\n- If any of the parameters or return
      value of a called function (which is not automatically stubbed as outlined above)
      are set or expected to be some value using an identifier, the function will
      be stubbed during execution and not implement any behaviour. In this case it
      is forbidden to also expect the return value to equal something (it won''t as
      the function will be stubbed).\n  - If none are set or expected the function
      will execute as normal\n\n### Default identifier values and initialization\n-
      In general any value not set (input of course), will fall back to a default
      value. However this should be avoided to prevent undefined behaviour. This means
      all input variables (and outputs of stubbed values) should be exhaustively described.\n-
      Do not set an identifier multiple times, it just results in overriding of the
      previous value\n- To access methods of a class and set values it is imperative
      to first instantiate the class using a constructor. For all classes a default
      object is ready to be initialized if needed using the respective constructor.\n-
      Similarly, arrays or pointers should always be allocated\n\n## Examples\n\nLet''s
      consider a more complex C++ code snippet in a file named `data_processor.cpp`:\n\n```cpp\n//
      File: data_processor.cpp\n// Unit: data_processor\n\ntypedef struct {\n    int
      id;\n    float value;\n    char status;\n} DataRecord;\n\ntypedef enum {\n    MODE_NORMAL
      = 0,\n    MODE_DEBUG = 1,\n    MODE_ERROR = 2\n} ProcessingMode;\n\n// External
      function declarations\nextern int validate_record(DataRecord* record);\nextern
      void log_error(const char* message);\nextern DataRecord* allocate_buffer(int
      size);\n\nProcessingMode current_mode = MODE_NORMAL;\n\nint process_data_array(DataRecord*
      input_array, int array_size, DataRecord** output_array) {\n    if (input_array
      == NULL || array_size <= 0) {\n        if (current_mode == MODE_DEBUG) {\n            log_error(\"Invalid
      input parameters\");\n        }\n        return -1;\n    }\n    \n    // Allocate
      output buffer\n    *output_array = allocate_buffer(array_size);\n    if (*output_array
      == NULL) {\n        log_error(\"Memory allocation failed\");\n        return
      -2;\n    }\n    \n    int processed_count = 0;\n    for (int i = 0; i < array_size;
      i++) {\n        // Validate each record using external function\n        int
      validation_result = validate_record(&input_array[i]);\n        \n        if
      (validation_result > 0) {\n            // Copy valid record to output with modified
      value\n            (*output_array)[processed_count].id = input_array[i].id;\n            (*output_array)[processed_count].value
      = input_array[i].value * 1.5f;\n            (*output_array)[processed_count].status
      = ''V''; // Valid\n            processed_count++;\n        } else if (current_mode
      == MODE_ERROR) {\n            // In error mode, stop processing on first invalid
      record\n            log_error(\"Invalid record encountered in error mode\");\n            return
      processed_count;\n        }\n        // In normal mode, skip invalid records
      and continue\n    }\n    \n    return processed_count;\n}\n```\n\n### Example
      1: Testing Null Input Handling with Branching\n\n**Requirement REQ-DP-001:**
      The `process_data_array` function shall return -1 when input_array is NULL and
      log an error message if in DEBUG mode.\n\n```json\n{\n  \"test_name\": \"Test_Null_Input_Debug_Mode\",\n  \"test_description\":
      \"Tests process_data_array with NULL input in DEBUG mode to ensure it returns
      -1 and calls log_error.\",\n  \"requirement_id\": \"REQ-DP-001\",\n  \"unit_name\":
      \"data_processor\",\n  \"subprogram_name\": \"process_data_array\",\n  \"input_values\":
      [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\", \"value\":
      \"MODE_DEBUG\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<null>>\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"5\" },\n  ],\n  \"expected_values\": [\n    { \"identifier\": \"uut_prototype_stubs.log_error.message\",
      \"value\": \"\\\"Invalid input parameters\\\"\" },\n    { \"identifier\": \"data_processor.process_data_array.return\",
      \"value\": \"-1\" }\n  ]\n}\n```\n\n### Example 2: Testing Memory Allocation
      with Stubbing\n\n**Requirement REQ-DP-002:** The `process_data_array` function
      shall return -2 and log an error when memory allocation fails.\n\n```json\n{\n  \"test_name\":
      \"Test_Memory_Allocation_Failure\",\n  \"test_description\": \"Tests process_data_array
      when allocate_buffer returns NULL to ensure proper error handling.\",\n  \"requirement_id\":
      \"REQ-DP-002\",\n  \"unit_name\": \"data_processor\",\n  \"subprogram_name\":
      \"process_data_array\",\n  \"input_values\": [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\",
      \"value\": \"MODE_NORMAL\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<malloc 1>>\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].id\",
      \"value\": \"1\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].value\",
      \"value\": \"10.5\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].status\",
      \"value\": \"''A''\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"2\" },\n    { \"identifier\": \"uut_prototype_stubs.allocate_buffer.return\",
      \"value\": \"<<null>>\" },\n  ],\n  \"expected_values\": [\n    { \"identifier\":
      \"uut_prototype_stubs.log_error.message\", \"value\": \"\\\"Memory allocation
      failed\\\"\" },\n    { \"identifier\": \"data_processor.process_data_array.return\",
      \"value\": \"-2\" }\n  ]\n}\n```\n\n### Example 3: Testing Complex Processing
      with Multiple Stubs\n\n**Requirement REQ-DP-003:** The `process_data_array`
      function shall process valid records by multiplying their values by 1.5 and
      setting status to ''V''.\n\n```json\n{\n  \"test_name\": \"Test_Valid_Record_Processing\",\n  \"test_description\":
      \"Tests process_data_array with mixed valid/invalid records to ensure proper
      processing and output.\",\n  \"requirement_id\": \"REQ-DP-003\",\n  \"unit_name\":
      \"data_processor\",\n  \"subprogram_name\": \"process_data_array\",\n  \"input_values\":
      [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\", \"value\":
      \"MODE_NORMAL\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].id\",
      \"value\": \"100\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].value\",
      \"value\": \"20.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].status\",
      \"value\": \"''A''\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].id\",
      \"value\": \"200\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].status\",
      \"value\": \"''B''\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[2].id\",
      \"value\": \"300\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[2].value\",
      \"value\": \"40.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[2].status\",
      \"value\": \"''C''\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"3\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0]\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"uut_prototype_stubs.validate_record.return\",
      \"value\": \"1,0,1\" }\n  ],\n  \"expected_values\": [\n    { \"identifier\":
      \"data_processor.process_data_array.return\", \"value\": \"2\" },\n    { \"identifier\":
      \"data_processor.process_data_array.output_array[0][0].id\", \"value\": \"100\"
      },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].status\",
      \"value\": \"''V''\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][1].id\",
      \"value\": \"300\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][1].value\",
      \"value\": \"60.0\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][1].status\",
      \"value\": \"''V''\" }\n  ]\n}\n```\n\n### Example 4: Testing Error Mode with
      Early Termination\n\n**Requirement REQ-DP-004:** The `process_data_array` function
      shall stop processing and return the current count when an invalid record is
      encountered in ERROR mode.\n\n```json\n{\n  \"test_name\": \"Test_Error_Mode_Early_Termination\",\n  \"test_description\":
      \"Tests process_data_array in ERROR mode to ensure it stops processing on first
      invalid record.\",\n  \"requirement_id\": \"REQ-DP-004\",\n  \"unit_name\":
      \"data_processor\",\n  \"subprogram_name\": \"process_data_array\",\n  \"input_values\":
      [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\", \"value\":
      \"MODE_ERROR\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].id\",
      \"value\": \"100\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].value\",
      \"value\": \"20.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].id\",
      \"value\": \"200\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"3\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0]\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"uut_prototype_stubs.allocate_buffer.size\",
      \"value\": \"3\" },\n    { \"identifier\": \"uut_prototype_stubs.validate_record.return\",
      \"value\": \"1,-1\" },\n  ],\n  \"expected_values\": [\n    { \"identifier\":
      \"uut_prototype_stubs.log_error.message\", \"value\": \"\\\"Invalid record encountered
      in error mode\\\"\" },\n    { \"identifier\": \"data_processor.process_data_array.return\",
      \"value\": \"1\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].id\",
      \"value\": \"100\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].status\",
      \"value\": \"''V''\" }\n  ]\n}\n```\n\nRelevant Code:\n```cpp\n// Unit: manager\n\n//
      Definitions of types, called functions and data structures:\n\ntypedef float
      FLOAT;\n\nenum boolean { v_false, v_true };\n\nenum soups { NO_SOUP, ONION,
      CHOWDER };\n\nenum salads { NO_SALAD, CAESAR, GREEN };\n\nenum entrees { NO_ENTREE,
      STEAK, CHICKEN, LOBSTER, PASTA };\n\nenum desserts { NO_DESSERT, CAKE, PIE,
      FRUIT };\n\nenum beverages { NO_BEVERAGE, WINE, BEER, MIXED_DRINK, SODA };\n\nstruct
      order_type\n{\n  enum soups Soup;\n  enum salads Salad;\n  enum entrees Entree;\n  enum
      desserts Dessert;\n  enum beverages Beverage;\n};\n\ntypedef unsigned short
      seat_index_type;\n\ntypedef unsigned short table_index_type;\n\nstruct table_data_type\n{\n  enum
      boolean Is_Occupied;\n  seat_index_type Number_In_Party;\n  char Designator;\n  char
      Wait_Person[10];\n  struct order_type Order[4];\n  FLOAT Check_Total;\n};\n\nstruct
      table_data_type Get_Table_Record(table_index_type Table);\n\n// Code for Get_Check_Total:\nFLOAT
      Get_Check_Total(table_index_type Table)\n{\n  struct table_data_type Table_Data;\n  Table_Data
      = Get_Table_Record(Table);\n  return (Table_Data.Check_Total);\n}\n```\n\nExample
      Test Cases:\n```json\n[\n  {\n    \"test_name\": \"BASIS-PATH-001\",\n    \"test_description\":
      \"No branches in subprogram\",\n    \"unit_name\": \"manager\",\n    \"subprogram_name\":
      \"Get_Check_Total\",\n    \"input_values\": [\n      {\n        \"identifier\":
      \"manager.Get_Check_Total.Table\",\n        \"value\": \"<<MIN>>\"\n      }\n    ],\n    \"expected_values\":
      [],\n    \"requirement_id\": null\n  }\n]\n```\n\nRequirements:\n1. FR22.1:
      The system will provide a way to obtain the check total for a given table.\n\nDetailed
      task description:\nBased on the above requirements and code, generate unit tests
      that exercise all requirements.\nMake sure the generated test cases clearly
      test the provided requirements.\n\nSolve the problem using the following approach:\nFor
      each requirement in order...\n    1. Come up with descriptive (unique) name
      for the test case and describe in natural language how this test exercises the
      requirement\n    2. Provide the name of the unit being tested (base file name
      without extension) and the name of the subprogram being tested (function name)\n    3.
      Provide the input and expected values by providing the correct identifier and
      value in the syntax outlined above.\n\nYou are allowed to use the following
      identifiers in your test case:\n- manager.Get_Check_Total.Table\n- manager.Get_Check_Total.return\n-
      uut_prototype_stubs.Get_Table_Record.Table\n- uut_prototype_stubs.Get_Table_Record.return.Is_Occupied\n-
      uut_prototype_stubs.Get_Table_Record.return.Number_In_Party\n- uut_prototype_stubs.Get_Table_Record.return.Designator\n-
      uut_prototype_stubs.Get_Table_Record.return.Wait_Person\n- uut_prototype_stubs.Get_Table_Record.return.Order[i].Soup
      (for all: i in 0..3)\n- uut_prototype_stubs.Get_Table_Record.return.Order[i].Salad
      (for all: i in 0..3)\n- uut_prototype_stubs.Get_Table_Record.return.Order[i].Entree
      (for all: i in 0..3)\n- uut_prototype_stubs.Get_Table_Record.return.Order[i].Dessert
      (for all: i in 0..3)\n- uut_prototype_stubs.Get_Table_Record.return.Order[i].Beverage
      (for all: i in 0..3)\n- uut_prototype_stubs.Get_Table_Record.return.Check_Total\n\nYou
      MUST set an input value for all input to the functions, used globals and called
      stubs.\nIf you do not ensure this, it can happen that your test does not cover
      the correct path corresponding to the requirement.\nAn expected value is not
      required for all identifiers. Only for those relevant to the requirement.\n\nStubbed-by-default
      called functions (no behaviour is implemented, you can use identifiers to simulate
      a return value) called by Get_Check_Total:\n- Get_Table_Record\n\nNotes:\n-
      You are NOT allowed to invent any syntax that is not specified in the syntax
      reference. Stick to the syntax provided.\n- You are NOT allowed to invent any
      units or functions that are not present in the provided code.\n- This is a highly
      critical task, please ensure that the test cases are correct and complete and
      do not contain any logical or syntactical errors.\n- Test cases are independent
      of each other, i.e., they should not rely on one being run before the other
      (or environment being modified by one).\n- Generate exactly one test case per
      requirement.\n- In case the requirement and the code differ, the requirement
      is what you should test, i.e., it is the source of truth.\n- It might be that
      some of the provided code context and identifiers are incorrect. Use the most
      obviously correct parts of both and ignore the rest.\n\nReturn your answer in
      the following format:\n```json\n{\n    \"test_case_for_requirement_1\": <test
      case testing the first requirement in the list>,\n    \"test_case_for_requirement_2\":
      <test case testing the second requirement in the list>,\n    ...\n}\n```\n",
      "role": "user"}], "model": "gpt-4.1", "response_format": {"json_schema": {"name":
      "TestGenerationResult", "schema": {"$defs": {"ExpectedValueMapping": {"additionalProperties":
      false, "properties": {"identifier": {"$ref": "#/$defs/Identifier"}, "value":
      {"title": "Value", "type": "string"}}, "required": ["identifier", "value"],
      "title": "ExpectedValueMapping", "type": "object"}, "Identifier": {"enum": ["manager.Get_Check_Total.Table",
      "manager.Get_Check_Total.return", "uut_prototype_stubs.Get_Table_Record.Table",
      "uut_prototype_stubs.Get_Table_Record.return.Is_Occupied", "uut_prototype_stubs.Get_Table_Record.return.Number_In_Party",
      "uut_prototype_stubs.Get_Table_Record.return.Designator", "uut_prototype_stubs.Get_Table_Record.return.Wait_Person",
      "uut_prototype_stubs.Get_Table_Record.return.Order[0].Soup", "uut_prototype_stubs.Get_Table_Record.return.Order[0].Salad",
      "uut_prototype_stubs.Get_Table_Record.return.Order[0].Entree", "uut_prototype_stubs.Get_Table_Record.return.Order[0].Dessert",
      "uut_prototype_stubs.Get_Table_Record.return.Order[0].Beverage", "uut_prototype_stubs.Get_Table_Record.return.Order[1].Soup",
      "uut_prototype_stubs.Get_Table_Record.return.Order[1].Salad", "uut_prototype_stubs.Get_Table_Record.return.Order[1].Entree",
      "uut_prototype_stubs.Get_Table_Record.return.Order[1].Dessert", "uut_prototype_stubs.Get_Table_Record.return.Order[1].Beverage",
      "uut_prototype_stubs.Get_Table_Record.return.Order[2].Soup", "uut_prototype_stubs.Get_Table_Record.return.Order[2].Salad",
      "uut_prototype_stubs.Get_Table_Record.return.Order[2].Entree", "uut_prototype_stubs.Get_Table_Record.return.Order[2].Dessert",
      "uut_prototype_stubs.Get_Table_Record.return.Order[2].Beverage", "uut_prototype_stubs.Get_Table_Record.return.Order[3].Soup",
      "uut_prototype_stubs.Get_Table_Record.return.Order[3].Salad", "uut_prototype_stubs.Get_Table_Record.return.Order[3].Entree",
      "uut_prototype_stubs.Get_Table_Record.return.Order[3].Dessert", "uut_prototype_stubs.Get_Table_Record.return.Order[3].Beverage",
      "uut_prototype_stubs.Get_Table_Record.return.Check_Total"], "title": "Identifier",
      "type": "string"}, "InputValueMapping": {"additionalProperties": false, "properties":
      {"identifier": {"$ref": "#/$defs/Identifier"}, "value": {"title": "Value", "type":
      "string"}}, "required": ["identifier", "value"], "title": "InputValueMapping",
      "type": "object"}, "TestCase": {"additionalProperties": false, "properties":
      {"expected_values": {"items": {"$ref": "#/$defs/ExpectedValueMapping"}, "title":
      "Expected Values", "type": "array"}, "input_values": {"items": {"$ref": "#/$defs/InputValueMapping"},
      "title": "Input Values", "type": "array"}, "requirement_id": {"title": "Requirement
      Id", "type": "string"}, "subprogram_name": {"title": "Subprogram Name", "type":
      "string"}, "test_description": {"title": "Test Description", "type": "string"},
      "test_name": {"title": "Test Name", "type": "string"}, "unit_name": {"title":
      "Unit Name", "type": "string"}}, "required": ["test_name", "test_description",
      "requirement_id", "unit_name", "subprogram_name", "input_values", "expected_values"],
      "title": "TestCase", "type": "object"}}, "additionalProperties": false, "properties":
      {"test_case_for_requirement": {"$ref": "#/$defs/TestCase"}}, "required": ["test_case_for_requirement"],
      "title": "TestGenerationResult", "type": "object"}, "strict": true}, "type":
      "json_schema"}, "seed": 42, "stream": false, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      api-key:
      - REDACTED
      authorization:
      - REDACTED
      connection:
      - keep-alive
      content-length:
      - '27987'
      content-type:
      - application/json
      host:
      - REDACTED
      user-agent:
      - AsyncAzureOpenAI/Python 1.58.1
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-helper-method:
      - beta.chat.completions.parse
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.58.1
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.12
    method: POST
    uri: https://rg-rds-play-openai-pes-ppt.openai.azure.com/openai/deployments/gpt-4.1/chat/completions?api-version=2024-12-01-preview
  response:
    body:
      string: '{"choices":[{"content_filter_results":{"hate":{"filtered":false,"severity":"safe"},"protected_material_code":{"filtered":false,"detected":false},"protected_material_text":{"filtered":false,"detected":false},"self_harm":{"filtered":false,"severity":"safe"},"sexual":{"filtered":false,"severity":"safe"},"violence":{"filtered":false,"severity":"safe"}},"finish_reason":"stop","index":0,"logprobs":null,"message":{"annotations":[],"content":"{\"test_case_for_requirement_1\":{\"test_name\":\"Get_Check_Total_Returns_Correct_Check_Total_For_Table\",\"test_description\":\"This
        test verifies that the Get_Check_Total function returns the correct check
        total for a given table by stubbing Get_Table_Record to return a table record
        with a known Check_Total value. This directly exercises the requirement that
        the system provides a way to obtain the check total for a given table.\",\"requirement_id\":\"FR22.1\",\"unit_name\":\"manager\",\"subprogram_name\":\"Get_Check_Total\",\"input_values\":[{\"identifier\":\"manager.Get_Check_Total.Table\",\"value\":\"5\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.Table\",\"value\":\"5\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Is_Occupied\",\"value\":\"1\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Number_In_Party\",\"value\":\"3\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Designator\",\"value\":\"''A''\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Wait_Person\",\"value\":\"\\\"Alice\\\"\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Order[0].Soup\",\"value\":\"ONION\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Order[0].Salad\",\"value\":\"CAESAR\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Order[0].Entree\",\"value\":\"STEAK\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Order[0].Dessert\",\"value\":\"CAKE\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Order[0].Beverage\",\"value\":\"WINE\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Order[1].Soup\",\"value\":\"NO_SOUP\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Order[1].Salad\",\"value\":\"GREEN\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Order[1].Entree\",\"value\":\"CHICKEN\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Order[1].Dessert\",\"value\":\"PIE\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Order[1].Beverage\",\"value\":\"BEER\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Order[2].Soup\",\"value\":\"CHOWDER\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Order[2].Salad\",\"value\":\"NO_SALAD\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Order[2].Entree\",\"value\":\"LOBSTER\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Order[2].Dessert\",\"value\":\"FRUIT\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Order[2].Beverage\",\"value\":\"SODA\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Order[3].Soup\",\"value\":\"NO_SOUP\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Order[3].Salad\",\"value\":\"NO_SALAD\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Order[3].Entree\",\"value\":\"NO_ENTREE\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Order[3].Dessert\",\"value\":\"NO_DESSERT\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Order[3].Beverage\",\"value\":\"NO_BEVERAGE\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Check_Total\",\"value\":\"123.45\"}],\"expected_values\":[{\"identifier\":\"manager.Get_Check_Total.return\",\"value\":\"123.45\"}]}}","refusal":null,"role":"assistant"}}],"created":1752564162,"id":"chatcmpl-BtUHq6SZ77XwGwNoKjMEVD6xuKIIE","model":"gpt-4.1-2025-04-14","object":"chat.completion","prompt_filter_results":[{"prompt_index":0,"content_filter_results":{"hate":{"filtered":false,"severity":"safe"},"jailbreak":{"filtered":false,"detected":false},"self_harm":{"filtered":false,"severity":"safe"},"sexual":{"filtered":false,"severity":"safe"},"violence":{"filtered":false,"severity":"safe"}}}],"system_fingerprint":"fp_07e970ab25","usage":{"completion_tokens":733,"completion_tokens_details":{"accepted_prediction_tokens":0,"audio_tokens":0,"reasoning_tokens":0,"rejected_prediction_tokens":0},"prompt_tokens":6331,"prompt_tokens_details":{"audio_tokens":0,"cached_tokens":0},"total_tokens":7064}}

        '
    headers:
      Content-Length:
      - '4539'
      Content-Type:
      - application/json
      Date:
      - Tue, 15 Jul 2025 07:22:47 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      apim-request-id:
      - c103e498-83a1-49fd-befd-7a4ca5516211
      azureml-model-session:
      - d070-20250625140329
      cmp-upstream-response-duration:
      - '5565'
      x-accel-buffering:
      - 'no'
      x-content-type-options:
      - nosniff
      x-ms-deployment-name:
      - gpt-4.1
      x-ms-rai-invoked:
      - 'true'
      x-ms-region:
      - Sweden Central
      x-ratelimit-limit-requests:
      - '1006'
      x-ratelimit-limit-tokens:
      - '1006000'
      x-ratelimit-remaining-requests:
      - '1003'
      x-ratelimit-remaining-tokens:
      - '988133'
      x-request-id:
      - ce44a9fd-534e-4c0b-b794-0950e96c960f
    status:
      code: 200
      message: OK
- request:
    body: '{"max_completion_tokens": 8192, "messages": [{"content": "You are an AI
      assistant that generates test code for given requirements.", "role": "system"},
      {"content": "\nBased on the following requirements, references, and code, generate
      one test case per given requirement that exercises it.\n\nTest framework reference:\n##
      Test Case Format\nThe format of a test case is as follows:\n{\n    \"test_name\":
      <some descriptive test name>,\n    \"test_description\": <more details about
      the test>\n    \"requirement_id\": <requirement being tested by this test> (optional)\n    \"unit_name\":
      <unit_name>,\n    \"subprogram_name\": <subprogram_name>,\n    \"input_values\":
      [\n        { \"identifier\": <identifier>, \"value\": <value> },\n        ...\n    ],\n    \"expected_values\":
      [\n        { \"identifier\": <identifier>, \"value\": <value> },\n        ...\n    ]\n}\n\n###
      Identifier and Value Syntax\nThe following sections describe the syntax for
      specifying the `identifier` and `value` fields in the test case format. `unit_name`
      and `subprogram_name` refer to file names of C/C++ files (without extension)
      and function names in these files respectively (to refer to methods in classes
      use `<class name>::<method name>`). It is only possible to include identifiers
      from different units and other subprograms if they are called/used in the subprogram
      being tested.\n\n#### Numeric Types\n- Assign the number directly.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.parameter\", \"value\": \"42\" }\n    { \"identifier\":
      \"unit.subprogram.parameter\", \"value\": \"84\" }\n\n#### Structure Types\n-
      Use the standard C syntax to refer to fields within structures.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.struct_param.field\", \"value\": \"CAESAR\"
      }\n    { \"identifier\": \"unit.subprogram.struct_param.field\", \"value\":
      \"STEAK\" }\n\n#### Enumeration Types\n- Use the enumeral value directly.\n  -
      Example:\n    { \"identifier\": \"unit.subprogram.enum_param\", \"value\": \"ENUM_VALUE\"
      }\n\n#### Character and String Types\n- Use standard C delimiters for characters
      and strings.\n  - Example:\n    { \"identifier\": \"unit.subprogram.char_param\",
      \"value\": \"''a''\" }\n    { \"identifier\": \"unit.subprogram.string_param\",
      \"value\": \"\\\"Hello, World\\\"\" }\n- Treat strings as atomic values to set.
      Do not attempt to treat them as a char array, i.e., do not malloc or attempt
      to access chars at individual indices.\n\n#### Pointer and Array Types\n- For
      constrained arrays, specify the index and value.\n  - Example:\n    { \"identifier\":
      \"unit.subprogram.array_param[2]\", \"value\": \"42\" }\n- For unconstrained
      arrays, use `<<malloc [amount of slots to allocate as integer]>>` to allocate
      memory.\n  - Example:\n    { \"identifier\": \"unit.subprogram.array_param\",
      \"value\": \"<<malloc 2>>\" }\n    { \"identifier\": \"unit.subprogram.array_param[1]\",
      \"value\": \"3\" }\n- For pointers, use index 0 to access it (generally pointers
      and unconstrained arrays are the same after all)\n  - Example:\n    { \"identifier\":
      \"unit.subprogram.ptr_param[0]\", \"value\": \"12\" }\n- If you want to make
      something null then use `<<null>>`.\n  - Example:\n    { \"identifier\": \"unit.subprogram.pointer_param\",
      \"value\": \"<<null>>\" }\n    or\n    { \"identifier\": \"unit.subprogram.array_param\",
      \"value\": \"<<null>>\" }\n\n#### Function Return Parameters\n- Use the keyword
      `return` for function return values.\n  - Example:\n    { \"identifier\": \"unit.subprogram.return\",
      \"value\": \"23.0\" }\n\n#### Global Objects\n- Use the syntax `UNIT.<<GLOBAL>>.OBJECT`
      to set values for global objects.\n  - Example:\n    { \"identifier\": \"unit.<<GLOBAL>>.global_object.field\",
      \"value\": \"VALUE\" }\n- Note: `UNIT.OBJECT` is NEVER valid syntax\n\n#####
      Classes\n- To set and expect values of methods in a class (unlike standalone
      subprograms), it is necessary to first instantiate a base object using a constructor\n-
      Use the syntax `UNIT.<<GLOBAL>>.(cl).CLASS_NAME.SUBCLASS_NAME.<<constructor>>.<<call>>`
      to call the constructor of `SUBCLASS` to instantiate a `CLASS` object\n  - Example:\n    {
      \"identifier\": \"unit.<<GLOBAL>>.(cl).class_name.class_name.<<constructor>>.<<call>>\",
      \"value\": \"0\" }\n  - Note: The value in this case is irrelevant and always
      set to 0.\n- To set and expect member variables of a constructed object use
      the syntax `UNIT.<<GLOBAL>>.(cl).CLASS_NAME.SUBCLASS_NAME.MEMBER_NAME`\n  -
      Example:\n    { \"identifier\": \"unit.<<GLOBAL>>.(cl).class_name.class_name.member\",
      \"value\": \"test\" }\n  - Note: If the member is a structured entity like a
      struct or a class instance you can access the subfields like described in the
      `Structure Types` section.\n- To set and expect arguments and return values
      of methods in a class use the name do so like you would for regular subprograms
      except that you prefix the name with the class name and `::`\n  - Example:\n    {
      \"identifier\": \"unit.class_name::member_method.parameter\", \"value\": \"2\"
      }\n  - Note: If you use this ALWAYS first call the class constructor!\n\n####
      Range of Values for Input Data\n- Use range expressions to test a range of values.\n  -
      Example:\n    { \"identifier\": \"unit.subprogram.parameter\", \"value\": \"vary
      from: 0.0 to: 90.0 by: 0.1\" }\n\n#### Range of Values for Expected Results\n-
      Use the syntax `<min> .. <max>` for expected value ranges.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.parameter\", \"value\": \"257.1 .. 259.9\"
      }\n\n#### List of Values\n- Use a comma-separated list for multiple values.\n  -
      Example:\n    { \"identifier\": \"unit.subprogram.parameter\", \"value\": \"1,2,4\"
      }\n- Use parentheses for repeated values.\n  - Example:\n    { \"identifier\":
      \"unit.subprogram.parameter\", \"value\": \"1,(4)2,4\" }\n- Note: This is used
      in case something needs to be set multiple times (like for a stub return) during
      one call, NOT to specify values in an array. To do so, use the regular index
      syntax as outlined above instead.\n\n#### Working with Overloaded Subprograms\n-
      Append the parameter type list to the subprogram name.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram(int).parameter\", \"value\": \"3\" }\n    {
      \"identifier\": \"unit.subprogram(char).parameter\", \"value\": \"''d''\" }\n\n####
      Boolean Values\n- Use `1` for `true` and `0` for `false`.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.boolean_param\", \"value\": \"1\" }\n    {
      \"identifier\": \"unit.subprogram.boolean_param\", \"value\": \"0\" }\n\n####
      Accessing Subprograms Outside the Unit\n- Use `uut_prototype_stubs` as the unit
      for subprograms defined outside of the unit of the test case.\n  - Example:\n    {
      \"identifier\": \"uut_prototype_stubs.name_of_external_subprogram.parameter\",
      \"value\": \"42\" }\n\n#### Emulating stubbed pointer manipulating functions\n-
      Normally it is easy to emulate a stubbed function returning some value (by setting
      the return value of the stubbed function)\n- This is not possible if the stubbed
      function works with pointers as only values can be specified (so only ever the
      contents of a pointer), e.g., functions like memcpy\n- Therefore, in these cases
      you can emulate the stubbed function setting the contents of the pointer using
      <<pointer value_to_set>>\n  - For example assume we have a pointer input variable
      *float x that is modified by a stubbed called to foo(*float pointer_to_modify),
      i.e., foo(x). Then you can change the value, i.e., *x to 10 like so:\n    {
      \"identifier\": \"uut_prototype_stubs.foo.pointer_to_modify\", \"value\": \"<<pointer
      10>>\" }\n  - The other input values of the function of course do not need to
      be specified explicitly (unless you also want to see the values of those input
      pointers)\n- You can only set one variable like this per test case due to technical
      reasons so choose wisely (if you use this feature)\n\n#### Emulating multiple
      function calls\n- Use the multiple value syntax, one value will be read everytime
      the stubbed function is called\n  - Example (foo is called twice, and should
      return 2 the first time and 3 the second):\n    { \"identifier\": \"uut_prototype_stubs.foo.return\",
      \"value\": \"2,3\" }\n\n## Test Case Execution\n1. The test framework will call
      the specified subprogram/function\n2. When a value of a variable would be read,
      if it is specified as a test value, it is set to that value instead\n3. After
      the subprogram finishes, the expected values are checked against the actual
      values at that point\n\nAll tests are executed in isolation. The execution of
      one test does not influence the execution of others.\n\n### Stubbing behaviour\n-
      All function calls from external files, i.e, those referenced with `uut_prototype_stubs`
      are stubbed automatically and do not implement any behaviour. Setting their
      input values has no effect on their output values (instead default values are
      output unless you specify values for them).\n- If any of the parameters or return
      value of a called function (which is not automatically stubbed as outlined above)
      are set or expected to be some value using an identifier, the function will
      be stubbed during execution and not implement any behaviour. In this case it
      is forbidden to also expect the return value to equal something (it won''t as
      the function will be stubbed).\n  - If none are set or expected the function
      will execute as normal\n\n### Default identifier values and initialization\n-
      In general any value not set (input of course), will fall back to a default
      value. However this should be avoided to prevent undefined behaviour. This means
      all input variables (and outputs of stubbed values) should be exhaustively described.\n-
      Do not set an identifier multiple times, it just results in overriding of the
      previous value\n- To access methods of a class and set values it is imperative
      to first instantiate the class using a constructor. For all classes a default
      object is ready to be initialized if needed using the respective constructor.\n-
      Similarly, arrays or pointers should always be allocated\n\n## Examples\n\nLet''s
      consider a more complex C++ code snippet in a file named `data_processor.cpp`:\n\n```cpp\n//
      File: data_processor.cpp\n// Unit: data_processor\n\ntypedef struct {\n    int
      id;\n    float value;\n    char status;\n} DataRecord;\n\ntypedef enum {\n    MODE_NORMAL
      = 0,\n    MODE_DEBUG = 1,\n    MODE_ERROR = 2\n} ProcessingMode;\n\n// External
      function declarations\nextern int validate_record(DataRecord* record);\nextern
      void log_error(const char* message);\nextern DataRecord* allocate_buffer(int
      size);\n\nProcessingMode current_mode = MODE_NORMAL;\n\nint process_data_array(DataRecord*
      input_array, int array_size, DataRecord** output_array) {\n    if (input_array
      == NULL || array_size <= 0) {\n        if (current_mode == MODE_DEBUG) {\n            log_error(\"Invalid
      input parameters\");\n        }\n        return -1;\n    }\n    \n    // Allocate
      output buffer\n    *output_array = allocate_buffer(array_size);\n    if (*output_array
      == NULL) {\n        log_error(\"Memory allocation failed\");\n        return
      -2;\n    }\n    \n    int processed_count = 0;\n    for (int i = 0; i < array_size;
      i++) {\n        // Validate each record using external function\n        int
      validation_result = validate_record(&input_array[i]);\n        \n        if
      (validation_result > 0) {\n            // Copy valid record to output with modified
      value\n            (*output_array)[processed_count].id = input_array[i].id;\n            (*output_array)[processed_count].value
      = input_array[i].value * 1.5f;\n            (*output_array)[processed_count].status
      = ''V''; // Valid\n            processed_count++;\n        } else if (current_mode
      == MODE_ERROR) {\n            // In error mode, stop processing on first invalid
      record\n            log_error(\"Invalid record encountered in error mode\");\n            return
      processed_count;\n        }\n        // In normal mode, skip invalid records
      and continue\n    }\n    \n    return processed_count;\n}\n```\n\n### Example
      1: Testing Null Input Handling with Branching\n\n**Requirement REQ-DP-001:**
      The `process_data_array` function shall return -1 when input_array is NULL and
      log an error message if in DEBUG mode.\n\n```json\n{\n  \"test_name\": \"Test_Null_Input_Debug_Mode\",\n  \"test_description\":
      \"Tests process_data_array with NULL input in DEBUG mode to ensure it returns
      -1 and calls log_error.\",\n  \"requirement_id\": \"REQ-DP-001\",\n  \"unit_name\":
      \"data_processor\",\n  \"subprogram_name\": \"process_data_array\",\n  \"input_values\":
      [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\", \"value\":
      \"MODE_DEBUG\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<null>>\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"5\" },\n  ],\n  \"expected_values\": [\n    { \"identifier\": \"uut_prototype_stubs.log_error.message\",
      \"value\": \"\\\"Invalid input parameters\\\"\" },\n    { \"identifier\": \"data_processor.process_data_array.return\",
      \"value\": \"-1\" }\n  ]\n}\n```\n\n### Example 2: Testing Memory Allocation
      with Stubbing\n\n**Requirement REQ-DP-002:** The `process_data_array` function
      shall return -2 and log an error when memory allocation fails.\n\n```json\n{\n  \"test_name\":
      \"Test_Memory_Allocation_Failure\",\n  \"test_description\": \"Tests process_data_array
      when allocate_buffer returns NULL to ensure proper error handling.\",\n  \"requirement_id\":
      \"REQ-DP-002\",\n  \"unit_name\": \"data_processor\",\n  \"subprogram_name\":
      \"process_data_array\",\n  \"input_values\": [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\",
      \"value\": \"MODE_NORMAL\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<malloc 1>>\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].id\",
      \"value\": \"1\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].value\",
      \"value\": \"10.5\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].status\",
      \"value\": \"''A''\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"2\" },\n    { \"identifier\": \"uut_prototype_stubs.allocate_buffer.return\",
      \"value\": \"<<null>>\" },\n  ],\n  \"expected_values\": [\n    { \"identifier\":
      \"uut_prototype_stubs.log_error.message\", \"value\": \"\\\"Memory allocation
      failed\\\"\" },\n    { \"identifier\": \"data_processor.process_data_array.return\",
      \"value\": \"-2\" }\n  ]\n}\n```\n\n### Example 3: Testing Complex Processing
      with Multiple Stubs\n\n**Requirement REQ-DP-003:** The `process_data_array`
      function shall process valid records by multiplying their values by 1.5 and
      setting status to ''V''.\n\n```json\n{\n  \"test_name\": \"Test_Valid_Record_Processing\",\n  \"test_description\":
      \"Tests process_data_array with mixed valid/invalid records to ensure proper
      processing and output.\",\n  \"requirement_id\": \"REQ-DP-003\",\n  \"unit_name\":
      \"data_processor\",\n  \"subprogram_name\": \"process_data_array\",\n  \"input_values\":
      [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\", \"value\":
      \"MODE_NORMAL\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].id\",
      \"value\": \"100\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].value\",
      \"value\": \"20.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].status\",
      \"value\": \"''A''\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].id\",
      \"value\": \"200\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].status\",
      \"value\": \"''B''\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[2].id\",
      \"value\": \"300\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[2].value\",
      \"value\": \"40.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[2].status\",
      \"value\": \"''C''\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"3\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0]\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"uut_prototype_stubs.validate_record.return\",
      \"value\": \"1,0,1\" }\n  ],\n  \"expected_values\": [\n    { \"identifier\":
      \"data_processor.process_data_array.return\", \"value\": \"2\" },\n    { \"identifier\":
      \"data_processor.process_data_array.output_array[0][0].id\", \"value\": \"100\"
      },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].status\",
      \"value\": \"''V''\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][1].id\",
      \"value\": \"300\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][1].value\",
      \"value\": \"60.0\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][1].status\",
      \"value\": \"''V''\" }\n  ]\n}\n```\n\n### Example 4: Testing Error Mode with
      Early Termination\n\n**Requirement REQ-DP-004:** The `process_data_array` function
      shall stop processing and return the current count when an invalid record is
      encountered in ERROR mode.\n\n```json\n{\n  \"test_name\": \"Test_Error_Mode_Early_Termination\",\n  \"test_description\":
      \"Tests process_data_array in ERROR mode to ensure it stops processing on first
      invalid record.\",\n  \"requirement_id\": \"REQ-DP-004\",\n  \"unit_name\":
      \"data_processor\",\n  \"subprogram_name\": \"process_data_array\",\n  \"input_values\":
      [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\", \"value\":
      \"MODE_ERROR\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].id\",
      \"value\": \"100\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].value\",
      \"value\": \"20.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].id\",
      \"value\": \"200\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"3\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0]\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"uut_prototype_stubs.allocate_buffer.size\",
      \"value\": \"3\" },\n    { \"identifier\": \"uut_prototype_stubs.validate_record.return\",
      \"value\": \"1,-1\" },\n  ],\n  \"expected_values\": [\n    { \"identifier\":
      \"uut_prototype_stubs.log_error.message\", \"value\": \"\\\"Invalid record encountered
      in error mode\\\"\" },\n    { \"identifier\": \"data_processor.process_data_array.return\",
      \"value\": \"1\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].id\",
      \"value\": \"100\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].status\",
      \"value\": \"''V''\" }\n  ]\n}\n```\n\nRelevant Code:\n```cpp\n// Unit: manager\n\n//
      Definitions of types, called functions and data structures:\n\ntypedef float
      FLOAT;\n\nenum boolean { v_false, v_true };\n\nenum soups { NO_SOUP, ONION,
      CHOWDER };\n\nenum salads { NO_SALAD, CAESAR, GREEN };\n\nenum entrees { NO_ENTREE,
      STEAK, CHICKEN, LOBSTER, PASTA };\n\nenum desserts { NO_DESSERT, CAKE, PIE,
      FRUIT };\n\nenum beverages { NO_BEVERAGE, WINE, BEER, MIXED_DRINK, SODA };\n\nstruct
      order_type\n{\n  enum soups Soup;\n  enum salads Salad;\n  enum entrees Entree;\n  enum
      desserts Dessert;\n  enum beverages Beverage;\n};\n\ntypedef unsigned short
      seat_index_type;\n\ntypedef unsigned short table_index_type;\n\nstruct table_data_type\n{\n  enum
      boolean Is_Occupied;\n  seat_index_type Number_In_Party;\n  char Designator;\n  char
      Wait_Person[10];\n  struct order_type Order[4];\n  FLOAT Check_Total;\n};\n\nstruct
      table_data_type Get_Table_Record(table_index_type Table);\n\nvoid Update_Table_Record(table_index_type
      Table, struct table_data_type Data);\n\n// Code for Clear_Table:\nint Clear_Table(table_index_type
      Table)\n{\n  struct table_data_type Table_Data;\n  seat_index_type Seat;\n  Table_Data
      = Get_Table_Record(Table);\n  Table_Data.Is_Occupied = v_false;\n  Table_Data.Number_In_Party
      = 1;\n\n  for (Seat=0; Seat < 4; Seat++){\n      Table_Data.Order[Seat].Soup
      = NO_SOUP;\n      Table_Data.Order[Seat].Salad = NO_SALAD;\n      Table_Data.Order[Seat].Entree
      = NO_ENTREE;\n      Table_Data.Order[Seat].Dessert = NO_DESSERT;\n      Table_Data.Order[Seat].Beverage
      = NO_BEVERAGE;\n   }\n\n  Table_Data.Check_Total = 0;\n\n  Update_Table_Record(Table,
      Table_Data);\n  return 0;\n}\n```\n\nExample Test Cases:\n```json\n[\n  {\n    \"test_name\":
      \"BASIS-PATH-001-PARTIAL\",\n    \"test_description\": \"This is an automatically
      generated test case.\\nTest Path 1\\n(1) for (Seat < 4) ==> FALSE\\nTest Case
      Generation Notes:\\nConflict: Unable to control expression-to-expression comparison
      in branch 1\",\n    \"unit_name\": \"manager\",\n    \"subprogram_name\": \"Clear_Table\",\n    \"input_values\":
      [\n      {\n        \"identifier\": \"manager.Clear_Table.Table\",\n        \"value\":
      \"<<MIN>>\"\n      }\n    ],\n    \"expected_values\": [],\n    \"requirement_id\":
      null\n  }\n]\n```\n\nRequirements:\n1. FR21.1: Clearing a table updates the
      table''s check total to 0.0 within the table database.\n\nDetailed task description:\nBased
      on the above requirements and code, generate unit tests that exercise all requirements.\nMake
      sure the generated test cases clearly test the provided requirements.\n\nSolve
      the problem using the following approach:\nFor each requirement in order...\n    1.
      Come up with descriptive (unique) name for the test case and describe in natural
      language how this test exercises the requirement\n    2. Provide the name of
      the unit being tested (base file name without extension) and the name of the
      subprogram being tested (function name)\n    3. Provide the input and expected
      values by providing the correct identifier and value in the syntax outlined
      above.\n\nYou are allowed to use the following identifiers in your test case:\n-
      manager.Clear_Table.Table\n- manager.Clear_Table.return\n- uut_prototype_stubs.Get_Table_Record.Table\n-
      uut_prototype_stubs.Get_Table_Record.return.Is_Occupied\n- uut_prototype_stubs.Get_Table_Record.return.Number_In_Party\n-
      uut_prototype_stubs.Get_Table_Record.return.Designator\n- uut_prototype_stubs.Get_Table_Record.return.Wait_Person\n-
      uut_prototype_stubs.Get_Table_Record.return.Order[i].Soup (for all: i in 0..3)\n-
      uut_prototype_stubs.Get_Table_Record.return.Order[i].Salad (for all: i in 0..3)\n-
      uut_prototype_stubs.Get_Table_Record.return.Order[i].Entree (for all: i in 0..3)\n-
      uut_prototype_stubs.Get_Table_Record.return.Order[i].Dessert (for all: i in
      0..3)\n- uut_prototype_stubs.Get_Table_Record.return.Order[i].Beverage (for
      all: i in 0..3)\n- uut_prototype_stubs.Get_Table_Record.return.Check_Total\n-
      uut_prototype_stubs.Update_Table_Record.Table\n- uut_prototype_stubs.Update_Table_Record.Data.Is_Occupied\n-
      uut_prototype_stubs.Update_Table_Record.Data.Number_In_Party\n- uut_prototype_stubs.Update_Table_Record.Data.Designator\n-
      uut_prototype_stubs.Update_Table_Record.Data.Wait_Person\n- uut_prototype_stubs.Update_Table_Record.Data.Order[i].Soup
      (for all: i in 0..3)\n- uut_prototype_stubs.Update_Table_Record.Data.Order[i].Salad
      (for all: i in 0..3)\n- uut_prototype_stubs.Update_Table_Record.Data.Order[i].Entree
      (for all: i in 0..3)\n- uut_prototype_stubs.Update_Table_Record.Data.Order[i].Dessert
      (for all: i in 0..3)\n- uut_prototype_stubs.Update_Table_Record.Data.Order[i].Beverage
      (for all: i in 0..3)\n- uut_prototype_stubs.Update_Table_Record.Data.Check_Total\n\nYou
      MUST set an input value for all input to the functions, used globals and called
      stubs.\nIf you do not ensure this, it can happen that your test does not cover
      the correct path corresponding to the requirement.\nAn expected value is not
      required for all identifiers. Only for those relevant to the requirement.\n\nStubbed-by-default
      called functions (no behaviour is implemented, you can use identifiers to simulate
      a return value) called by Clear_Table:\n- Get_Table_Record\n- Update_Table_Record\n\nNotes:\n-
      You are NOT allowed to invent any syntax that is not specified in the syntax
      reference. Stick to the syntax provided.\n- You are NOT allowed to invent any
      units or functions that are not present in the provided code.\n- This is a highly
      critical task, please ensure that the test cases are correct and complete and
      do not contain any logical or syntactical errors.\n- Test cases are independent
      of each other, i.e., they should not rely on one being run before the other
      (or environment being modified by one).\n- Generate exactly one test case per
      requirement.\n- In case the requirement and the code differ, the requirement
      is what you should test, i.e., it is the source of truth.\n- It might be that
      some of the provided code context and identifiers are incorrect. Use the most
      obviously correct parts of both and ignore the rest.\n\nReturn your answer in
      the following format:\n```json\n{\n    \"test_case_for_requirement_1\": <test
      case testing the first requirement in the list>,\n    \"test_case_for_requirement_2\":
      <test case testing the second requirement in the list>,\n    ...\n}\n```\n",
      "role": "user"}], "model": "gpt-4.1", "response_format": {"json_schema": {"name":
      "TestGenerationResult", "schema": {"$defs": {"ExpectedValueMapping": {"additionalProperties":
      false, "properties": {"identifier": {"$ref": "#/$defs/Identifier"}, "value":
      {"title": "Value", "type": "string"}}, "required": ["identifier", "value"],
      "title": "ExpectedValueMapping", "type": "object"}, "Identifier": {"enum": ["manager.Clear_Table.Table",
      "manager.Clear_Table.return", "uut_prototype_stubs.Get_Table_Record.Table",
      "uut_prototype_stubs.Get_Table_Record.return.Is_Occupied", "uut_prototype_stubs.Get_Table_Record.return.Number_In_Party",
      "uut_prototype_stubs.Get_Table_Record.return.Designator", "uut_prototype_stubs.Get_Table_Record.return.Wait_Person",
      "uut_prototype_stubs.Get_Table_Record.return.Order[0].Soup", "uut_prototype_stubs.Get_Table_Record.return.Order[0].Salad",
      "uut_prototype_stubs.Get_Table_Record.return.Order[0].Entree", "uut_prototype_stubs.Get_Table_Record.return.Order[0].Dessert",
      "uut_prototype_stubs.Get_Table_Record.return.Order[0].Beverage", "uut_prototype_stubs.Get_Table_Record.return.Order[1].Soup",
      "uut_prototype_stubs.Get_Table_Record.return.Order[1].Salad", "uut_prototype_stubs.Get_Table_Record.return.Order[1].Entree",
      "uut_prototype_stubs.Get_Table_Record.return.Order[1].Dessert", "uut_prototype_stubs.Get_Table_Record.return.Order[1].Beverage",
      "uut_prototype_stubs.Get_Table_Record.return.Order[2].Soup", "uut_prototype_stubs.Get_Table_Record.return.Order[2].Salad",
      "uut_prototype_stubs.Get_Table_Record.return.Order[2].Entree", "uut_prototype_stubs.Get_Table_Record.return.Order[2].Dessert",
      "uut_prototype_stubs.Get_Table_Record.return.Order[2].Beverage", "uut_prototype_stubs.Get_Table_Record.return.Order[3].Soup",
      "uut_prototype_stubs.Get_Table_Record.return.Order[3].Salad", "uut_prototype_stubs.Get_Table_Record.return.Order[3].Entree",
      "uut_prototype_stubs.Get_Table_Record.return.Order[3].Dessert", "uut_prototype_stubs.Get_Table_Record.return.Order[3].Beverage",
      "uut_prototype_stubs.Get_Table_Record.return.Check_Total", "uut_prototype_stubs.Update_Table_Record.Table",
      "uut_prototype_stubs.Update_Table_Record.Data.Is_Occupied", "uut_prototype_stubs.Update_Table_Record.Data.Number_In_Party",
      "uut_prototype_stubs.Update_Table_Record.Data.Designator", "uut_prototype_stubs.Update_Table_Record.Data.Wait_Person",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[0].Soup", "uut_prototype_stubs.Update_Table_Record.Data.Order[0].Salad",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[0].Entree", "uut_prototype_stubs.Update_Table_Record.Data.Order[0].Dessert",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[0].Beverage", "uut_prototype_stubs.Update_Table_Record.Data.Order[1].Soup",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[1].Salad", "uut_prototype_stubs.Update_Table_Record.Data.Order[1].Entree",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[1].Dessert", "uut_prototype_stubs.Update_Table_Record.Data.Order[1].Beverage",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[2].Soup", "uut_prototype_stubs.Update_Table_Record.Data.Order[2].Salad",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[2].Entree", "uut_prototype_stubs.Update_Table_Record.Data.Order[2].Dessert",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[2].Beverage", "uut_prototype_stubs.Update_Table_Record.Data.Order[3].Soup",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[3].Salad", "uut_prototype_stubs.Update_Table_Record.Data.Order[3].Entree",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[3].Dessert", "uut_prototype_stubs.Update_Table_Record.Data.Order[3].Beverage",
      "uut_prototype_stubs.Update_Table_Record.Data.Check_Total"], "title": "Identifier",
      "type": "string"}, "InputValueMapping": {"additionalProperties": false, "properties":
      {"identifier": {"$ref": "#/$defs/Identifier"}, "value": {"title": "Value", "type":
      "string"}}, "required": ["identifier", "value"], "title": "InputValueMapping",
      "type": "object"}, "TestCase": {"additionalProperties": false, "properties":
      {"expected_values": {"items": {"$ref": "#/$defs/ExpectedValueMapping"}, "title":
      "Expected Values", "type": "array"}, "input_values": {"items": {"$ref": "#/$defs/InputValueMapping"},
      "title": "Input Values", "type": "array"}, "requirement_id": {"title": "Requirement
      Id", "type": "string"}, "subprogram_name": {"title": "Subprogram Name", "type":
      "string"}, "test_description": {"title": "Test Description", "type": "string"},
      "test_name": {"title": "Test Name", "type": "string"}, "unit_name": {"title":
      "Unit Name", "type": "string"}}, "required": ["test_name", "test_description",
      "requirement_id", "unit_name", "subprogram_name", "input_values", "expected_values"],
      "title": "TestCase", "type": "object"}}, "additionalProperties": false, "properties":
      {"test_case_for_requirement": {"$ref": "#/$defs/TestCase"}}, "required": ["test_case_for_requirement"],
      "title": "TestGenerationResult", "type": "object"}, "strict": true}, "type":
      "json_schema"}, "seed": 42, "stream": false, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      api-key:
      - REDACTED
      authorization:
      - REDACTED
      connection:
      - keep-alive
      content-length:
      - '31097'
      content-type:
      - application/json
      host:
      - REDACTED
      user-agent:
      - AsyncAzureOpenAI/Python 1.58.1
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-helper-method:
      - beta.chat.completions.parse
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.58.1
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.12
    method: POST
    uri: https://rg-rds-play-openai-pes-ppt.openai.azure.com/openai/deployments/gpt-4.1/chat/completions?api-version=2024-12-01-preview
  response:
    body:
      string: '{"choices":[{"content_filter_results":{"hate":{"filtered":false,"severity":"safe"},"protected_material_code":{"filtered":false,"detected":false},"protected_material_text":{"filtered":false,"detected":false},"self_harm":{"filtered":false,"severity":"safe"},"sexual":{"filtered":false,"severity":"safe"},"violence":{"filtered":false,"severity":"safe"}},"finish_reason":"stop","index":0,"logprobs":null,"message":{"annotations":[],"content":"{\"test_case_for_requirement_1\":{\"test_name\":\"Clear_Table_Sets_Check_Total_To_Zero\",\"test_description\":\"This
        test verifies that calling Clear_Table sets the table''s check total to 0.0
        in the table database by checking the value passed to Update_Table_Record.
        The test simulates a table with a nonzero check total and ensures that after
        clearing, the check total is updated to 0.0.\",\"requirement_id\":\"FR21.1\",\"unit_name\":\"manager\",\"subprogram_name\":\"Clear_Table\",\"input_values\":[{\"identifier\":\"manager.Clear_Table.Table\",\"value\":\"2\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.Table\",\"value\":\"2\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Is_Occupied\",\"value\":\"1\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Number_In_Party\",\"value\":\"3\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Designator\",\"value\":\"''A''\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Wait_Person\",\"value\":\"\\\"Smith\\\"\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Order[0].Soup\",\"value\":\"ONION\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Order[0].Salad\",\"value\":\"CAESAR\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Order[0].Entree\",\"value\":\"STEAK\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Order[0].Dessert\",\"value\":\"CAKE\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Order[0].Beverage\",\"value\":\"WINE\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Order[1].Soup\",\"value\":\"CHOWDER\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Order[1].Salad\",\"value\":\"GREEN\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Order[1].Entree\",\"value\":\"CHICKEN\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Order[1].Dessert\",\"value\":\"PIE\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Order[1].Beverage\",\"value\":\"BEER\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Order[2].Soup\",\"value\":\"NO_SOUP\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Order[2].Salad\",\"value\":\"NO_SALAD\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Order[2].Entree\",\"value\":\"LOBSTER\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Order[2].Dessert\",\"value\":\"FRUIT\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Order[2].Beverage\",\"value\":\"MIXED_DRINK\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Order[3].Soup\",\"value\":\"NO_SOUP\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Order[3].Salad\",\"value\":\"NO_SALAD\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Order[3].Entree\",\"value\":\"PASTA\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Order[3].Dessert\",\"value\":\"NO_DESSERT\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Order[3].Beverage\",\"value\":\"SODA\"},{\"identifier\":\"uut_prototype_stubs.Get_Table_Record.return.Check_Total\",\"value\":\"123.45\"}],\"expected_values\":[{\"identifier\":\"uut_prototype_stubs.Update_Table_Record.Table\",\"value\":\"2\"},{\"identifier\":\"uut_prototype_stubs.Update_Table_Record.Data.Check_Total\",\"value\":\"0\"},{\"identifier\":\"manager.Clear_Table.return\",\"value\":\"0\"}]}}","refusal":null,"role":"assistant"}}],"created":1752564162,"id":"chatcmpl-BtUHqWls687su1behX6u5mOUzk6La","model":"gpt-4.1-2025-04-14","object":"chat.completion","prompt_filter_results":[{"prompt_index":0,"content_filter_results":{"hate":{"filtered":false,"severity":"safe"},"jailbreak":{"filtered":false,"detected":false},"self_harm":{"filtered":false,"severity":"safe"},"sexual":{"filtered":false,"severity":"safe"},"violence":{"filtered":false,"severity":"safe"}}}],"system_fingerprint":"fp_07e970ab25","usage":{"completion_tokens":764,"completion_tokens_details":{"accepted_prediction_tokens":0,"audio_tokens":0,"reasoning_tokens":0,"rejected_prediction_tokens":0},"prompt_tokens":7130,"prompt_tokens_details":{"audio_tokens":0,"cached_tokens":0},"total_tokens":7894}}

        '
    headers:
      Content-Length:
      - '4650'
      Content-Type:
      - application/json
      Date:
      - Tue, 15 Jul 2025 07:22:47 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      apim-request-id:
      - 6528d4ae-1180-437b-bd9a-33ed1a9429a9
      azureml-model-session:
      - d070-20250625140329
      cmp-upstream-response-duration:
      - '5974'
      x-accel-buffering:
      - 'no'
      x-content-type-options:
      - nosniff
      x-ms-deployment-name:
      - gpt-4.1
      x-ms-rai-invoked:
      - 'true'
      x-ms-region:
      - Sweden Central
      x-ratelimit-limit-requests:
      - '1006'
      x-ratelimit-limit-tokens:
      - '1006000'
      x-ratelimit-remaining-requests:
      - '1003'
      x-ratelimit-remaining-tokens:
      - '987770'
      x-request-id:
      - d08fe833-78fb-49dc-9fc6-dcab8b782e92
    status:
      code: 200
      message: OK
- request:
    body: '{"max_completion_tokens": 8192, "messages": [{"content": "You are an AI
      assistant that generates test code for given requirements.", "role": "system"},
      {"content": "\nBased on the following requirements, references, and code, generate
      one test case per given requirement that exercises it.\n\nTest framework reference:\n##
      Test Case Format\nThe format of a test case is as follows:\n{\n    \"test_name\":
      <some descriptive test name>,\n    \"test_description\": <more details about
      the test>\n    \"requirement_id\": <requirement being tested by this test> (optional)\n    \"unit_name\":
      <unit_name>,\n    \"subprogram_name\": <subprogram_name>,\n    \"input_values\":
      [\n        { \"identifier\": <identifier>, \"value\": <value> },\n        ...\n    ],\n    \"expected_values\":
      [\n        { \"identifier\": <identifier>, \"value\": <value> },\n        ...\n    ]\n}\n\n###
      Identifier and Value Syntax\nThe following sections describe the syntax for
      specifying the `identifier` and `value` fields in the test case format. `unit_name`
      and `subprogram_name` refer to file names of C/C++ files (without extension)
      and function names in these files respectively (to refer to methods in classes
      use `<class name>::<method name>`). It is only possible to include identifiers
      from different units and other subprograms if they are called/used in the subprogram
      being tested.\n\n#### Numeric Types\n- Assign the number directly.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.parameter\", \"value\": \"42\" }\n    { \"identifier\":
      \"unit.subprogram.parameter\", \"value\": \"84\" }\n\n#### Structure Types\n-
      Use the standard C syntax to refer to fields within structures.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.struct_param.field\", \"value\": \"CAESAR\"
      }\n    { \"identifier\": \"unit.subprogram.struct_param.field\", \"value\":
      \"STEAK\" }\n\n#### Enumeration Types\n- Use the enumeral value directly.\n  -
      Example:\n    { \"identifier\": \"unit.subprogram.enum_param\", \"value\": \"ENUM_VALUE\"
      }\n\n#### Character and String Types\n- Use standard C delimiters for characters
      and strings.\n  - Example:\n    { \"identifier\": \"unit.subprogram.char_param\",
      \"value\": \"''a''\" }\n    { \"identifier\": \"unit.subprogram.string_param\",
      \"value\": \"\\\"Hello, World\\\"\" }\n- Treat strings as atomic values to set.
      Do not attempt to treat them as a char array, i.e., do not malloc or attempt
      to access chars at individual indices.\n\n#### Pointer and Array Types\n- For
      constrained arrays, specify the index and value.\n  - Example:\n    { \"identifier\":
      \"unit.subprogram.array_param[2]\", \"value\": \"42\" }\n- For unconstrained
      arrays, use `<<malloc [amount of slots to allocate as integer]>>` to allocate
      memory.\n  - Example:\n    { \"identifier\": \"unit.subprogram.array_param\",
      \"value\": \"<<malloc 2>>\" }\n    { \"identifier\": \"unit.subprogram.array_param[1]\",
      \"value\": \"3\" }\n- For pointers, use index 0 to access it (generally pointers
      and unconstrained arrays are the same after all)\n  - Example:\n    { \"identifier\":
      \"unit.subprogram.ptr_param[0]\", \"value\": \"12\" }\n- If you want to make
      something null then use `<<null>>`.\n  - Example:\n    { \"identifier\": \"unit.subprogram.pointer_param\",
      \"value\": \"<<null>>\" }\n    or\n    { \"identifier\": \"unit.subprogram.array_param\",
      \"value\": \"<<null>>\" }\n\n#### Function Return Parameters\n- Use the keyword
      `return` for function return values.\n  - Example:\n    { \"identifier\": \"unit.subprogram.return\",
      \"value\": \"23.0\" }\n\n#### Global Objects\n- Use the syntax `UNIT.<<GLOBAL>>.OBJECT`
      to set values for global objects.\n  - Example:\n    { \"identifier\": \"unit.<<GLOBAL>>.global_object.field\",
      \"value\": \"VALUE\" }\n- Note: `UNIT.OBJECT` is NEVER valid syntax\n\n#####
      Classes\n- To set and expect values of methods in a class (unlike standalone
      subprograms), it is necessary to first instantiate a base object using a constructor\n-
      Use the syntax `UNIT.<<GLOBAL>>.(cl).CLASS_NAME.SUBCLASS_NAME.<<constructor>>.<<call>>`
      to call the constructor of `SUBCLASS` to instantiate a `CLASS` object\n  - Example:\n    {
      \"identifier\": \"unit.<<GLOBAL>>.(cl).class_name.class_name.<<constructor>>.<<call>>\",
      \"value\": \"0\" }\n  - Note: The value in this case is irrelevant and always
      set to 0.\n- To set and expect member variables of a constructed object use
      the syntax `UNIT.<<GLOBAL>>.(cl).CLASS_NAME.SUBCLASS_NAME.MEMBER_NAME`\n  -
      Example:\n    { \"identifier\": \"unit.<<GLOBAL>>.(cl).class_name.class_name.member\",
      \"value\": \"test\" }\n  - Note: If the member is a structured entity like a
      struct or a class instance you can access the subfields like described in the
      `Structure Types` section.\n- To set and expect arguments and return values
      of methods in a class use the name do so like you would for regular subprograms
      except that you prefix the name with the class name and `::`\n  - Example:\n    {
      \"identifier\": \"unit.class_name::member_method.parameter\", \"value\": \"2\"
      }\n  - Note: If you use this ALWAYS first call the class constructor!\n\n####
      Range of Values for Input Data\n- Use range expressions to test a range of values.\n  -
      Example:\n    { \"identifier\": \"unit.subprogram.parameter\", \"value\": \"vary
      from: 0.0 to: 90.0 by: 0.1\" }\n\n#### Range of Values for Expected Results\n-
      Use the syntax `<min> .. <max>` for expected value ranges.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.parameter\", \"value\": \"257.1 .. 259.9\"
      }\n\n#### List of Values\n- Use a comma-separated list for multiple values.\n  -
      Example:\n    { \"identifier\": \"unit.subprogram.parameter\", \"value\": \"1,2,4\"
      }\n- Use parentheses for repeated values.\n  - Example:\n    { \"identifier\":
      \"unit.subprogram.parameter\", \"value\": \"1,(4)2,4\" }\n- Note: This is used
      in case something needs to be set multiple times (like for a stub return) during
      one call, NOT to specify values in an array. To do so, use the regular index
      syntax as outlined above instead.\n\n#### Working with Overloaded Subprograms\n-
      Append the parameter type list to the subprogram name.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram(int).parameter\", \"value\": \"3\" }\n    {
      \"identifier\": \"unit.subprogram(char).parameter\", \"value\": \"''d''\" }\n\n####
      Boolean Values\n- Use `1` for `true` and `0` for `false`.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.boolean_param\", \"value\": \"1\" }\n    {
      \"identifier\": \"unit.subprogram.boolean_param\", \"value\": \"0\" }\n\n####
      Accessing Subprograms Outside the Unit\n- Use `uut_prototype_stubs` as the unit
      for subprograms defined outside of the unit of the test case.\n  - Example:\n    {
      \"identifier\": \"uut_prototype_stubs.name_of_external_subprogram.parameter\",
      \"value\": \"42\" }\n\n#### Emulating stubbed pointer manipulating functions\n-
      Normally it is easy to emulate a stubbed function returning some value (by setting
      the return value of the stubbed function)\n- This is not possible if the stubbed
      function works with pointers as only values can be specified (so only ever the
      contents of a pointer), e.g., functions like memcpy\n- Therefore, in these cases
      you can emulate the stubbed function setting the contents of the pointer using
      <<pointer value_to_set>>\n  - For example assume we have a pointer input variable
      *float x that is modified by a stubbed called to foo(*float pointer_to_modify),
      i.e., foo(x). Then you can change the value, i.e., *x to 10 like so:\n    {
      \"identifier\": \"uut_prototype_stubs.foo.pointer_to_modify\", \"value\": \"<<pointer
      10>>\" }\n  - The other input values of the function of course do not need to
      be specified explicitly (unless you also want to see the values of those input
      pointers)\n- You can only set one variable like this per test case due to technical
      reasons so choose wisely (if you use this feature)\n\n#### Emulating multiple
      function calls\n- Use the multiple value syntax, one value will be read everytime
      the stubbed function is called\n  - Example (foo is called twice, and should
      return 2 the first time and 3 the second):\n    { \"identifier\": \"uut_prototype_stubs.foo.return\",
      \"value\": \"2,3\" }\n\n## Test Case Execution\n1. The test framework will call
      the specified subprogram/function\n2. When a value of a variable would be read,
      if it is specified as a test value, it is set to that value instead\n3. After
      the subprogram finishes, the expected values are checked against the actual
      values at that point\n\nAll tests are executed in isolation. The execution of
      one test does not influence the execution of others.\n\n### Stubbing behaviour\n-
      All function calls from external files, i.e, those referenced with `uut_prototype_stubs`
      are stubbed automatically and do not implement any behaviour. Setting their
      input values has no effect on their output values (instead default values are
      output unless you specify values for them).\n- If any of the parameters or return
      value of a called function (which is not automatically stubbed as outlined above)
      are set or expected to be some value using an identifier, the function will
      be stubbed during execution and not implement any behaviour. In this case it
      is forbidden to also expect the return value to equal something (it won''t as
      the function will be stubbed).\n  - If none are set or expected the function
      will execute as normal\n\n### Default identifier values and initialization\n-
      In general any value not set (input of course), will fall back to a default
      value. However this should be avoided to prevent undefined behaviour. This means
      all input variables (and outputs of stubbed values) should be exhaustively described.\n-
      Do not set an identifier multiple times, it just results in overriding of the
      previous value\n- To access methods of a class and set values it is imperative
      to first instantiate the class using a constructor. For all classes a default
      object is ready to be initialized if needed using the respective constructor.\n-
      Similarly, arrays or pointers should always be allocated\n\n## Examples\n\nLet''s
      consider a more complex C++ code snippet in a file named `data_processor.cpp`:\n\n```cpp\n//
      File: data_processor.cpp\n// Unit: data_processor\n\ntypedef struct {\n    int
      id;\n    float value;\n    char status;\n} DataRecord;\n\ntypedef enum {\n    MODE_NORMAL
      = 0,\n    MODE_DEBUG = 1,\n    MODE_ERROR = 2\n} ProcessingMode;\n\n// External
      function declarations\nextern int validate_record(DataRecord* record);\nextern
      void log_error(const char* message);\nextern DataRecord* allocate_buffer(int
      size);\n\nProcessingMode current_mode = MODE_NORMAL;\n\nint process_data_array(DataRecord*
      input_array, int array_size, DataRecord** output_array) {\n    if (input_array
      == NULL || array_size <= 0) {\n        if (current_mode == MODE_DEBUG) {\n            log_error(\"Invalid
      input parameters\");\n        }\n        return -1;\n    }\n    \n    // Allocate
      output buffer\n    *output_array = allocate_buffer(array_size);\n    if (*output_array
      == NULL) {\n        log_error(\"Memory allocation failed\");\n        return
      -2;\n    }\n    \n    int processed_count = 0;\n    for (int i = 0; i < array_size;
      i++) {\n        // Validate each record using external function\n        int
      validation_result = validate_record(&input_array[i]);\n        \n        if
      (validation_result > 0) {\n            // Copy valid record to output with modified
      value\n            (*output_array)[processed_count].id = input_array[i].id;\n            (*output_array)[processed_count].value
      = input_array[i].value * 1.5f;\n            (*output_array)[processed_count].status
      = ''V''; // Valid\n            processed_count++;\n        } else if (current_mode
      == MODE_ERROR) {\n            // In error mode, stop processing on first invalid
      record\n            log_error(\"Invalid record encountered in error mode\");\n            return
      processed_count;\n        }\n        // In normal mode, skip invalid records
      and continue\n    }\n    \n    return processed_count;\n}\n```\n\n### Example
      1: Testing Null Input Handling with Branching\n\n**Requirement REQ-DP-001:**
      The `process_data_array` function shall return -1 when input_array is NULL and
      log an error message if in DEBUG mode.\n\n```json\n{\n  \"test_name\": \"Test_Null_Input_Debug_Mode\",\n  \"test_description\":
      \"Tests process_data_array with NULL input in DEBUG mode to ensure it returns
      -1 and calls log_error.\",\n  \"requirement_id\": \"REQ-DP-001\",\n  \"unit_name\":
      \"data_processor\",\n  \"subprogram_name\": \"process_data_array\",\n  \"input_values\":
      [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\", \"value\":
      \"MODE_DEBUG\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<null>>\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"5\" },\n  ],\n  \"expected_values\": [\n    { \"identifier\": \"uut_prototype_stubs.log_error.message\",
      \"value\": \"\\\"Invalid input parameters\\\"\" },\n    { \"identifier\": \"data_processor.process_data_array.return\",
      \"value\": \"-1\" }\n  ]\n}\n```\n\n### Example 2: Testing Memory Allocation
      with Stubbing\n\n**Requirement REQ-DP-002:** The `process_data_array` function
      shall return -2 and log an error when memory allocation fails.\n\n```json\n{\n  \"test_name\":
      \"Test_Memory_Allocation_Failure\",\n  \"test_description\": \"Tests process_data_array
      when allocate_buffer returns NULL to ensure proper error handling.\",\n  \"requirement_id\":
      \"REQ-DP-002\",\n  \"unit_name\": \"data_processor\",\n  \"subprogram_name\":
      \"process_data_array\",\n  \"input_values\": [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\",
      \"value\": \"MODE_NORMAL\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<malloc 1>>\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].id\",
      \"value\": \"1\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].value\",
      \"value\": \"10.5\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].status\",
      \"value\": \"''A''\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"2\" },\n    { \"identifier\": \"uut_prototype_stubs.allocate_buffer.return\",
      \"value\": \"<<null>>\" },\n  ],\n  \"expected_values\": [\n    { \"identifier\":
      \"uut_prototype_stubs.log_error.message\", \"value\": \"\\\"Memory allocation
      failed\\\"\" },\n    { \"identifier\": \"data_processor.process_data_array.return\",
      \"value\": \"-2\" }\n  ]\n}\n```\n\n### Example 3: Testing Complex Processing
      with Multiple Stubs\n\n**Requirement REQ-DP-003:** The `process_data_array`
      function shall process valid records by multiplying their values by 1.5 and
      setting status to ''V''.\n\n```json\n{\n  \"test_name\": \"Test_Valid_Record_Processing\",\n  \"test_description\":
      \"Tests process_data_array with mixed valid/invalid records to ensure proper
      processing and output.\",\n  \"requirement_id\": \"REQ-DP-003\",\n  \"unit_name\":
      \"data_processor\",\n  \"subprogram_name\": \"process_data_array\",\n  \"input_values\":
      [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\", \"value\":
      \"MODE_NORMAL\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].id\",
      \"value\": \"100\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].value\",
      \"value\": \"20.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].status\",
      \"value\": \"''A''\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].id\",
      \"value\": \"200\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].status\",
      \"value\": \"''B''\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[2].id\",
      \"value\": \"300\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[2].value\",
      \"value\": \"40.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[2].status\",
      \"value\": \"''C''\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"3\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0]\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"uut_prototype_stubs.validate_record.return\",
      \"value\": \"1,0,1\" }\n  ],\n  \"expected_values\": [\n    { \"identifier\":
      \"data_processor.process_data_array.return\", \"value\": \"2\" },\n    { \"identifier\":
      \"data_processor.process_data_array.output_array[0][0].id\", \"value\": \"100\"
      },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].status\",
      \"value\": \"''V''\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][1].id\",
      \"value\": \"300\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][1].value\",
      \"value\": \"60.0\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][1].status\",
      \"value\": \"''V''\" }\n  ]\n}\n```\n\n### Example 4: Testing Error Mode with
      Early Termination\n\n**Requirement REQ-DP-004:** The `process_data_array` function
      shall stop processing and return the current count when an invalid record is
      encountered in ERROR mode.\n\n```json\n{\n  \"test_name\": \"Test_Error_Mode_Early_Termination\",\n  \"test_description\":
      \"Tests process_data_array in ERROR mode to ensure it stops processing on first
      invalid record.\",\n  \"requirement_id\": \"REQ-DP-004\",\n  \"unit_name\":
      \"data_processor\",\n  \"subprogram_name\": \"process_data_array\",\n  \"input_values\":
      [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\", \"value\":
      \"MODE_ERROR\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].id\",
      \"value\": \"100\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].value\",
      \"value\": \"20.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].id\",
      \"value\": \"200\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"3\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0]\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"uut_prototype_stubs.allocate_buffer.size\",
      \"value\": \"3\" },\n    { \"identifier\": \"uut_prototype_stubs.validate_record.return\",
      \"value\": \"1,-1\" },\n  ],\n  \"expected_values\": [\n    { \"identifier\":
      \"uut_prototype_stubs.log_error.message\", \"value\": \"\\\"Invalid record encountered
      in error mode\\\"\" },\n    { \"identifier\": \"data_processor.process_data_array.return\",
      \"value\": \"1\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].id\",
      \"value\": \"100\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].status\",
      \"value\": \"''V''\" }\n  ]\n}\n```\n\nRelevant Code:\n```cpp\n// Unit: manager\n\n//
      Definitions of types, called functions and data structures:\n\ntypedef char
      name_type[32];\n\nstatic name_type WaitingList[10];\n\nstatic unsigned int WaitingListIndex
      = 0;\n\n// Code for Get_Next_Party_To_Be_Seated:\nchar* Get_Next_Party_To_Be_Seated(void)\n{\n  if(WaitingListIndex
      > 9)\n    WaitingListIndex = 0;\n  return WaitingList[WaitingListIndex++];\n}\n```\n\nExample
      Test Cases:\n```json\n[\n  {\n    \"test_name\": \"BASIS-PATH-001\",\n    \"test_description\":
      \"This is an automatically generated test case.\\nTest Path 1\\n(1) if (WaitingListIndex
      > (9)) ==> FALSE\\nTest Case Generation Notes:\",\n    \"unit_name\": \"manager\",\n    \"subprogram_name\":
      \"Get_Next_Party_To_Be_Seated\",\n    \"input_values\": [\n      {\n        \"identifier\":
      \"manager.<<GLOBAL>>.WaitingListIndex\",\n        \"value\": \"<<MIN>>\"\n      }\n    ],\n    \"expected_values\":
      [],\n    \"requirement_id\": null\n  }\n]\n```\n\nRequirements:\n1. FR25.1:
      The system will provide a means of obtaining the name of the party at the head
      of the waiting list.\n2. FR26.1: The head of the waiting list shall be reset
      when it reaches the end of the waiting list.\n\nDetailed task description:\nBased
      on the above requirements and code, generate unit tests that exercise all requirements.\nMake
      sure the generated test cases clearly test the provided requirements.\n\nSolve
      the problem using the following approach:\nFor each requirement in order...\n    1.
      Come up with descriptive (unique) name for the test case and describe in natural
      language how this test exercises the requirement\n    2. Provide the name of
      the unit being tested (base file name without extension) and the name of the
      subprogram being tested (function name)\n    3. Provide the input and expected
      values by providing the correct identifier and value in the syntax outlined
      above.\n\nYou are allowed to use the following identifiers in your test case:\n-
      manager.<<GLOBAL>>.WaitingListIndex\n- manager.<<GLOBAL>>.WaitingList[i] (for
      all: i in 0..9)\n- manager.Get_Next_Party_To_Be_Seated.return\n\nYou MUST set
      an input value for all input to the functions, used globals and called stubs.\nIf
      you do not ensure this, it can happen that your test does not cover the correct
      path corresponding to the requirement.\nAn expected value is not required for
      all identifiers. Only for those relevant to the requirement.\n\n\nNotes:\n-
      You are NOT allowed to invent any syntax that is not specified in the syntax
      reference. Stick to the syntax provided.\n- You are NOT allowed to invent any
      units or functions that are not present in the provided code.\n- This is a highly
      critical task, please ensure that the test cases are correct and complete and
      do not contain any logical or syntactical errors.\n- Test cases are independent
      of each other, i.e., they should not rely on one being run before the other
      (or environment being modified by one).\n- Generate exactly one test case per
      requirement.\n- In case the requirement and the code differ, the requirement
      is what you should test, i.e., it is the source of truth.\n- It might be that
      some of the provided code context and identifiers are incorrect. Use the most
      obviously correct parts of both and ignore the rest.\n\nReturn your answer in
      the following format:\n```json\n{\n    \"test_case_for_requirement_1\": <test
      case testing the first requirement in the list>,\n    \"test_case_for_requirement_2\":
      <test case testing the second requirement in the list>,\n    ...\n}\n```\n",
      "role": "user"}], "model": "gpt-4.1", "response_format": {"json_schema": {"name":
      "TestGenerationResult", "schema": {"$defs": {"ExpectedValueMapping": {"additionalProperties":
      false, "properties": {"identifier": {"$ref": "#/$defs/Identifier"}, "value":
      {"title": "Value", "type": "string"}}, "required": ["identifier", "value"],
      "title": "ExpectedValueMapping", "type": "object"}, "Identifier": {"enum": ["manager.<<GLOBAL>>.WaitingListIndex",
      "manager.<<GLOBAL>>.WaitingList[0]", "manager.<<GLOBAL>>.WaitingList[1]", "manager.<<GLOBAL>>.WaitingList[2]",
      "manager.<<GLOBAL>>.WaitingList[3]", "manager.<<GLOBAL>>.WaitingList[4]", "manager.<<GLOBAL>>.WaitingList[5]",
      "manager.<<GLOBAL>>.WaitingList[6]", "manager.<<GLOBAL>>.WaitingList[7]", "manager.<<GLOBAL>>.WaitingList[8]",
      "manager.<<GLOBAL>>.WaitingList[9]", "manager.Get_Next_Party_To_Be_Seated.return"],
      "title": "Identifier", "type": "string"}, "InputValueMapping": {"additionalProperties":
      false, "properties": {"identifier": {"$ref": "#/$defs/Identifier"}, "value":
      {"title": "Value", "type": "string"}}, "required": ["identifier", "value"],
      "title": "InputValueMapping", "type": "object"}, "TestCase": {"additionalProperties":
      false, "properties": {"expected_values": {"items": {"$ref": "#/$defs/ExpectedValueMapping"},
      "title": "Expected Values", "type": "array"}, "input_values": {"items": {"$ref":
      "#/$defs/InputValueMapping"}, "title": "Input Values", "type": "array"}, "requirement_id":
      {"title": "Requirement Id", "type": "string"}, "subprogram_name": {"title":
      "Subprogram Name", "type": "string"}, "test_description": {"title": "Test Description",
      "type": "string"}, "test_name": {"title": "Test Name", "type": "string"}, "unit_name":
      {"title": "Unit Name", "type": "string"}}, "required": ["test_name", "test_description",
      "requirement_id", "unit_name", "subprogram_name", "input_values", "expected_values"],
      "title": "TestCase", "type": "object"}}, "additionalProperties": false, "properties":
      {"test_case_for_requirement": {"$ref": "#/$defs/TestCase"}}, "required": ["test_case_for_requirement",
      "test_case_for_requirement"], "title": "TestGenerationResult", "type": "object"},
      "strict": true}, "type": "json_schema"}, "seed": 42, "stream": false, "temperature":
      0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      api-key:
      - REDACTED
      authorization:
      - REDACTED
      connection:
      - keep-alive
      content-length:
      - '25550'
      content-type:
      - application/json
      host:
      - REDACTED
      user-agent:
      - AsyncAzureOpenAI/Python 1.58.1
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-helper-method:
      - beta.chat.completions.parse
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.58.1
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.12
    method: POST
    uri: https://rg-rds-play-openai-pes-ppt.openai.azure.com/openai/deployments/gpt-4.1/chat/completions?api-version=2024-12-01-preview
  response:
    body:
      string: '{"choices":[{"content_filter_results":{"hate":{"filtered":false,"severity":"safe"},"protected_material_code":{"filtered":false,"detected":false},"protected_material_text":{"filtered":false,"detected":false},"self_harm":{"filtered":false,"severity":"safe"},"sexual":{"filtered":false,"severity":"safe"},"violence":{"filtered":false,"severity":"safe"}},"finish_reason":"stop","index":0,"logprobs":null,"message":{"annotations":[],"content":"{\n  \"test_case_for_requirement_1\":
        {\n    \"test_name\": \"Get_Head_Of_Waiting_List_Returns_Correct_Name\",\n    \"test_description\":
        \"Tests that Get_Next_Party_To_Be_Seated returns the name of the party at
        the head of the waiting list (index 0) and increments the index. This exercises
        the system''s ability to provide the name at the head of the waiting list
        as required by FR25.1.\",\n    \"requirement_id\": \"FR25.1\",\n    \"unit_name\":
        \"manager\",\n    \"subprogram_name\": \"Get_Next_Party_To_Be_Seated\",\n    \"input_values\":
        [\n      { \"identifier\": \"manager.\u003c\u003cGLOBAL\u003e\u003e.WaitingListIndex\",
        \"value\": \"0\" },\n      { \"identifier\": \"manager.\u003c\u003cGLOBAL\u003e\u003e.WaitingList[0]\",
        \"value\": \"\\\"Smith\\\"\" },\n      { \"identifier\": \"manager.\u003c\u003cGLOBAL\u003e\u003e.WaitingList[1]\",
        \"value\": \"\\\"Johnson\\\"\" },\n      { \"identifier\": \"manager.\u003c\u003cGLOBAL\u003e\u003e.WaitingList[2]\",
        \"value\": \"\\\"Williams\\\"\" },\n      { \"identifier\": \"manager.\u003c\u003cGLOBAL\u003e\u003e.WaitingList[3]\",
        \"value\": \"\\\"Brown\\\"\" },\n      { \"identifier\": \"manager.\u003c\u003cGLOBAL\u003e\u003e.WaitingList[4]\",
        \"value\": \"\\\"Jones\\\"\" },\n      { \"identifier\": \"manager.\u003c\u003cGLOBAL\u003e\u003e.WaitingList[5]\",
        \"value\": \"\\\"Garcia\\\"\" },\n      { \"identifier\": \"manager.\u003c\u003cGLOBAL\u003e\u003e.WaitingList[6]\",
        \"value\": \"\\\"Miller\\\"\" },\n      { \"identifier\": \"manager.\u003c\u003cGLOBAL\u003e\u003e.WaitingList[7]\",
        \"value\": \"\\\"Davis\\\"\" },\n      { \"identifier\": \"manager.\u003c\u003cGLOBAL\u003e\u003e.WaitingList[8]\",
        \"value\": \"\\\"Rodriguez\\\"\" },\n      { \"identifier\": \"manager.\u003c\u003cGLOBAL\u003e\u003e.WaitingList[9]\",
        \"value\": \"\\\"Martinez\\\"\" }\n    ],\n    \"expected_values\": [\n      {
        \"identifier\": \"manager.Get_Next_Party_To_Be_Seated.return\", \"value\":
        \"\\\"Smith\\\"\" },\n      { \"identifier\": \"manager.\u003c\u003cGLOBAL\u003e\u003e.WaitingListIndex\",
        \"value\": \"1\" }\n    ]\n  },\n  \"test_case_for_requirement_2\": {\n    \"test_name\":
        \"WaitingListIndex_Resets_After_End_Of_List\",\n    \"test_description\":
        \"Tests that when the WaitingListIndex exceeds the end of the waiting list
        (greater than 9), the head of the waiting list is reset to 0 and the correct
        party name is returned. This exercises the reset behavior required by FR26.1.\",\n    \"requirement_id\":
        \"FR26.1\",\n    \"unit_name\": \"manager\",\n    \"subprogram_name\": \"Get_Next_Party_To_Be_Seated\",\n    \"input_values\":
        [\n      { \"identifier\": \"manager.\u003c\u003cGLOBAL\u003e\u003e.WaitingListIndex\",
        \"value\": \"10\" },\n      { \"identifier\": \"manager.\u003c\u003cGLOBAL\u003e\u003e.WaitingList[0]\",
        \"value\": \"\\\"Smith\\\"\" },\n      { \"identifier\": \"manager.\u003c\u003cGLOBAL\u003e\u003e.WaitingList[1]\",
        \"value\": \"\\\"Johnson\\\"\" },\n      { \"identifier\": \"manager.\u003c\u003cGLOBAL\u003e\u003e.WaitingList[2]\",
        \"value\": \"\\\"Williams\\\"\" },\n      { \"identifier\": \"manager.\u003c\u003cGLOBAL\u003e\u003e.WaitingList[3]\",
        \"value\": \"\\\"Brown\\\"\" },\n      { \"identifier\": \"manager.\u003c\u003cGLOBAL\u003e\u003e.WaitingList[4]\",
        \"value\": \"\\\"Jones\\\"\" },\n      { \"identifier\": \"manager.\u003c\u003cGLOBAL\u003e\u003e.WaitingList[5]\",
        \"value\": \"\\\"Garcia\\\"\" },\n      { \"identifier\": \"manager.\u003c\u003cGLOBAL\u003e\u003e.WaitingList[6]\",
        \"value\": \"\\\"Miller\\\"\" },\n      { \"identifier\": \"manager.\u003c\u003cGLOBAL\u003e\u003e.WaitingList[7]\",
        \"value\": \"\\\"Davis\\\"\" },\n      { \"identifier\": \"manager.\u003c\u003cGLOBAL\u003e\u003e.WaitingList[8]\",
        \"value\": \"\\\"Rodriguez\\\"\" },\n      { \"identifier\": \"manager.\u003c\u003cGLOBAL\u003e\u003e.WaitingList[9]\",
        \"value\": \"\\\"Martinez\\\"\" }\n    ],\n    \"expected_values\": [\n      {
        \"identifier\": \"manager.\u003c\u003cGLOBAL\u003e\u003e.WaitingListIndex\",
        \"value\": \"1\" },\n      { \"identifier\": \"manager.Get_Next_Party_To_Be_Seated.return\",
        \"value\": \"\\\"Smith\\\"\" }\n    ]\n  }\n}","refusal":null,"role":"assistant"}}],"created":1752564162,"id":"chatcmpl-BtUHqpL3cYZugcq9leEiLIPknZbWy","model":"gpt-4.1-2025-04-14","object":"chat.completion","prompt_filter_results":[{"prompt_index":0,"content_filter_results":{"hate":{"filtered":false,"severity":"safe"},"jailbreak":{"filtered":false,"detected":false},"self_harm":{"filtered":false,"severity":"safe"},"sexual":{"filtered":false,"severity":"safe"},"violence":{"filtered":false,"severity":"safe"}}}],"system_fingerprint":"fp_07e970ab25","usage":{"completion_tokens":939,"completion_tokens_details":{"accepted_prediction_tokens":0,"audio_tokens":0,"reasoning_tokens":0,"rejected_prediction_tokens":0},"prompt_tokens":5779,"prompt_tokens_details":{"audio_tokens":0,"cached_tokens":0},"total_tokens":6718}}

        '
    headers:
      Content-Length:
      - '5354'
      Content-Type:
      - application/json
      Date:
      - Tue, 15 Jul 2025 07:22:48 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      apim-request-id:
      - 6b060429-cf20-4161-9b37-3d14b8a13c2f
      azureml-model-session:
      - d070-20250625140329
      cmp-upstream-response-duration:
      - '6621'
      x-accel-buffering:
      - 'no'
      x-content-type-options:
      - nosniff
      x-ms-deployment-name:
      - gpt-4.1
      x-ms-rai-invoked:
      - 'true'
      x-ms-region:
      - Sweden Central
      x-ratelimit-limit-requests:
      - '1006'
      x-ratelimit-limit-tokens:
      - '1006000'
      x-ratelimit-remaining-requests:
      - '1002'
      x-ratelimit-remaining-tokens:
      - '982326'
      x-request-id:
      - 1a88296c-cb3b-428e-86b3-32040e74f8ee
    status:
      code: 200
      message: OK
- request:
    body: '{"max_completion_tokens": 8192, "messages": [{"content": "You are an AI
      assistant that generates test code for given requirements.", "role": "system"},
      {"content": "\nBased on the following requirements, references, and code, generate
      one test case per given requirement that exercises it.\n\nTest framework reference:\n##
      Test Case Format\nThe format of a test case is as follows:\n{\n    \"test_name\":
      <some descriptive test name>,\n    \"test_description\": <more details about
      the test>\n    \"requirement_id\": <requirement being tested by this test> (optional)\n    \"unit_name\":
      <unit_name>,\n    \"subprogram_name\": <subprogram_name>,\n    \"input_values\":
      [\n        { \"identifier\": <identifier>, \"value\": <value> },\n        ...\n    ],\n    \"expected_values\":
      [\n        { \"identifier\": <identifier>, \"value\": <value> },\n        ...\n    ]\n}\n\n###
      Identifier and Value Syntax\nThe following sections describe the syntax for
      specifying the `identifier` and `value` fields in the test case format. `unit_name`
      and `subprogram_name` refer to file names of C/C++ files (without extension)
      and function names in these files respectively (to refer to methods in classes
      use `<class name>::<method name>`). It is only possible to include identifiers
      from different units and other subprograms if they are called/used in the subprogram
      being tested.\n\n#### Numeric Types\n- Assign the number directly.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.parameter\", \"value\": \"42\" }\n    { \"identifier\":
      \"unit.subprogram.parameter\", \"value\": \"84\" }\n\n#### Structure Types\n-
      Use the standard C syntax to refer to fields within structures.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.struct_param.field\", \"value\": \"CAESAR\"
      }\n    { \"identifier\": \"unit.subprogram.struct_param.field\", \"value\":
      \"STEAK\" }\n\n#### Enumeration Types\n- Use the enumeral value directly.\n  -
      Example:\n    { \"identifier\": \"unit.subprogram.enum_param\", \"value\": \"ENUM_VALUE\"
      }\n\n#### Character and String Types\n- Use standard C delimiters for characters
      and strings.\n  - Example:\n    { \"identifier\": \"unit.subprogram.char_param\",
      \"value\": \"''a''\" }\n    { \"identifier\": \"unit.subprogram.string_param\",
      \"value\": \"\\\"Hello, World\\\"\" }\n- Treat strings as atomic values to set.
      Do not attempt to treat them as a char array, i.e., do not malloc or attempt
      to access chars at individual indices.\n\n#### Pointer and Array Types\n- For
      constrained arrays, specify the index and value.\n  - Example:\n    { \"identifier\":
      \"unit.subprogram.array_param[2]\", \"value\": \"42\" }\n- For unconstrained
      arrays, use `<<malloc [amount of slots to allocate as integer]>>` to allocate
      memory.\n  - Example:\n    { \"identifier\": \"unit.subprogram.array_param\",
      \"value\": \"<<malloc 2>>\" }\n    { \"identifier\": \"unit.subprogram.array_param[1]\",
      \"value\": \"3\" }\n- For pointers, use index 0 to access it (generally pointers
      and unconstrained arrays are the same after all)\n  - Example:\n    { \"identifier\":
      \"unit.subprogram.ptr_param[0]\", \"value\": \"12\" }\n- If you want to make
      something null then use `<<null>>`.\n  - Example:\n    { \"identifier\": \"unit.subprogram.pointer_param\",
      \"value\": \"<<null>>\" }\n    or\n    { \"identifier\": \"unit.subprogram.array_param\",
      \"value\": \"<<null>>\" }\n\n#### Function Return Parameters\n- Use the keyword
      `return` for function return values.\n  - Example:\n    { \"identifier\": \"unit.subprogram.return\",
      \"value\": \"23.0\" }\n\n#### Global Objects\n- Use the syntax `UNIT.<<GLOBAL>>.OBJECT`
      to set values for global objects.\n  - Example:\n    { \"identifier\": \"unit.<<GLOBAL>>.global_object.field\",
      \"value\": \"VALUE\" }\n- Note: `UNIT.OBJECT` is NEVER valid syntax\n\n#####
      Classes\n- To set and expect values of methods in a class (unlike standalone
      subprograms), it is necessary to first instantiate a base object using a constructor\n-
      Use the syntax `UNIT.<<GLOBAL>>.(cl).CLASS_NAME.SUBCLASS_NAME.<<constructor>>.<<call>>`
      to call the constructor of `SUBCLASS` to instantiate a `CLASS` object\n  - Example:\n    {
      \"identifier\": \"unit.<<GLOBAL>>.(cl).class_name.class_name.<<constructor>>.<<call>>\",
      \"value\": \"0\" }\n  - Note: The value in this case is irrelevant and always
      set to 0.\n- To set and expect member variables of a constructed object use
      the syntax `UNIT.<<GLOBAL>>.(cl).CLASS_NAME.SUBCLASS_NAME.MEMBER_NAME`\n  -
      Example:\n    { \"identifier\": \"unit.<<GLOBAL>>.(cl).class_name.class_name.member\",
      \"value\": \"test\" }\n  - Note: If the member is a structured entity like a
      struct or a class instance you can access the subfields like described in the
      `Structure Types` section.\n- To set and expect arguments and return values
      of methods in a class use the name do so like you would for regular subprograms
      except that you prefix the name with the class name and `::`\n  - Example:\n    {
      \"identifier\": \"unit.class_name::member_method.parameter\", \"value\": \"2\"
      }\n  - Note: If you use this ALWAYS first call the class constructor!\n\n####
      Range of Values for Input Data\n- Use range expressions to test a range of values.\n  -
      Example:\n    { \"identifier\": \"unit.subprogram.parameter\", \"value\": \"vary
      from: 0.0 to: 90.0 by: 0.1\" }\n\n#### Range of Values for Expected Results\n-
      Use the syntax `<min> .. <max>` for expected value ranges.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.parameter\", \"value\": \"257.1 .. 259.9\"
      }\n\n#### List of Values\n- Use a comma-separated list for multiple values.\n  -
      Example:\n    { \"identifier\": \"unit.subprogram.parameter\", \"value\": \"1,2,4\"
      }\n- Use parentheses for repeated values.\n  - Example:\n    { \"identifier\":
      \"unit.subprogram.parameter\", \"value\": \"1,(4)2,4\" }\n- Note: This is used
      in case something needs to be set multiple times (like for a stub return) during
      one call, NOT to specify values in an array. To do so, use the regular index
      syntax as outlined above instead.\n\n#### Working with Overloaded Subprograms\n-
      Append the parameter type list to the subprogram name.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram(int).parameter\", \"value\": \"3\" }\n    {
      \"identifier\": \"unit.subprogram(char).parameter\", \"value\": \"''d''\" }\n\n####
      Boolean Values\n- Use `1` for `true` and `0` for `false`.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.boolean_param\", \"value\": \"1\" }\n    {
      \"identifier\": \"unit.subprogram.boolean_param\", \"value\": \"0\" }\n\n####
      Accessing Subprograms Outside the Unit\n- Use `uut_prototype_stubs` as the unit
      for subprograms defined outside of the unit of the test case.\n  - Example:\n    {
      \"identifier\": \"uut_prototype_stubs.name_of_external_subprogram.parameter\",
      \"value\": \"42\" }\n\n#### Emulating stubbed pointer manipulating functions\n-
      Normally it is easy to emulate a stubbed function returning some value (by setting
      the return value of the stubbed function)\n- This is not possible if the stubbed
      function works with pointers as only values can be specified (so only ever the
      contents of a pointer), e.g., functions like memcpy\n- Therefore, in these cases
      you can emulate the stubbed function setting the contents of the pointer using
      <<pointer value_to_set>>\n  - For example assume we have a pointer input variable
      *float x that is modified by a stubbed called to foo(*float pointer_to_modify),
      i.e., foo(x). Then you can change the value, i.e., *x to 10 like so:\n    {
      \"identifier\": \"uut_prototype_stubs.foo.pointer_to_modify\", \"value\": \"<<pointer
      10>>\" }\n  - The other input values of the function of course do not need to
      be specified explicitly (unless you also want to see the values of those input
      pointers)\n- You can only set one variable like this per test case due to technical
      reasons so choose wisely (if you use this feature)\n\n#### Emulating multiple
      function calls\n- Use the multiple value syntax, one value will be read everytime
      the stubbed function is called\n  - Example (foo is called twice, and should
      return 2 the first time and 3 the second):\n    { \"identifier\": \"uut_prototype_stubs.foo.return\",
      \"value\": \"2,3\" }\n\n## Test Case Execution\n1. The test framework will call
      the specified subprogram/function\n2. When a value of a variable would be read,
      if it is specified as a test value, it is set to that value instead\n3. After
      the subprogram finishes, the expected values are checked against the actual
      values at that point\n\nAll tests are executed in isolation. The execution of
      one test does not influence the execution of others.\n\n### Stubbing behaviour\n-
      All function calls from external files, i.e, those referenced with `uut_prototype_stubs`
      are stubbed automatically and do not implement any behaviour. Setting their
      input values has no effect on their output values (instead default values are
      output unless you specify values for them).\n- If any of the parameters or return
      value of a called function (which is not automatically stubbed as outlined above)
      are set or expected to be some value using an identifier, the function will
      be stubbed during execution and not implement any behaviour. In this case it
      is forbidden to also expect the return value to equal something (it won''t as
      the function will be stubbed).\n  - If none are set or expected the function
      will execute as normal\n\n### Default identifier values and initialization\n-
      In general any value not set (input of course), will fall back to a default
      value. However this should be avoided to prevent undefined behaviour. This means
      all input variables (and outputs of stubbed values) should be exhaustively described.\n-
      Do not set an identifier multiple times, it just results in overriding of the
      previous value\n- To access methods of a class and set values it is imperative
      to first instantiate the class using a constructor. For all classes a default
      object is ready to be initialized if needed using the respective constructor.\n-
      Similarly, arrays or pointers should always be allocated\n\n## Examples\n\nLet''s
      consider a more complex C++ code snippet in a file named `data_processor.cpp`:\n\n```cpp\n//
      File: data_processor.cpp\n// Unit: data_processor\n\ntypedef struct {\n    int
      id;\n    float value;\n    char status;\n} DataRecord;\n\ntypedef enum {\n    MODE_NORMAL
      = 0,\n    MODE_DEBUG = 1,\n    MODE_ERROR = 2\n} ProcessingMode;\n\n// External
      function declarations\nextern int validate_record(DataRecord* record);\nextern
      void log_error(const char* message);\nextern DataRecord* allocate_buffer(int
      size);\n\nProcessingMode current_mode = MODE_NORMAL;\n\nint process_data_array(DataRecord*
      input_array, int array_size, DataRecord** output_array) {\n    if (input_array
      == NULL || array_size <= 0) {\n        if (current_mode == MODE_DEBUG) {\n            log_error(\"Invalid
      input parameters\");\n        }\n        return -1;\n    }\n    \n    // Allocate
      output buffer\n    *output_array = allocate_buffer(array_size);\n    if (*output_array
      == NULL) {\n        log_error(\"Memory allocation failed\");\n        return
      -2;\n    }\n    \n    int processed_count = 0;\n    for (int i = 0; i < array_size;
      i++) {\n        // Validate each record using external function\n        int
      validation_result = validate_record(&input_array[i]);\n        \n        if
      (validation_result > 0) {\n            // Copy valid record to output with modified
      value\n            (*output_array)[processed_count].id = input_array[i].id;\n            (*output_array)[processed_count].value
      = input_array[i].value * 1.5f;\n            (*output_array)[processed_count].status
      = ''V''; // Valid\n            processed_count++;\n        } else if (current_mode
      == MODE_ERROR) {\n            // In error mode, stop processing on first invalid
      record\n            log_error(\"Invalid record encountered in error mode\");\n            return
      processed_count;\n        }\n        // In normal mode, skip invalid records
      and continue\n    }\n    \n    return processed_count;\n}\n```\n\n### Example
      1: Testing Null Input Handling with Branching\n\n**Requirement REQ-DP-001:**
      The `process_data_array` function shall return -1 when input_array is NULL and
      log an error message if in DEBUG mode.\n\n```json\n{\n  \"test_name\": \"Test_Null_Input_Debug_Mode\",\n  \"test_description\":
      \"Tests process_data_array with NULL input in DEBUG mode to ensure it returns
      -1 and calls log_error.\",\n  \"requirement_id\": \"REQ-DP-001\",\n  \"unit_name\":
      \"data_processor\",\n  \"subprogram_name\": \"process_data_array\",\n  \"input_values\":
      [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\", \"value\":
      \"MODE_DEBUG\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<null>>\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"5\" },\n  ],\n  \"expected_values\": [\n    { \"identifier\": \"uut_prototype_stubs.log_error.message\",
      \"value\": \"\\\"Invalid input parameters\\\"\" },\n    { \"identifier\": \"data_processor.process_data_array.return\",
      \"value\": \"-1\" }\n  ]\n}\n```\n\n### Example 2: Testing Memory Allocation
      with Stubbing\n\n**Requirement REQ-DP-002:** The `process_data_array` function
      shall return -2 and log an error when memory allocation fails.\n\n```json\n{\n  \"test_name\":
      \"Test_Memory_Allocation_Failure\",\n  \"test_description\": \"Tests process_data_array
      when allocate_buffer returns NULL to ensure proper error handling.\",\n  \"requirement_id\":
      \"REQ-DP-002\",\n  \"unit_name\": \"data_processor\",\n  \"subprogram_name\":
      \"process_data_array\",\n  \"input_values\": [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\",
      \"value\": \"MODE_NORMAL\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<malloc 1>>\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].id\",
      \"value\": \"1\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].value\",
      \"value\": \"10.5\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].status\",
      \"value\": \"''A''\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"2\" },\n    { \"identifier\": \"uut_prototype_stubs.allocate_buffer.return\",
      \"value\": \"<<null>>\" },\n  ],\n  \"expected_values\": [\n    { \"identifier\":
      \"uut_prototype_stubs.log_error.message\", \"value\": \"\\\"Memory allocation
      failed\\\"\" },\n    { \"identifier\": \"data_processor.process_data_array.return\",
      \"value\": \"-2\" }\n  ]\n}\n```\n\n### Example 3: Testing Complex Processing
      with Multiple Stubs\n\n**Requirement REQ-DP-003:** The `process_data_array`
      function shall process valid records by multiplying their values by 1.5 and
      setting status to ''V''.\n\n```json\n{\n  \"test_name\": \"Test_Valid_Record_Processing\",\n  \"test_description\":
      \"Tests process_data_array with mixed valid/invalid records to ensure proper
      processing and output.\",\n  \"requirement_id\": \"REQ-DP-003\",\n  \"unit_name\":
      \"data_processor\",\n  \"subprogram_name\": \"process_data_array\",\n  \"input_values\":
      [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\", \"value\":
      \"MODE_NORMAL\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].id\",
      \"value\": \"100\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].value\",
      \"value\": \"20.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].status\",
      \"value\": \"''A''\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].id\",
      \"value\": \"200\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].status\",
      \"value\": \"''B''\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[2].id\",
      \"value\": \"300\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[2].value\",
      \"value\": \"40.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[2].status\",
      \"value\": \"''C''\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"3\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0]\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"uut_prototype_stubs.validate_record.return\",
      \"value\": \"1,0,1\" }\n  ],\n  \"expected_values\": [\n    { \"identifier\":
      \"data_processor.process_data_array.return\", \"value\": \"2\" },\n    { \"identifier\":
      \"data_processor.process_data_array.output_array[0][0].id\", \"value\": \"100\"
      },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].status\",
      \"value\": \"''V''\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][1].id\",
      \"value\": \"300\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][1].value\",
      \"value\": \"60.0\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][1].status\",
      \"value\": \"''V''\" }\n  ]\n}\n```\n\n### Example 4: Testing Error Mode with
      Early Termination\n\n**Requirement REQ-DP-004:** The `process_data_array` function
      shall stop processing and return the current count when an invalid record is
      encountered in ERROR mode.\n\n```json\n{\n  \"test_name\": \"Test_Error_Mode_Early_Termination\",\n  \"test_description\":
      \"Tests process_data_array in ERROR mode to ensure it stops processing on first
      invalid record.\",\n  \"requirement_id\": \"REQ-DP-004\",\n  \"unit_name\":
      \"data_processor\",\n  \"subprogram_name\": \"process_data_array\",\n  \"input_values\":
      [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\", \"value\":
      \"MODE_ERROR\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].id\",
      \"value\": \"100\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].value\",
      \"value\": \"20.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].id\",
      \"value\": \"200\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"3\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0]\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"uut_prototype_stubs.allocate_buffer.size\",
      \"value\": \"3\" },\n    { \"identifier\": \"uut_prototype_stubs.validate_record.return\",
      \"value\": \"1,-1\" },\n  ],\n  \"expected_values\": [\n    { \"identifier\":
      \"uut_prototype_stubs.log_error.message\", \"value\": \"\\\"Invalid record encountered
      in error mode\\\"\" },\n    { \"identifier\": \"data_processor.process_data_array.return\",
      \"value\": \"1\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].id\",
      \"value\": \"100\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].status\",
      \"value\": \"''V''\" }\n  ]\n}\n```\n\nRelevant Code:\n```cpp\n// Unit: manager\n\n//
      Definitions of types, called functions and data structures:\n\ntypedef float
      FLOAT;\n\nenum boolean { v_false, v_true };\n\nenum soups { NO_SOUP, ONION,
      CHOWDER };\n\nenum salads { NO_SALAD, CAESAR, GREEN };\n\nenum entrees { NO_ENTREE,
      STEAK, CHICKEN, LOBSTER, PASTA };\n\nenum desserts { NO_DESSERT, CAKE, PIE,
      FRUIT };\n\nenum beverages { NO_BEVERAGE, WINE, BEER, MIXED_DRINK, SODA };\n\nstruct
      order_type\n{\n  enum soups Soup;\n  enum salads Salad;\n  enum entrees Entree;\n  enum
      desserts Dessert;\n  enum beverages Beverage;\n};\n\ntypedef unsigned short
      seat_index_type;\n\ntypedef unsigned short table_index_type;\n\nstruct table_data_type\n{\n  enum
      boolean Is_Occupied;\n  seat_index_type Number_In_Party;\n  char Designator;\n  char
      Wait_Person[10];\n  struct order_type Order[4];\n  FLOAT Check_Total;\n};\n\nstruct
      table_data_type Get_Table_Record(table_index_type Table);\n\nvoid Update_Table_Record(table_index_type
      Table, struct table_data_type Data);\n\nvoid Add_Included_Dessert(struct order_type*
      Order)\n{\n  if(Order->Entree == STEAK &&\n     Order->Salad == CAESAR &&\n     Order->Beverage
      == MIXED_DRINK) {\n\n    Order->Dessert = PIE;\n\n  } else if(Order->Entree
      == LOBSTER &&\n            Order->Salad == GREEN &&\n            Order->Beverage
      == WINE) {\n\n    Order->Dessert = CAKE;\n  }\n}\n\n// Code for Place_Order:\nint
      Place_Order(table_index_type Table,\n                seat_index_type Seat,\n                struct
      order_type Order)\n{\n  struct table_data_type Table_Data;\n\n  Table_Data =
      Get_Table_Record(Table);\n\n  Table_Data.Is_Occupied = v_true;\n  Table_Data.Number_In_Party
      = Table_Data.Number_In_Party + 1;\n  Table_Data.Order[Seat] = Order;\n\n  /*
      Add a free dessert in some cases */\n  Add_Included_Dessert(&Table_Data.Order[Seat]);\n\n  switch(Order.Entree)\n    {\n    case
      NO_ENTREE :\n       break;\n    case STEAK :\n       Table_Data.Check_Total
      = Table_Data.Check_Total + 14.0;\n       break;\n    case CHICKEN :\n       Table_Data.Check_Total
      = Table_Data.Check_Total + 10.0;\n       break;\n    case LOBSTER :\n       Table_Data.Check_Total
      = Table_Data.Check_Total + 18.0;\n       break;\n    case PASTA :\n       Table_Data.Check_Total
      = Table_Data.Check_Total + 12.0;\n       break;\n    }\n\n  Update_Table_Record(Table,
      Table_Data);\n  return 0;\n}\n```\n\nExample Test Cases:\n```json\n[\n  {\n    \"test_name\":
      \"BASIS-PATH-001\",\n    \"test_description\": \"This is an automatically generated
      test case.\\nTest Path 1\\n(5) case (Order.Entree) ==> PASTA\\nTest Case Generation
      Notes:\",\n    \"unit_name\": \"manager\",\n    \"subprogram_name\": \"Place_Order\",\n    \"input_values\":
      [\n      {\n        \"identifier\": \"manager.Place_Order.Order.Entree\",\n        \"value\":
      \"PASTA\"\n      },\n      {\n        \"identifier\": \"manager.Place_Order.Table\",\n        \"value\":
      \"<<MIN>>\"\n      },\n      {\n        \"identifier\": \"manager.Place_Order.Seat\",\n        \"value\":
      \"<<MIN>>\"\n      }\n    ],\n    \"expected_values\": [],\n    \"requirement_id\":
      null\n  }\n]\n```\n\nRequirements:\n1. FR17.4: Placing an order for pasta increases
      the table''s check total by 12.0 within the table database.\n2. FR17.5: Placing
      an order for none increases the table''s check total by 0.0 within the table
      database.\n\nDetailed task description:\nBased on the above requirements and
      code, generate unit tests that exercise all requirements.\nMake sure the generated
      test cases clearly test the provided requirements.\n\nSolve the problem using
      the following approach:\nFor each requirement in order...\n    1. Come up with
      descriptive (unique) name for the test case and describe in natural language
      how this test exercises the requirement\n    2. Provide the name of the unit
      being tested (base file name without extension) and the name of the subprogram
      being tested (function name)\n    3. Provide the input and expected values by
      providing the correct identifier and value in the syntax outlined above.\n\nYou
      are allowed to use the following identifiers in your test case:\n- manager.Place_Order.Table\n-
      manager.Place_Order.Seat\n- manager.Place_Order.Order.Soup\n- manager.Place_Order.Order.Salad\n-
      manager.Place_Order.Order.Entree\n- manager.Place_Order.Order.Dessert\n- manager.Place_Order.Order.Beverage\n-
      manager.Place_Order.return\n- uut_prototype_stubs.Get_Table_Record.Table\n-
      uut_prototype_stubs.Get_Table_Record.return.Is_Occupied\n- uut_prototype_stubs.Get_Table_Record.return.Number_In_Party\n-
      uut_prototype_stubs.Get_Table_Record.return.Designator\n- uut_prototype_stubs.Get_Table_Record.return.Wait_Person\n-
      uut_prototype_stubs.Get_Table_Record.return.Order[i].Soup (for all: i in 0..3)\n-
      uut_prototype_stubs.Get_Table_Record.return.Order[i].Salad (for all: i in 0..3)\n-
      uut_prototype_stubs.Get_Table_Record.return.Order[i].Entree (for all: i in 0..3)\n-
      uut_prototype_stubs.Get_Table_Record.return.Order[i].Dessert (for all: i in
      0..3)\n- uut_prototype_stubs.Get_Table_Record.return.Order[i].Beverage (for
      all: i in 0..3)\n- uut_prototype_stubs.Get_Table_Record.return.Check_Total\n-
      manager.Add_Included_Dessert.Order\n- manager.Add_Included_Dessert.Order[i].Soup
      (for all: i in 0..31)\n- manager.Add_Included_Dessert.Order[i].Salad (for all:
      i in 0..31)\n- manager.Add_Included_Dessert.Order[i].Entree (for all: i in 0..31)\n-
      manager.Add_Included_Dessert.Order[i].Dessert (for all: i in 0..31)\n- manager.Add_Included_Dessert.Order[i].Beverage
      (for all: i in 0..31)\n- uut_prototype_stubs.Update_Table_Record.Table\n- uut_prototype_stubs.Update_Table_Record.Data.Is_Occupied\n-
      uut_prototype_stubs.Update_Table_Record.Data.Number_In_Party\n- uut_prototype_stubs.Update_Table_Record.Data.Designator\n-
      uut_prototype_stubs.Update_Table_Record.Data.Wait_Person\n- uut_prototype_stubs.Update_Table_Record.Data.Order[i].Soup
      (for all: i in 0..3)\n- uut_prototype_stubs.Update_Table_Record.Data.Order[i].Salad
      (for all: i in 0..3)\n- uut_prototype_stubs.Update_Table_Record.Data.Order[i].Entree
      (for all: i in 0..3)\n- uut_prototype_stubs.Update_Table_Record.Data.Order[i].Dessert
      (for all: i in 0..3)\n- uut_prototype_stubs.Update_Table_Record.Data.Order[i].Beverage
      (for all: i in 0..3)\n- uut_prototype_stubs.Update_Table_Record.Data.Check_Total\n\nYou
      MUST set an input value for all input to the functions, used globals and called
      stubs.\nIf you do not ensure this, it can happen that your test does not cover
      the correct path corresponding to the requirement.\nAn expected value is not
      required for all identifiers. Only for those relevant to the requirement.\n\nUnstubbed-by-default
      called functions (implement behaviour unless an identifier is set in which case
      the respective function is stubbed) called by Place_Order:\n- Add_Included_Dessert\nStubbed-by-default
      called functions (no behaviour is implemented, you can use identifiers to simulate
      a return value) called by Place_Order:\n- Get_Table_Record\n- Update_Table_Record\n\nNotes:\n-
      You are NOT allowed to invent any syntax that is not specified in the syntax
      reference. Stick to the syntax provided.\n- You are NOT allowed to invent any
      units or functions that are not present in the provided code.\n- This is a highly
      critical task, please ensure that the test cases are correct and complete and
      do not contain any logical or syntactical errors.\n- Test cases are independent
      of each other, i.e., they should not rely on one being run before the other
      (or environment being modified by one).\n- Generate exactly one test case per
      requirement.\n- In case the requirement and the code differ, the requirement
      is what you should test, i.e., it is the source of truth.\n- It might be that
      some of the provided code context and identifiers are incorrect. Use the most
      obviously correct parts of both and ignore the rest.\n\nReturn your answer in
      the following format:\n```json\n{\n    \"test_case_for_requirement_1\": <test
      case testing the first requirement in the list>,\n    \"test_case_for_requirement_2\":
      <test case testing the second requirement in the list>,\n    ...\n}\n```\n",
      "role": "user"}], "model": "gpt-4.1", "response_format": {"json_schema": {"name":
      "TestGenerationResult", "schema": {"$defs": {"ExpectedValueMapping": {"additionalProperties":
      false, "properties": {"identifier": {"$ref": "#/$defs/Identifier"}, "value":
      {"title": "Value", "type": "string"}}, "required": ["identifier", "value"],
      "title": "ExpectedValueMapping", "type": "object"}, "Identifier": {"enum": ["manager.Place_Order.Table",
      "manager.Place_Order.Seat", "manager.Place_Order.Order.Soup", "manager.Place_Order.Order.Salad",
      "manager.Place_Order.Order.Entree", "manager.Place_Order.Order.Dessert", "manager.Place_Order.Order.Beverage",
      "manager.Place_Order.return", "uut_prototype_stubs.Get_Table_Record.Table",
      "uut_prototype_stubs.Get_Table_Record.return.Is_Occupied", "uut_prototype_stubs.Get_Table_Record.return.Number_In_Party",
      "uut_prototype_stubs.Get_Table_Record.return.Designator", "uut_prototype_stubs.Get_Table_Record.return.Wait_Person",
      "uut_prototype_stubs.Get_Table_Record.return.Order[0].Soup", "uut_prototype_stubs.Get_Table_Record.return.Order[0].Salad",
      "uut_prototype_stubs.Get_Table_Record.return.Order[0].Entree", "uut_prototype_stubs.Get_Table_Record.return.Order[0].Dessert",
      "uut_prototype_stubs.Get_Table_Record.return.Order[0].Beverage", "uut_prototype_stubs.Get_Table_Record.return.Order[1].Soup",
      "uut_prototype_stubs.Get_Table_Record.return.Order[1].Salad", "uut_prototype_stubs.Get_Table_Record.return.Order[1].Entree",
      "uut_prototype_stubs.Get_Table_Record.return.Order[1].Dessert", "uut_prototype_stubs.Get_Table_Record.return.Order[1].Beverage",
      "uut_prototype_stubs.Get_Table_Record.return.Order[2].Soup", "uut_prototype_stubs.Get_Table_Record.return.Order[2].Salad",
      "uut_prototype_stubs.Get_Table_Record.return.Order[2].Entree", "uut_prototype_stubs.Get_Table_Record.return.Order[2].Dessert",
      "uut_prototype_stubs.Get_Table_Record.return.Order[2].Beverage", "uut_prototype_stubs.Get_Table_Record.return.Order[3].Soup",
      "uut_prototype_stubs.Get_Table_Record.return.Order[3].Salad", "uut_prototype_stubs.Get_Table_Record.return.Order[3].Entree",
      "uut_prototype_stubs.Get_Table_Record.return.Order[3].Dessert", "uut_prototype_stubs.Get_Table_Record.return.Order[3].Beverage",
      "uut_prototype_stubs.Get_Table_Record.return.Check_Total", "manager.Add_Included_Dessert.Order",
      "manager.Add_Included_Dessert.Order[0].Soup", "manager.Add_Included_Dessert.Order[0].Salad",
      "manager.Add_Included_Dessert.Order[0].Entree", "manager.Add_Included_Dessert.Order[0].Dessert",
      "manager.Add_Included_Dessert.Order[0].Beverage", "manager.Add_Included_Dessert.Order[1].Soup",
      "manager.Add_Included_Dessert.Order[1].Salad", "manager.Add_Included_Dessert.Order[1].Entree",
      "manager.Add_Included_Dessert.Order[1].Dessert", "manager.Add_Included_Dessert.Order[1].Beverage",
      "manager.Add_Included_Dessert.Order[2].Soup", "manager.Add_Included_Dessert.Order[2].Salad",
      "manager.Add_Included_Dessert.Order[2].Entree", "manager.Add_Included_Dessert.Order[2].Dessert",
      "manager.Add_Included_Dessert.Order[2].Beverage", "manager.Add_Included_Dessert.Order[3].Soup",
      "manager.Add_Included_Dessert.Order[3].Salad", "manager.Add_Included_Dessert.Order[3].Entree",
      "manager.Add_Included_Dessert.Order[3].Dessert", "manager.Add_Included_Dessert.Order[3].Beverage",
      "manager.Add_Included_Dessert.Order[4].Soup", "manager.Add_Included_Dessert.Order[4].Salad",
      "manager.Add_Included_Dessert.Order[4].Entree", "manager.Add_Included_Dessert.Order[4].Dessert",
      "manager.Add_Included_Dessert.Order[4].Beverage", "manager.Add_Included_Dessert.Order[5].Soup",
      "manager.Add_Included_Dessert.Order[5].Salad", "manager.Add_Included_Dessert.Order[5].Entree",
      "manager.Add_Included_Dessert.Order[5].Dessert", "manager.Add_Included_Dessert.Order[5].Beverage",
      "manager.Add_Included_Dessert.Order[6].Soup", "manager.Add_Included_Dessert.Order[6].Salad",
      "manager.Add_Included_Dessert.Order[6].Entree", "manager.Add_Included_Dessert.Order[6].Dessert",
      "manager.Add_Included_Dessert.Order[6].Beverage", "manager.Add_Included_Dessert.Order[7].Soup",
      "manager.Add_Included_Dessert.Order[7].Salad", "manager.Add_Included_Dessert.Order[7].Entree",
      "manager.Add_Included_Dessert.Order[7].Dessert", "manager.Add_Included_Dessert.Order[7].Beverage",
      "manager.Add_Included_Dessert.Order[8].Soup", "manager.Add_Included_Dessert.Order[8].Salad",
      "manager.Add_Included_Dessert.Order[8].Entree", "manager.Add_Included_Dessert.Order[8].Dessert",
      "manager.Add_Included_Dessert.Order[8].Beverage", "manager.Add_Included_Dessert.Order[9].Soup",
      "manager.Add_Included_Dessert.Order[9].Salad", "manager.Add_Included_Dessert.Order[9].Entree",
      "manager.Add_Included_Dessert.Order[9].Dessert", "manager.Add_Included_Dessert.Order[9].Beverage",
      "manager.Add_Included_Dessert.Order[10].Soup", "manager.Add_Included_Dessert.Order[10].Salad",
      "manager.Add_Included_Dessert.Order[10].Entree", "manager.Add_Included_Dessert.Order[10].Dessert",
      "manager.Add_Included_Dessert.Order[10].Beverage", "manager.Add_Included_Dessert.Order[11].Soup",
      "manager.Add_Included_Dessert.Order[11].Salad", "manager.Add_Included_Dessert.Order[11].Entree",
      "manager.Add_Included_Dessert.Order[11].Dessert", "manager.Add_Included_Dessert.Order[11].Beverage",
      "manager.Add_Included_Dessert.Order[12].Soup", "manager.Add_Included_Dessert.Order[12].Salad",
      "manager.Add_Included_Dessert.Order[12].Entree", "manager.Add_Included_Dessert.Order[12].Dessert",
      "manager.Add_Included_Dessert.Order[12].Beverage", "manager.Add_Included_Dessert.Order[13].Soup",
      "manager.Add_Included_Dessert.Order[13].Salad", "manager.Add_Included_Dessert.Order[13].Entree",
      "manager.Add_Included_Dessert.Order[13].Dessert", "manager.Add_Included_Dessert.Order[13].Beverage",
      "manager.Add_Included_Dessert.Order[14].Soup", "manager.Add_Included_Dessert.Order[14].Salad",
      "manager.Add_Included_Dessert.Order[14].Entree", "manager.Add_Included_Dessert.Order[14].Dessert",
      "manager.Add_Included_Dessert.Order[14].Beverage", "manager.Add_Included_Dessert.Order[15].Soup",
      "manager.Add_Included_Dessert.Order[15].Salad", "manager.Add_Included_Dessert.Order[15].Entree",
      "manager.Add_Included_Dessert.Order[15].Dessert", "manager.Add_Included_Dessert.Order[15].Beverage",
      "manager.Add_Included_Dessert.Order[16].Soup", "manager.Add_Included_Dessert.Order[16].Salad",
      "manager.Add_Included_Dessert.Order[16].Entree", "manager.Add_Included_Dessert.Order[16].Dessert",
      "manager.Add_Included_Dessert.Order[16].Beverage", "manager.Add_Included_Dessert.Order[17].Soup",
      "manager.Add_Included_Dessert.Order[17].Salad", "manager.Add_Included_Dessert.Order[17].Entree",
      "manager.Add_Included_Dessert.Order[17].Dessert", "manager.Add_Included_Dessert.Order[17].Beverage",
      "manager.Add_Included_Dessert.Order[18].Soup", "manager.Add_Included_Dessert.Order[18].Salad",
      "manager.Add_Included_Dessert.Order[18].Entree", "manager.Add_Included_Dessert.Order[18].Dessert",
      "manager.Add_Included_Dessert.Order[18].Beverage", "manager.Add_Included_Dessert.Order[19].Soup",
      "manager.Add_Included_Dessert.Order[19].Salad", "manager.Add_Included_Dessert.Order[19].Entree",
      "manager.Add_Included_Dessert.Order[19].Dessert", "manager.Add_Included_Dessert.Order[19].Beverage",
      "manager.Add_Included_Dessert.Order[20].Soup", "manager.Add_Included_Dessert.Order[20].Salad",
      "manager.Add_Included_Dessert.Order[20].Entree", "manager.Add_Included_Dessert.Order[20].Dessert",
      "manager.Add_Included_Dessert.Order[20].Beverage", "manager.Add_Included_Dessert.Order[21].Soup",
      "manager.Add_Included_Dessert.Order[21].Salad", "manager.Add_Included_Dessert.Order[21].Entree",
      "manager.Add_Included_Dessert.Order[21].Dessert", "manager.Add_Included_Dessert.Order[21].Beverage",
      "manager.Add_Included_Dessert.Order[22].Soup", "manager.Add_Included_Dessert.Order[22].Salad",
      "manager.Add_Included_Dessert.Order[22].Entree", "manager.Add_Included_Dessert.Order[22].Dessert",
      "manager.Add_Included_Dessert.Order[22].Beverage", "manager.Add_Included_Dessert.Order[23].Soup",
      "manager.Add_Included_Dessert.Order[23].Salad", "manager.Add_Included_Dessert.Order[23].Entree",
      "manager.Add_Included_Dessert.Order[23].Dessert", "manager.Add_Included_Dessert.Order[23].Beverage",
      "manager.Add_Included_Dessert.Order[24].Soup", "manager.Add_Included_Dessert.Order[24].Salad",
      "manager.Add_Included_Dessert.Order[24].Entree", "manager.Add_Included_Dessert.Order[24].Dessert",
      "manager.Add_Included_Dessert.Order[24].Beverage", "manager.Add_Included_Dessert.Order[25].Soup",
      "manager.Add_Included_Dessert.Order[25].Salad", "manager.Add_Included_Dessert.Order[25].Entree",
      "manager.Add_Included_Dessert.Order[25].Dessert", "manager.Add_Included_Dessert.Order[25].Beverage",
      "manager.Add_Included_Dessert.Order[26].Soup", "manager.Add_Included_Dessert.Order[26].Salad",
      "manager.Add_Included_Dessert.Order[26].Entree", "manager.Add_Included_Dessert.Order[26].Dessert",
      "manager.Add_Included_Dessert.Order[26].Beverage", "manager.Add_Included_Dessert.Order[27].Soup",
      "manager.Add_Included_Dessert.Order[27].Salad", "manager.Add_Included_Dessert.Order[27].Entree",
      "manager.Add_Included_Dessert.Order[27].Dessert", "manager.Add_Included_Dessert.Order[27].Beverage",
      "manager.Add_Included_Dessert.Order[28].Soup", "manager.Add_Included_Dessert.Order[28].Salad",
      "manager.Add_Included_Dessert.Order[28].Entree", "manager.Add_Included_Dessert.Order[28].Dessert",
      "manager.Add_Included_Dessert.Order[28].Beverage", "manager.Add_Included_Dessert.Order[29].Soup",
      "manager.Add_Included_Dessert.Order[29].Salad", "manager.Add_Included_Dessert.Order[29].Entree",
      "manager.Add_Included_Dessert.Order[29].Dessert", "manager.Add_Included_Dessert.Order[29].Beverage",
      "manager.Add_Included_Dessert.Order[30].Soup", "manager.Add_Included_Dessert.Order[30].Salad",
      "manager.Add_Included_Dessert.Order[30].Entree", "manager.Add_Included_Dessert.Order[30].Dessert",
      "manager.Add_Included_Dessert.Order[30].Beverage", "manager.Add_Included_Dessert.Order[31].Soup",
      "manager.Add_Included_Dessert.Order[31].Salad", "manager.Add_Included_Dessert.Order[31].Entree",
      "manager.Add_Included_Dessert.Order[31].Dessert", "manager.Add_Included_Dessert.Order[31].Beverage",
      "uut_prototype_stubs.Update_Table_Record.Table", "uut_prototype_stubs.Update_Table_Record.Data.Is_Occupied",
      "uut_prototype_stubs.Update_Table_Record.Data.Number_In_Party", "uut_prototype_stubs.Update_Table_Record.Data.Designator",
      "uut_prototype_stubs.Update_Table_Record.Data.Wait_Person", "uut_prototype_stubs.Update_Table_Record.Data.Order[0].Soup",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[0].Salad", "uut_prototype_stubs.Update_Table_Record.Data.Order[0].Entree",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[0].Dessert", "uut_prototype_stubs.Update_Table_Record.Data.Order[0].Beverage",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[1].Soup", "uut_prototype_stubs.Update_Table_Record.Data.Order[1].Salad",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[1].Entree", "uut_prototype_stubs.Update_Table_Record.Data.Order[1].Dessert",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[1].Beverage", "uut_prototype_stubs.Update_Table_Record.Data.Order[2].Soup",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[2].Salad", "uut_prototype_stubs.Update_Table_Record.Data.Order[2].Entree",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[2].Dessert", "uut_prototype_stubs.Update_Table_Record.Data.Order[2].Beverage",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[3].Soup", "uut_prototype_stubs.Update_Table_Record.Data.Order[3].Salad",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[3].Entree", "uut_prototype_stubs.Update_Table_Record.Data.Order[3].Dessert",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[3].Beverage", "uut_prototype_stubs.Update_Table_Record.Data.Check_Total"],
      "title": "Identifier", "type": "string"}, "InputValueMapping": {"additionalProperties":
      false, "properties": {"identifier": {"$ref": "#/$defs/Identifier"}, "value":
      {"title": "Value", "type": "string"}}, "required": ["identifier", "value"],
      "title": "InputValueMapping", "type": "object"}, "TestCase": {"additionalProperties":
      false, "properties": {"expected_values": {"items": {"$ref": "#/$defs/ExpectedValueMapping"},
      "title": "Expected Values", "type": "array"}, "input_values": {"items": {"$ref":
      "#/$defs/InputValueMapping"}, "title": "Input Values", "type": "array"}, "requirement_id":
      {"title": "Requirement Id", "type": "string"}, "subprogram_name": {"title":
      "Subprogram Name", "type": "string"}, "test_description": {"title": "Test Description",
      "type": "string"}, "test_name": {"title": "Test Name", "type": "string"}, "unit_name":
      {"title": "Unit Name", "type": "string"}}, "required": ["test_name", "test_description",
      "requirement_id", "unit_name", "subprogram_name", "input_values", "expected_values"],
      "title": "TestCase", "type": "object"}}, "additionalProperties": false, "properties":
      {"test_case_for_requirement": {"$ref": "#/$defs/TestCase"}}, "required": ["test_case_for_requirement",
      "test_case_for_requirement"], "title": "TestGenerationResult", "type": "object"},
      "strict": true}, "type": "json_schema"}, "seed": 42, "stream": false, "temperature":
      0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      api-key:
      - REDACTED
      authorization:
      - REDACTED
      connection:
      - keep-alive
      content-length:
      - '40986'
      content-type:
      - application/json
      host:
      - REDACTED
      user-agent:
      - AsyncAzureOpenAI/Python 1.58.1
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-helper-method:
      - beta.chat.completions.parse
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.58.1
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.12
    method: POST
    uri: https://rg-rds-play-openai-pes-ppt.openai.azure.com/openai/deployments/gpt-4.1/chat/completions?api-version=2024-12-01-preview
  response:
    body:
      string: '{"choices":[{"content_filter_results":{"hate":{"filtered":false,"severity":"safe"},"protected_material_code":{"filtered":false,"detected":false},"protected_material_text":{"filtered":false,"detected":false},"self_harm":{"filtered":false,"severity":"safe"},"sexual":{"filtered":false,"severity":"safe"},"violence":{"filtered":false,"severity":"safe"}},"finish_reason":"stop","index":0,"logprobs":null,"message":{"annotations":[],"content":"{\n  \"test_case_for_requirement_1\":
        {\n    \"test_name\": \"Test_Pasta_Order_Increases_Check_Total_By_12\",\n    \"test_description\":
        \"Tests that placing an order for pasta increases the table''s check total
        by 12.0. The test sets up a table with an initial check total, places a pasta
        order, and verifies that the check total is incremented by 12.0 in the updated
        table record.\",\n    \"requirement_id\": \"FR17.4\",\n    \"unit_name\":
        \"manager\",\n    \"subprogram_name\": \"Place_Order\",\n    \"input_values\":
        [\n      { \"identifier\": \"manager.Place_Order.Table\", \"value\": \"2\"
        },\n      { \"identifier\": \"manager.Place_Order.Seat\", \"value\": \"1\"
        },\n      { \"identifier\": \"manager.Place_Order.Order.Soup\", \"value\":
        \"NO_SOUP\" },\n      { \"identifier\": \"manager.Place_Order.Order.Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"manager.Place_Order.Order.Entree\",
        \"value\": \"PASTA\" },\n      { \"identifier\": \"manager.Place_Order.Order.Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"manager.Place_Order.Order.Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.Table\",
        \"value\": \"2\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Is_Occupied\",
        \"value\": \"v_false\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Number_In_Party\",
        \"value\": \"2\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Designator\",
        \"value\": \"''A''\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Wait_Person\",
        \"value\": \"\\\"Alice\\\"\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Check_Total\",
        \"value\": \"50.0\" }\n    ],\n    \"expected_values\": [\n      { \"identifier\":
        \"uut_prototype_stubs.Update_Table_Record.Table\", \"value\": \"2\" },\n      {
        \"identifier\": \"uut_prototype_stubs.Update_Table_Record.Data.Check_Total\",
        \"value\": \"62.0\" }\n    ]\n  },\n  \"test_case_for_requirement_2\": {\n    \"test_name\":
        \"Test_None_Entree_Order_Does_Not_Change_Check_Total\",\n    \"test_description\":
        \"Tests that placing an order with no entree (NO_ENTREE) does not increase
        the table''s check total. The test sets up a table with an initial check total,
        places a NO_ENTREE order, and verifies that the check total remains unchanged
        in the updated table record.\",\n    \"requirement_id\": \"FR17.5\",\n    \"unit_name\":
        \"manager\",\n    \"subprogram_name\": \"Place_Order\",\n    \"input_values\":
        [\n      { \"identifier\": \"manager.Place_Order.Table\", \"value\": \"3\"
        },\n      { \"identifier\": \"manager.Place_Order.Seat\", \"value\": \"2\"
        },\n      { \"identifier\": \"manager.Place_Order.Order.Soup\", \"value\":
        \"NO_SOUP\" },\n      { \"identifier\": \"manager.Place_Order.Order.Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"manager.Place_Order.Order.Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"manager.Place_Order.Order.Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"manager.Place_Order.Order.Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.Table\",
        \"value\": \"3\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Is_Occupied\",
        \"value\": \"v_false\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Number_In_Party\",
        \"value\": \"1\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Designator\",
        \"value\": \"''B''\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Wait_Person\",
        \"value\": \"\\\"Bob\\\"\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Check_Total\",
        \"value\": \"25.0\" }\n    ],\n    \"expected_values\": [\n      { \"identifier\":
        \"uut_prototype_stubs.Update_Table_Record.Table\", \"value\": \"3\" },\n      {
        \"identifier\": \"uut_prototype_stubs.Update_Table_Record.Data.Check_Total\",
        \"value\": \"25.0\" }\n    ]\n  }\n}","refusal":null,"role":"assistant"}}],"created":1752564162,"id":"chatcmpl-BtUHqozYQcJWoADQTgQmZL1t0yEft","model":"gpt-4.1-2025-04-14","object":"chat.completion","prompt_filter_results":[{"prompt_index":0,"content_filter_results":{"hate":{"filtered":false,"severity":"safe"},"jailbreak":{"filtered":false,"detected":false},"self_harm":{"filtered":false,"severity":"safe"},"sexual":{"filtered":false,"severity":"safe"},"violence":{"filtered":false,"severity":"safe"}}}],"system_fingerprint":"fp_07e970ab25","usage":{"completion_tokens":2263,"completion_tokens_details":{"accepted_prediction_tokens":0,"audio_tokens":0,"reasoning_tokens":0,"rejected_prediction_tokens":0},"prompt_tokens":9895,"prompt_tokens_details":{"audio_tokens":0,"cached_tokens":0},"total_tokens":12158}}

        '
    headers:
      Content-Length:
      - '10011'
      Content-Type:
      - application/json
      Date:
      - Tue, 15 Jul 2025 07:22:52 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      apim-request-id:
      - e774ce20-c1d8-4c07-8f63-2672c39a33ae
      azureml-model-session:
      - d056-20250701210615
      cmp-upstream-response-duration:
      - '10992'
      x-accel-buffering:
      - 'no'
      x-content-type-options:
      - nosniff
      x-ms-deployment-name:
      - gpt-4.1
      x-ms-rai-invoked:
      - 'true'
      x-ms-region:
      - Sweden Central
      x-ratelimit-limit-requests:
      - '1006'
      x-ratelimit-limit-tokens:
      - '1006000'
      x-ratelimit-remaining-requests:
      - '1002'
      x-ratelimit-remaining-tokens:
      - '981222'
      x-request-id:
      - efb44066-f995-40f4-bc21-97f156b242c7
    status:
      code: 200
      message: OK
- request:
    body: '{"max_completion_tokens": 8192, "messages": [{"content": "You are an AI
      assistant that generates test code for given requirements.", "role": "system"},
      {"content": "\nBased on the following requirements, references, and code, generate
      one test case per given requirement that exercises it.\n\nTest framework reference:\n##
      Test Case Format\nThe format of a test case is as follows:\n{\n    \"test_name\":
      <some descriptive test name>,\n    \"test_description\": <more details about
      the test>\n    \"requirement_id\": <requirement being tested by this test> (optional)\n    \"unit_name\":
      <unit_name>,\n    \"subprogram_name\": <subprogram_name>,\n    \"input_values\":
      [\n        { \"identifier\": <identifier>, \"value\": <value> },\n        ...\n    ],\n    \"expected_values\":
      [\n        { \"identifier\": <identifier>, \"value\": <value> },\n        ...\n    ]\n}\n\n###
      Identifier and Value Syntax\nThe following sections describe the syntax for
      specifying the `identifier` and `value` fields in the test case format. `unit_name`
      and `subprogram_name` refer to file names of C/C++ files (without extension)
      and function names in these files respectively (to refer to methods in classes
      use `<class name>::<method name>`). It is only possible to include identifiers
      from different units and other subprograms if they are called/used in the subprogram
      being tested.\n\n#### Numeric Types\n- Assign the number directly.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.parameter\", \"value\": \"42\" }\n    { \"identifier\":
      \"unit.subprogram.parameter\", \"value\": \"84\" }\n\n#### Structure Types\n-
      Use the standard C syntax to refer to fields within structures.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.struct_param.field\", \"value\": \"CAESAR\"
      }\n    { \"identifier\": \"unit.subprogram.struct_param.field\", \"value\":
      \"STEAK\" }\n\n#### Enumeration Types\n- Use the enumeral value directly.\n  -
      Example:\n    { \"identifier\": \"unit.subprogram.enum_param\", \"value\": \"ENUM_VALUE\"
      }\n\n#### Character and String Types\n- Use standard C delimiters for characters
      and strings.\n  - Example:\n    { \"identifier\": \"unit.subprogram.char_param\",
      \"value\": \"''a''\" }\n    { \"identifier\": \"unit.subprogram.string_param\",
      \"value\": \"\\\"Hello, World\\\"\" }\n- Treat strings as atomic values to set.
      Do not attempt to treat them as a char array, i.e., do not malloc or attempt
      to access chars at individual indices.\n\n#### Pointer and Array Types\n- For
      constrained arrays, specify the index and value.\n  - Example:\n    { \"identifier\":
      \"unit.subprogram.array_param[2]\", \"value\": \"42\" }\n- For unconstrained
      arrays, use `<<malloc [amount of slots to allocate as integer]>>` to allocate
      memory.\n  - Example:\n    { \"identifier\": \"unit.subprogram.array_param\",
      \"value\": \"<<malloc 2>>\" }\n    { \"identifier\": \"unit.subprogram.array_param[1]\",
      \"value\": \"3\" }\n- For pointers, use index 0 to access it (generally pointers
      and unconstrained arrays are the same after all)\n  - Example:\n    { \"identifier\":
      \"unit.subprogram.ptr_param[0]\", \"value\": \"12\" }\n- If you want to make
      something null then use `<<null>>`.\n  - Example:\n    { \"identifier\": \"unit.subprogram.pointer_param\",
      \"value\": \"<<null>>\" }\n    or\n    { \"identifier\": \"unit.subprogram.array_param\",
      \"value\": \"<<null>>\" }\n\n#### Function Return Parameters\n- Use the keyword
      `return` for function return values.\n  - Example:\n    { \"identifier\": \"unit.subprogram.return\",
      \"value\": \"23.0\" }\n\n#### Global Objects\n- Use the syntax `UNIT.<<GLOBAL>>.OBJECT`
      to set values for global objects.\n  - Example:\n    { \"identifier\": \"unit.<<GLOBAL>>.global_object.field\",
      \"value\": \"VALUE\" }\n- Note: `UNIT.OBJECT` is NEVER valid syntax\n\n#####
      Classes\n- To set and expect values of methods in a class (unlike standalone
      subprograms), it is necessary to first instantiate a base object using a constructor\n-
      Use the syntax `UNIT.<<GLOBAL>>.(cl).CLASS_NAME.SUBCLASS_NAME.<<constructor>>.<<call>>`
      to call the constructor of `SUBCLASS` to instantiate a `CLASS` object\n  - Example:\n    {
      \"identifier\": \"unit.<<GLOBAL>>.(cl).class_name.class_name.<<constructor>>.<<call>>\",
      \"value\": \"0\" }\n  - Note: The value in this case is irrelevant and always
      set to 0.\n- To set and expect member variables of a constructed object use
      the syntax `UNIT.<<GLOBAL>>.(cl).CLASS_NAME.SUBCLASS_NAME.MEMBER_NAME`\n  -
      Example:\n    { \"identifier\": \"unit.<<GLOBAL>>.(cl).class_name.class_name.member\",
      \"value\": \"test\" }\n  - Note: If the member is a structured entity like a
      struct or a class instance you can access the subfields like described in the
      `Structure Types` section.\n- To set and expect arguments and return values
      of methods in a class use the name do so like you would for regular subprograms
      except that you prefix the name with the class name and `::`\n  - Example:\n    {
      \"identifier\": \"unit.class_name::member_method.parameter\", \"value\": \"2\"
      }\n  - Note: If you use this ALWAYS first call the class constructor!\n\n####
      Range of Values for Input Data\n- Use range expressions to test a range of values.\n  -
      Example:\n    { \"identifier\": \"unit.subprogram.parameter\", \"value\": \"vary
      from: 0.0 to: 90.0 by: 0.1\" }\n\n#### Range of Values for Expected Results\n-
      Use the syntax `<min> .. <max>` for expected value ranges.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.parameter\", \"value\": \"257.1 .. 259.9\"
      }\n\n#### List of Values\n- Use a comma-separated list for multiple values.\n  -
      Example:\n    { \"identifier\": \"unit.subprogram.parameter\", \"value\": \"1,2,4\"
      }\n- Use parentheses for repeated values.\n  - Example:\n    { \"identifier\":
      \"unit.subprogram.parameter\", \"value\": \"1,(4)2,4\" }\n- Note: This is used
      in case something needs to be set multiple times (like for a stub return) during
      one call, NOT to specify values in an array. To do so, use the regular index
      syntax as outlined above instead.\n\n#### Working with Overloaded Subprograms\n-
      Append the parameter type list to the subprogram name.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram(int).parameter\", \"value\": \"3\" }\n    {
      \"identifier\": \"unit.subprogram(char).parameter\", \"value\": \"''d''\" }\n\n####
      Boolean Values\n- Use `1` for `true` and `0` for `false`.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.boolean_param\", \"value\": \"1\" }\n    {
      \"identifier\": \"unit.subprogram.boolean_param\", \"value\": \"0\" }\n\n####
      Accessing Subprograms Outside the Unit\n- Use `uut_prototype_stubs` as the unit
      for subprograms defined outside of the unit of the test case.\n  - Example:\n    {
      \"identifier\": \"uut_prototype_stubs.name_of_external_subprogram.parameter\",
      \"value\": \"42\" }\n\n#### Emulating stubbed pointer manipulating functions\n-
      Normally it is easy to emulate a stubbed function returning some value (by setting
      the return value of the stubbed function)\n- This is not possible if the stubbed
      function works with pointers as only values can be specified (so only ever the
      contents of a pointer), e.g., functions like memcpy\n- Therefore, in these cases
      you can emulate the stubbed function setting the contents of the pointer using
      <<pointer value_to_set>>\n  - For example assume we have a pointer input variable
      *float x that is modified by a stubbed called to foo(*float pointer_to_modify),
      i.e., foo(x). Then you can change the value, i.e., *x to 10 like so:\n    {
      \"identifier\": \"uut_prototype_stubs.foo.pointer_to_modify\", \"value\": \"<<pointer
      10>>\" }\n  - The other input values of the function of course do not need to
      be specified explicitly (unless you also want to see the values of those input
      pointers)\n- You can only set one variable like this per test case due to technical
      reasons so choose wisely (if you use this feature)\n\n#### Emulating multiple
      function calls\n- Use the multiple value syntax, one value will be read everytime
      the stubbed function is called\n  - Example (foo is called twice, and should
      return 2 the first time and 3 the second):\n    { \"identifier\": \"uut_prototype_stubs.foo.return\",
      \"value\": \"2,3\" }\n\n## Test Case Execution\n1. The test framework will call
      the specified subprogram/function\n2. When a value of a variable would be read,
      if it is specified as a test value, it is set to that value instead\n3. After
      the subprogram finishes, the expected values are checked against the actual
      values at that point\n\nAll tests are executed in isolation. The execution of
      one test does not influence the execution of others.\n\n### Stubbing behaviour\n-
      All function calls from external files, i.e, those referenced with `uut_prototype_stubs`
      are stubbed automatically and do not implement any behaviour. Setting their
      input values has no effect on their output values (instead default values are
      output unless you specify values for them).\n- If any of the parameters or return
      value of a called function (which is not automatically stubbed as outlined above)
      are set or expected to be some value using an identifier, the function will
      be stubbed during execution and not implement any behaviour. In this case it
      is forbidden to also expect the return value to equal something (it won''t as
      the function will be stubbed).\n  - If none are set or expected the function
      will execute as normal\n\n### Default identifier values and initialization\n-
      In general any value not set (input of course), will fall back to a default
      value. However this should be avoided to prevent undefined behaviour. This means
      all input variables (and outputs of stubbed values) should be exhaustively described.\n-
      Do not set an identifier multiple times, it just results in overriding of the
      previous value\n- To access methods of a class and set values it is imperative
      to first instantiate the class using a constructor. For all classes a default
      object is ready to be initialized if needed using the respective constructor.\n-
      Similarly, arrays or pointers should always be allocated\n\n## Examples\n\nLet''s
      consider a more complex C++ code snippet in a file named `data_processor.cpp`:\n\n```cpp\n//
      File: data_processor.cpp\n// Unit: data_processor\n\ntypedef struct {\n    int
      id;\n    float value;\n    char status;\n} DataRecord;\n\ntypedef enum {\n    MODE_NORMAL
      = 0,\n    MODE_DEBUG = 1,\n    MODE_ERROR = 2\n} ProcessingMode;\n\n// External
      function declarations\nextern int validate_record(DataRecord* record);\nextern
      void log_error(const char* message);\nextern DataRecord* allocate_buffer(int
      size);\n\nProcessingMode current_mode = MODE_NORMAL;\n\nint process_data_array(DataRecord*
      input_array, int array_size, DataRecord** output_array) {\n    if (input_array
      == NULL || array_size <= 0) {\n        if (current_mode == MODE_DEBUG) {\n            log_error(\"Invalid
      input parameters\");\n        }\n        return -1;\n    }\n    \n    // Allocate
      output buffer\n    *output_array = allocate_buffer(array_size);\n    if (*output_array
      == NULL) {\n        log_error(\"Memory allocation failed\");\n        return
      -2;\n    }\n    \n    int processed_count = 0;\n    for (int i = 0; i < array_size;
      i++) {\n        // Validate each record using external function\n        int
      validation_result = validate_record(&input_array[i]);\n        \n        if
      (validation_result > 0) {\n            // Copy valid record to output with modified
      value\n            (*output_array)[processed_count].id = input_array[i].id;\n            (*output_array)[processed_count].value
      = input_array[i].value * 1.5f;\n            (*output_array)[processed_count].status
      = ''V''; // Valid\n            processed_count++;\n        } else if (current_mode
      == MODE_ERROR) {\n            // In error mode, stop processing on first invalid
      record\n            log_error(\"Invalid record encountered in error mode\");\n            return
      processed_count;\n        }\n        // In normal mode, skip invalid records
      and continue\n    }\n    \n    return processed_count;\n}\n```\n\n### Example
      1: Testing Null Input Handling with Branching\n\n**Requirement REQ-DP-001:**
      The `process_data_array` function shall return -1 when input_array is NULL and
      log an error message if in DEBUG mode.\n\n```json\n{\n  \"test_name\": \"Test_Null_Input_Debug_Mode\",\n  \"test_description\":
      \"Tests process_data_array with NULL input in DEBUG mode to ensure it returns
      -1 and calls log_error.\",\n  \"requirement_id\": \"REQ-DP-001\",\n  \"unit_name\":
      \"data_processor\",\n  \"subprogram_name\": \"process_data_array\",\n  \"input_values\":
      [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\", \"value\":
      \"MODE_DEBUG\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<null>>\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"5\" },\n  ],\n  \"expected_values\": [\n    { \"identifier\": \"uut_prototype_stubs.log_error.message\",
      \"value\": \"\\\"Invalid input parameters\\\"\" },\n    { \"identifier\": \"data_processor.process_data_array.return\",
      \"value\": \"-1\" }\n  ]\n}\n```\n\n### Example 2: Testing Memory Allocation
      with Stubbing\n\n**Requirement REQ-DP-002:** The `process_data_array` function
      shall return -2 and log an error when memory allocation fails.\n\n```json\n{\n  \"test_name\":
      \"Test_Memory_Allocation_Failure\",\n  \"test_description\": \"Tests process_data_array
      when allocate_buffer returns NULL to ensure proper error handling.\",\n  \"requirement_id\":
      \"REQ-DP-002\",\n  \"unit_name\": \"data_processor\",\n  \"subprogram_name\":
      \"process_data_array\",\n  \"input_values\": [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\",
      \"value\": \"MODE_NORMAL\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<malloc 1>>\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].id\",
      \"value\": \"1\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].value\",
      \"value\": \"10.5\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].status\",
      \"value\": \"''A''\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"2\" },\n    { \"identifier\": \"uut_prototype_stubs.allocate_buffer.return\",
      \"value\": \"<<null>>\" },\n  ],\n  \"expected_values\": [\n    { \"identifier\":
      \"uut_prototype_stubs.log_error.message\", \"value\": \"\\\"Memory allocation
      failed\\\"\" },\n    { \"identifier\": \"data_processor.process_data_array.return\",
      \"value\": \"-2\" }\n  ]\n}\n```\n\n### Example 3: Testing Complex Processing
      with Multiple Stubs\n\n**Requirement REQ-DP-003:** The `process_data_array`
      function shall process valid records by multiplying their values by 1.5 and
      setting status to ''V''.\n\n```json\n{\n  \"test_name\": \"Test_Valid_Record_Processing\",\n  \"test_description\":
      \"Tests process_data_array with mixed valid/invalid records to ensure proper
      processing and output.\",\n  \"requirement_id\": \"REQ-DP-003\",\n  \"unit_name\":
      \"data_processor\",\n  \"subprogram_name\": \"process_data_array\",\n  \"input_values\":
      [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\", \"value\":
      \"MODE_NORMAL\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].id\",
      \"value\": \"100\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].value\",
      \"value\": \"20.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].status\",
      \"value\": \"''A''\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].id\",
      \"value\": \"200\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].status\",
      \"value\": \"''B''\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[2].id\",
      \"value\": \"300\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[2].value\",
      \"value\": \"40.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[2].status\",
      \"value\": \"''C''\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"3\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0]\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"uut_prototype_stubs.validate_record.return\",
      \"value\": \"1,0,1\" }\n  ],\n  \"expected_values\": [\n    { \"identifier\":
      \"data_processor.process_data_array.return\", \"value\": \"2\" },\n    { \"identifier\":
      \"data_processor.process_data_array.output_array[0][0].id\", \"value\": \"100\"
      },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].status\",
      \"value\": \"''V''\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][1].id\",
      \"value\": \"300\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][1].value\",
      \"value\": \"60.0\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][1].status\",
      \"value\": \"''V''\" }\n  ]\n}\n```\n\n### Example 4: Testing Error Mode with
      Early Termination\n\n**Requirement REQ-DP-004:** The `process_data_array` function
      shall stop processing and return the current count when an invalid record is
      encountered in ERROR mode.\n\n```json\n{\n  \"test_name\": \"Test_Error_Mode_Early_Termination\",\n  \"test_description\":
      \"Tests process_data_array in ERROR mode to ensure it stops processing on first
      invalid record.\",\n  \"requirement_id\": \"REQ-DP-004\",\n  \"unit_name\":
      \"data_processor\",\n  \"subprogram_name\": \"process_data_array\",\n  \"input_values\":
      [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\", \"value\":
      \"MODE_ERROR\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].id\",
      \"value\": \"100\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].value\",
      \"value\": \"20.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].id\",
      \"value\": \"200\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"3\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0]\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"uut_prototype_stubs.allocate_buffer.size\",
      \"value\": \"3\" },\n    { \"identifier\": \"uut_prototype_stubs.validate_record.return\",
      \"value\": \"1,-1\" },\n  ],\n  \"expected_values\": [\n    { \"identifier\":
      \"uut_prototype_stubs.log_error.message\", \"value\": \"\\\"Invalid record encountered
      in error mode\\\"\" },\n    { \"identifier\": \"data_processor.process_data_array.return\",
      \"value\": \"1\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].id\",
      \"value\": \"100\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].status\",
      \"value\": \"''V''\" }\n  ]\n}\n```\n\nRelevant Code:\n```cpp\n// Unit: manager\n\n//
      Definitions of types, called functions and data structures:\n\ntypedef float
      FLOAT;\n\nenum boolean { v_false, v_true };\n\nenum soups { NO_SOUP, ONION,
      CHOWDER };\n\nenum salads { NO_SALAD, CAESAR, GREEN };\n\nenum entrees { NO_ENTREE,
      STEAK, CHICKEN, LOBSTER, PASTA };\n\nenum desserts { NO_DESSERT, CAKE, PIE,
      FRUIT };\n\nenum beverages { NO_BEVERAGE, WINE, BEER, MIXED_DRINK, SODA };\n\nstruct
      order_type\n{\n  enum soups Soup;\n  enum salads Salad;\n  enum entrees Entree;\n  enum
      desserts Dessert;\n  enum beverages Beverage;\n};\n\ntypedef unsigned short
      seat_index_type;\n\ntypedef unsigned short table_index_type;\n\nstruct table_data_type\n{\n  enum
      boolean Is_Occupied;\n  seat_index_type Number_In_Party;\n  char Designator;\n  char
      Wait_Person[10];\n  struct order_type Order[4];\n  FLOAT Check_Total;\n};\n\nstruct
      table_data_type Get_Table_Record(table_index_type Table);\n\nvoid Update_Table_Record(table_index_type
      Table, struct table_data_type Data);\n\n// Code for Clear_Table:\nint Clear_Table(table_index_type
      Table)\n{\n  struct table_data_type Table_Data;\n  seat_index_type Seat;\n  Table_Data
      = Get_Table_Record(Table);\n  Table_Data.Is_Occupied = v_false;\n  Table_Data.Number_In_Party
      = 1;\n\n  for (Seat=0; Seat < 4; Seat++){\n      Table_Data.Order[Seat].Soup
      = NO_SOUP;\n      Table_Data.Order[Seat].Salad = NO_SALAD;\n      Table_Data.Order[Seat].Entree
      = NO_ENTREE;\n      Table_Data.Order[Seat].Dessert = NO_DESSERT;\n      Table_Data.Order[Seat].Beverage
      = NO_BEVERAGE;\n   }\n\n  Table_Data.Check_Total = 0;\n\n  Update_Table_Record(Table,
      Table_Data);\n  return 0;\n}\n```\n\nExample Test Cases:\n```json\n[\n  {\n    \"test_name\":
      \"BASIS-PATH-001-PARTIAL\",\n    \"test_description\": \"This is an automatically
      generated test case.\\nTest Path 1\\n(1) for (Seat < 4) ==> FALSE\\nTest Case
      Generation Notes:\\nConflict: Unable to control expression-to-expression comparison
      in branch 1\",\n    \"unit_name\": \"manager\",\n    \"subprogram_name\": \"Clear_Table\",\n    \"input_values\":
      [\n      {\n        \"identifier\": \"manager.Clear_Table.Table\",\n        \"value\":
      \"<<MIN>>\"\n      }\n    ],\n    \"expected_values\": [],\n    \"requirement_id\":
      null\n  }\n]\n```\n\nRequirements:\n1. FR11.1: The system will support 6 tables.\n2.
      FR18.1: Clearing a table updates the table''s occupied status to false within
      the table database.\n\nDetailed task description:\nBased on the above requirements
      and code, generate unit tests that exercise all requirements.\nMake sure the
      generated test cases clearly test the provided requirements.\n\nSolve the problem
      using the following approach:\nFor each requirement in order...\n    1. Come
      up with descriptive (unique) name for the test case and describe in natural
      language how this test exercises the requirement\n    2. Provide the name of
      the unit being tested (base file name without extension) and the name of the
      subprogram being tested (function name)\n    3. Provide the input and expected
      values by providing the correct identifier and value in the syntax outlined
      above.\n\nYou are allowed to use the following identifiers in your test case:\n-
      manager.Clear_Table.Table\n- manager.Clear_Table.return\n- uut_prototype_stubs.Get_Table_Record.Table\n-
      uut_prototype_stubs.Get_Table_Record.return.Is_Occupied\n- uut_prototype_stubs.Get_Table_Record.return.Number_In_Party\n-
      uut_prototype_stubs.Get_Table_Record.return.Designator\n- uut_prototype_stubs.Get_Table_Record.return.Wait_Person\n-
      uut_prototype_stubs.Get_Table_Record.return.Order[i].Soup (for all: i in 0..3)\n-
      uut_prototype_stubs.Get_Table_Record.return.Order[i].Salad (for all: i in 0..3)\n-
      uut_prototype_stubs.Get_Table_Record.return.Order[i].Entree (for all: i in 0..3)\n-
      uut_prototype_stubs.Get_Table_Record.return.Order[i].Dessert (for all: i in
      0..3)\n- uut_prototype_stubs.Get_Table_Record.return.Order[i].Beverage (for
      all: i in 0..3)\n- uut_prototype_stubs.Get_Table_Record.return.Check_Total\n-
      uut_prototype_stubs.Update_Table_Record.Table\n- uut_prototype_stubs.Update_Table_Record.Data.Is_Occupied\n-
      uut_prototype_stubs.Update_Table_Record.Data.Number_In_Party\n- uut_prototype_stubs.Update_Table_Record.Data.Designator\n-
      uut_prototype_stubs.Update_Table_Record.Data.Wait_Person\n- uut_prototype_stubs.Update_Table_Record.Data.Order[i].Soup
      (for all: i in 0..3)\n- uut_prototype_stubs.Update_Table_Record.Data.Order[i].Salad
      (for all: i in 0..3)\n- uut_prototype_stubs.Update_Table_Record.Data.Order[i].Entree
      (for all: i in 0..3)\n- uut_prototype_stubs.Update_Table_Record.Data.Order[i].Dessert
      (for all: i in 0..3)\n- uut_prototype_stubs.Update_Table_Record.Data.Order[i].Beverage
      (for all: i in 0..3)\n- uut_prototype_stubs.Update_Table_Record.Data.Check_Total\n\nYou
      MUST set an input value for all input to the functions, used globals and called
      stubs.\nIf you do not ensure this, it can happen that your test does not cover
      the correct path corresponding to the requirement.\nAn expected value is not
      required for all identifiers. Only for those relevant to the requirement.\n\nStubbed-by-default
      called functions (no behaviour is implemented, you can use identifiers to simulate
      a return value) called by Clear_Table:\n- Get_Table_Record\n- Update_Table_Record\n\nNotes:\n-
      You are NOT allowed to invent any syntax that is not specified in the syntax
      reference. Stick to the syntax provided.\n- You are NOT allowed to invent any
      units or functions that are not present in the provided code.\n- This is a highly
      critical task, please ensure that the test cases are correct and complete and
      do not contain any logical or syntactical errors.\n- Test cases are independent
      of each other, i.e., they should not rely on one being run before the other
      (or environment being modified by one).\n- Generate exactly one test case per
      requirement.\n- In case the requirement and the code differ, the requirement
      is what you should test, i.e., it is the source of truth.\n- It might be that
      some of the provided code context and identifiers are incorrect. Use the most
      obviously correct parts of both and ignore the rest.\n\nReturn your answer in
      the following format:\n```json\n{\n    \"test_case_for_requirement_1\": <test
      case testing the first requirement in the list>,\n    \"test_case_for_requirement_2\":
      <test case testing the second requirement in the list>,\n    ...\n}\n```\n",
      "role": "user"}], "model": "gpt-4.1", "response_format": {"json_schema": {"name":
      "TestGenerationResult", "schema": {"$defs": {"ExpectedValueMapping": {"additionalProperties":
      false, "properties": {"identifier": {"$ref": "#/$defs/Identifier"}, "value":
      {"title": "Value", "type": "string"}}, "required": ["identifier", "value"],
      "title": "ExpectedValueMapping", "type": "object"}, "Identifier": {"enum": ["manager.Clear_Table.Table",
      "manager.Clear_Table.return", "uut_prototype_stubs.Get_Table_Record.Table",
      "uut_prototype_stubs.Get_Table_Record.return.Is_Occupied", "uut_prototype_stubs.Get_Table_Record.return.Number_In_Party",
      "uut_prototype_stubs.Get_Table_Record.return.Designator", "uut_prototype_stubs.Get_Table_Record.return.Wait_Person",
      "uut_prototype_stubs.Get_Table_Record.return.Order[0].Soup", "uut_prototype_stubs.Get_Table_Record.return.Order[0].Salad",
      "uut_prototype_stubs.Get_Table_Record.return.Order[0].Entree", "uut_prototype_stubs.Get_Table_Record.return.Order[0].Dessert",
      "uut_prototype_stubs.Get_Table_Record.return.Order[0].Beverage", "uut_prototype_stubs.Get_Table_Record.return.Order[1].Soup",
      "uut_prototype_stubs.Get_Table_Record.return.Order[1].Salad", "uut_prototype_stubs.Get_Table_Record.return.Order[1].Entree",
      "uut_prototype_stubs.Get_Table_Record.return.Order[1].Dessert", "uut_prototype_stubs.Get_Table_Record.return.Order[1].Beverage",
      "uut_prototype_stubs.Get_Table_Record.return.Order[2].Soup", "uut_prototype_stubs.Get_Table_Record.return.Order[2].Salad",
      "uut_prototype_stubs.Get_Table_Record.return.Order[2].Entree", "uut_prototype_stubs.Get_Table_Record.return.Order[2].Dessert",
      "uut_prototype_stubs.Get_Table_Record.return.Order[2].Beverage", "uut_prototype_stubs.Get_Table_Record.return.Order[3].Soup",
      "uut_prototype_stubs.Get_Table_Record.return.Order[3].Salad", "uut_prototype_stubs.Get_Table_Record.return.Order[3].Entree",
      "uut_prototype_stubs.Get_Table_Record.return.Order[3].Dessert", "uut_prototype_stubs.Get_Table_Record.return.Order[3].Beverage",
      "uut_prototype_stubs.Get_Table_Record.return.Check_Total", "uut_prototype_stubs.Update_Table_Record.Table",
      "uut_prototype_stubs.Update_Table_Record.Data.Is_Occupied", "uut_prototype_stubs.Update_Table_Record.Data.Number_In_Party",
      "uut_prototype_stubs.Update_Table_Record.Data.Designator", "uut_prototype_stubs.Update_Table_Record.Data.Wait_Person",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[0].Soup", "uut_prototype_stubs.Update_Table_Record.Data.Order[0].Salad",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[0].Entree", "uut_prototype_stubs.Update_Table_Record.Data.Order[0].Dessert",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[0].Beverage", "uut_prototype_stubs.Update_Table_Record.Data.Order[1].Soup",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[1].Salad", "uut_prototype_stubs.Update_Table_Record.Data.Order[1].Entree",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[1].Dessert", "uut_prototype_stubs.Update_Table_Record.Data.Order[1].Beverage",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[2].Soup", "uut_prototype_stubs.Update_Table_Record.Data.Order[2].Salad",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[2].Entree", "uut_prototype_stubs.Update_Table_Record.Data.Order[2].Dessert",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[2].Beverage", "uut_prototype_stubs.Update_Table_Record.Data.Order[3].Soup",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[3].Salad", "uut_prototype_stubs.Update_Table_Record.Data.Order[3].Entree",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[3].Dessert", "uut_prototype_stubs.Update_Table_Record.Data.Order[3].Beverage",
      "uut_prototype_stubs.Update_Table_Record.Data.Check_Total"], "title": "Identifier",
      "type": "string"}, "InputValueMapping": {"additionalProperties": false, "properties":
      {"identifier": {"$ref": "#/$defs/Identifier"}, "value": {"title": "Value", "type":
      "string"}}, "required": ["identifier", "value"], "title": "InputValueMapping",
      "type": "object"}, "TestCase": {"additionalProperties": false, "properties":
      {"expected_values": {"items": {"$ref": "#/$defs/ExpectedValueMapping"}, "title":
      "Expected Values", "type": "array"}, "input_values": {"items": {"$ref": "#/$defs/InputValueMapping"},
      "title": "Input Values", "type": "array"}, "requirement_id": {"title": "Requirement
      Id", "type": "string"}, "subprogram_name": {"title": "Subprogram Name", "type":
      "string"}, "test_description": {"title": "Test Description", "type": "string"},
      "test_name": {"title": "Test Name", "type": "string"}, "unit_name": {"title":
      "Unit Name", "type": "string"}}, "required": ["test_name", "test_description",
      "requirement_id", "unit_name", "subprogram_name", "input_values", "expected_values"],
      "title": "TestCase", "type": "object"}}, "additionalProperties": false, "properties":
      {"test_case_for_requirement": {"$ref": "#/$defs/TestCase"}}, "required": ["test_case_for_requirement",
      "test_case_for_requirement"], "title": "TestGenerationResult", "type": "object"},
      "strict": true}, "type": "json_schema"}, "seed": 42, "stream": false, "temperature":
      0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      api-key:
      - REDACTED
      authorization:
      - REDACTED
      connection:
      - keep-alive
      content-length:
      - '31255'
      content-type:
      - application/json
      host:
      - REDACTED
      user-agent:
      - AsyncAzureOpenAI/Python 1.58.1
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-helper-method:
      - beta.chat.completions.parse
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.58.1
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.12
    method: POST
    uri: https://rg-rds-play-openai-pes-ppt.openai.azure.com/openai/deployments/gpt-4.1/chat/completions?api-version=2024-12-01-preview
  response:
    body:
      string: '{"choices":[{"content_filter_results":{"hate":{"filtered":false,"severity":"safe"},"protected_material_code":{"filtered":false,"detected":false},"protected_material_text":{"filtered":false,"detected":false},"self_harm":{"filtered":false,"severity":"safe"},"sexual":{"filtered":false,"severity":"safe"},"violence":{"filtered":false,"severity":"safe"}},"finish_reason":"stop","index":0,"logprobs":null,"message":{"annotations":[],"content":"{\n  \"test_case_for_requirement_1\":
        {\n    \"test_name\": \"Test_Clear_Table_Accepts_All_Six_Table_Indices\",\n    \"test_description\":
        \"Verifies that Clear_Table can be called for all six supported table indices
        (0 to 5), as required by FR11.1. This test uses table index 5 (the highest
        valid index) to ensure the function supports the full range.\",\n    \"requirement_id\":
        \"FR11.1\",\n    \"unit_name\": \"manager\",\n    \"subprogram_name\": \"Clear_Table\",\n    \"input_values\":
        [\n      { \"identifier\": \"manager.Clear_Table.Table\", \"value\": \"5\"
        },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.Table\",
        \"value\": \"5\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Is_Occupied\",
        \"value\": \"v_true\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Number_In_Party\",
        \"value\": \"4\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Designator\",
        \"value\": \"''E''\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Wait_Person\",
        \"value\": \"\\\"Alice\\\"\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Soup\",
        \"value\": \"ONION\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Salad\",
        \"value\": \"CAESAR\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Entree\",
        \"value\": \"STEAK\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Dessert\",
        \"value\": \"CAKE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Beverage\",
        \"value\": \"WINE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Soup\",
        \"value\": \"CHOWDER\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Salad\",
        \"value\": \"GREEN\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Entree\",
        \"value\": \"CHICKEN\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Dessert\",
        \"value\": \"PIE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Beverage\",
        \"value\": \"BEER\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Entree\",
        \"value\": \"LOBSTER\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Dessert\",
        \"value\": \"FRUIT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Beverage\",
        \"value\": \"MIXED_DRINK\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Entree\",
        \"value\": \"PASTA\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Beverage\",
        \"value\": \"SODA\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Check_Total\",
        \"value\": \"123.45\" }\n    ],\n    \"expected_values\": [\n      { \"identifier\":
        \"manager.Clear_Table.return\", \"value\": \"0\" }\n    ]\n  },\n  \"test_case_for_requirement_2\":
        {\n    \"test_name\": \"Test_Clear_Table_Updates_Occupied_Status_To_False\",\n    \"test_description\":
        \"Verifies that after calling Clear_Table, the table''s occupied status is
        set to false in the table database by checking the value passed to Update_Table_Record.
        This directly tests FR18.1.\",\n    \"requirement_id\": \"FR18.1\",\n    \"unit_name\":
        \"manager\",\n    \"subprogram_name\": \"Clear_Table\",\n    \"input_values\":
        [\n      { \"identifier\": \"manager.Clear_Table.Table\", \"value\": \"2\"
        },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.Table\",
        \"value\": \"2\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Is_Occupied\",
        \"value\": \"v_true\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Number_In_Party\",
        \"value\": \"3\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Designator\",
        \"value\": \"''B''\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Wait_Person\",
        \"value\": \"\\\"Bob\\\"\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Soup\",
        \"value\": \"ONION\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Salad\",
        \"value\": \"CAESAR\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Entree\",
        \"value\": \"STEAK\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Dessert\",
        \"value\": \"CAKE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Beverage\",
        \"value\": \"WINE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Soup\",
        \"value\": \"CHOWDER\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Salad\",
        \"value\": \"GREEN\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Entree\",
        \"value\": \"CHICKEN\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Dessert\",
        \"value\": \"PIE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Beverage\",
        \"value\": \"BEER\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Entree\",
        \"value\": \"LOBSTER\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Dessert\",
        \"value\": \"FRUIT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Beverage\",
        \"value\": \"MIXED_DRINK\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Entree\",
        \"value\": \"PASTA\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Beverage\",
        \"value\": \"SODA\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Check_Total\",
        \"value\": \"99.99\" }\n    ],\n    \"expected_values\": [\n      { \"identifier\":
        \"uut_prototype_stubs.Update_Table_Record.Table\", \"value\": \"2\" },\n      {
        \"identifier\": \"uut_prototype_stubs.Update_Table_Record.Data.Is_Occupied\",
        \"value\": \"v_false\" }\n    ]\n  }\n}","refusal":null,"role":"assistant"}}],"created":1752564162,"id":"chatcmpl-BtUHq708LBsZZEDKPlr5kx9RiC7I7","model":"gpt-4.1-2025-04-14","object":"chat.completion","prompt_filter_results":[{"prompt_index":0,"content_filter_results":{"hate":{"filtered":false,"severity":"safe"},"jailbreak":{"filtered":false,"detected":false},"self_harm":{"filtered":false,"severity":"safe"},"sexual":{"filtered":false,"severity":"safe"},"violence":{"filtered":false,"severity":"safe"}}}],"system_fingerprint":"fp_07e970ab25","usage":{"completion_tokens":1905,"completion_tokens_details":{"accepted_prediction_tokens":0,"audio_tokens":0,"reasoning_tokens":0,"rejected_prediction_tokens":0},"prompt_tokens":7165,"prompt_tokens_details":{"audio_tokens":0,"cached_tokens":0},"total_tokens":9070}}

        '
    headers:
      Content-Length:
      - '8612'
      Content-Type:
      - application/json
      Date:
      - Tue, 15 Jul 2025 07:22:53 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      apim-request-id:
      - fa64d3b3-723e-45a9-b11b-ff231a8e7e4d
      azureml-model-session:
      - d076-20250625161808
      cmp-upstream-response-duration:
      - '11865'
      x-accel-buffering:
      - 'no'
      x-content-type-options:
      - nosniff
      x-ms-deployment-name:
      - gpt-4.1
      x-ms-rai-invoked:
      - 'true'
      x-ms-region:
      - Sweden Central
      x-ratelimit-limit-requests:
      - '1006'
      x-ratelimit-limit-tokens:
      - '1006000'
      x-ratelimit-remaining-requests:
      - '1003'
      x-ratelimit-remaining-tokens:
      - '987757'
      x-request-id:
      - 943d5040-9a8c-4e70-89f3-d302d2560175
    status:
      code: 200
      message: OK
- request:
    body: '{"max_completion_tokens": 8192, "messages": [{"content": "You are an AI
      assistant that generates test code for given requirements.", "role": "system"},
      {"content": "\nBased on the following requirements, references, and code, generate
      one test case per given requirement that exercises it.\n\nTest framework reference:\n##
      Test Case Format\nThe format of a test case is as follows:\n{\n    \"test_name\":
      <some descriptive test name>,\n    \"test_description\": <more details about
      the test>\n    \"requirement_id\": <requirement being tested by this test> (optional)\n    \"unit_name\":
      <unit_name>,\n    \"subprogram_name\": <subprogram_name>,\n    \"input_values\":
      [\n        { \"identifier\": <identifier>, \"value\": <value> },\n        ...\n    ],\n    \"expected_values\":
      [\n        { \"identifier\": <identifier>, \"value\": <value> },\n        ...\n    ]\n}\n\n###
      Identifier and Value Syntax\nThe following sections describe the syntax for
      specifying the `identifier` and `value` fields in the test case format. `unit_name`
      and `subprogram_name` refer to file names of C/C++ files (without extension)
      and function names in these files respectively (to refer to methods in classes
      use `<class name>::<method name>`). It is only possible to include identifiers
      from different units and other subprograms if they are called/used in the subprogram
      being tested.\n\n#### Numeric Types\n- Assign the number directly.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.parameter\", \"value\": \"42\" }\n    { \"identifier\":
      \"unit.subprogram.parameter\", \"value\": \"84\" }\n\n#### Structure Types\n-
      Use the standard C syntax to refer to fields within structures.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.struct_param.field\", \"value\": \"CAESAR\"
      }\n    { \"identifier\": \"unit.subprogram.struct_param.field\", \"value\":
      \"STEAK\" }\n\n#### Enumeration Types\n- Use the enumeral value directly.\n  -
      Example:\n    { \"identifier\": \"unit.subprogram.enum_param\", \"value\": \"ENUM_VALUE\"
      }\n\n#### Character and String Types\n- Use standard C delimiters for characters
      and strings.\n  - Example:\n    { \"identifier\": \"unit.subprogram.char_param\",
      \"value\": \"''a''\" }\n    { \"identifier\": \"unit.subprogram.string_param\",
      \"value\": \"\\\"Hello, World\\\"\" }\n- Treat strings as atomic values to set.
      Do not attempt to treat them as a char array, i.e., do not malloc or attempt
      to access chars at individual indices.\n\n#### Pointer and Array Types\n- For
      constrained arrays, specify the index and value.\n  - Example:\n    { \"identifier\":
      \"unit.subprogram.array_param[2]\", \"value\": \"42\" }\n- For unconstrained
      arrays, use `<<malloc [amount of slots to allocate as integer]>>` to allocate
      memory.\n  - Example:\n    { \"identifier\": \"unit.subprogram.array_param\",
      \"value\": \"<<malloc 2>>\" }\n    { \"identifier\": \"unit.subprogram.array_param[1]\",
      \"value\": \"3\" }\n- For pointers, use index 0 to access it (generally pointers
      and unconstrained arrays are the same after all)\n  - Example:\n    { \"identifier\":
      \"unit.subprogram.ptr_param[0]\", \"value\": \"12\" }\n- If you want to make
      something null then use `<<null>>`.\n  - Example:\n    { \"identifier\": \"unit.subprogram.pointer_param\",
      \"value\": \"<<null>>\" }\n    or\n    { \"identifier\": \"unit.subprogram.array_param\",
      \"value\": \"<<null>>\" }\n\n#### Function Return Parameters\n- Use the keyword
      `return` for function return values.\n  - Example:\n    { \"identifier\": \"unit.subprogram.return\",
      \"value\": \"23.0\" }\n\n#### Global Objects\n- Use the syntax `UNIT.<<GLOBAL>>.OBJECT`
      to set values for global objects.\n  - Example:\n    { \"identifier\": \"unit.<<GLOBAL>>.global_object.field\",
      \"value\": \"VALUE\" }\n- Note: `UNIT.OBJECT` is NEVER valid syntax\n\n#####
      Classes\n- To set and expect values of methods in a class (unlike standalone
      subprograms), it is necessary to first instantiate a base object using a constructor\n-
      Use the syntax `UNIT.<<GLOBAL>>.(cl).CLASS_NAME.SUBCLASS_NAME.<<constructor>>.<<call>>`
      to call the constructor of `SUBCLASS` to instantiate a `CLASS` object\n  - Example:\n    {
      \"identifier\": \"unit.<<GLOBAL>>.(cl).class_name.class_name.<<constructor>>.<<call>>\",
      \"value\": \"0\" }\n  - Note: The value in this case is irrelevant and always
      set to 0.\n- To set and expect member variables of a constructed object use
      the syntax `UNIT.<<GLOBAL>>.(cl).CLASS_NAME.SUBCLASS_NAME.MEMBER_NAME`\n  -
      Example:\n    { \"identifier\": \"unit.<<GLOBAL>>.(cl).class_name.class_name.member\",
      \"value\": \"test\" }\n  - Note: If the member is a structured entity like a
      struct or a class instance you can access the subfields like described in the
      `Structure Types` section.\n- To set and expect arguments and return values
      of methods in a class use the name do so like you would for regular subprograms
      except that you prefix the name with the class name and `::`\n  - Example:\n    {
      \"identifier\": \"unit.class_name::member_method.parameter\", \"value\": \"2\"
      }\n  - Note: If you use this ALWAYS first call the class constructor!\n\n####
      Range of Values for Input Data\n- Use range expressions to test a range of values.\n  -
      Example:\n    { \"identifier\": \"unit.subprogram.parameter\", \"value\": \"vary
      from: 0.0 to: 90.0 by: 0.1\" }\n\n#### Range of Values for Expected Results\n-
      Use the syntax `<min> .. <max>` for expected value ranges.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.parameter\", \"value\": \"257.1 .. 259.9\"
      }\n\n#### List of Values\n- Use a comma-separated list for multiple values.\n  -
      Example:\n    { \"identifier\": \"unit.subprogram.parameter\", \"value\": \"1,2,4\"
      }\n- Use parentheses for repeated values.\n  - Example:\n    { \"identifier\":
      \"unit.subprogram.parameter\", \"value\": \"1,(4)2,4\" }\n- Note: This is used
      in case something needs to be set multiple times (like for a stub return) during
      one call, NOT to specify values in an array. To do so, use the regular index
      syntax as outlined above instead.\n\n#### Working with Overloaded Subprograms\n-
      Append the parameter type list to the subprogram name.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram(int).parameter\", \"value\": \"3\" }\n    {
      \"identifier\": \"unit.subprogram(char).parameter\", \"value\": \"''d''\" }\n\n####
      Boolean Values\n- Use `1` for `true` and `0` for `false`.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.boolean_param\", \"value\": \"1\" }\n    {
      \"identifier\": \"unit.subprogram.boolean_param\", \"value\": \"0\" }\n\n####
      Accessing Subprograms Outside the Unit\n- Use `uut_prototype_stubs` as the unit
      for subprograms defined outside of the unit of the test case.\n  - Example:\n    {
      \"identifier\": \"uut_prototype_stubs.name_of_external_subprogram.parameter\",
      \"value\": \"42\" }\n\n#### Emulating stubbed pointer manipulating functions\n-
      Normally it is easy to emulate a stubbed function returning some value (by setting
      the return value of the stubbed function)\n- This is not possible if the stubbed
      function works with pointers as only values can be specified (so only ever the
      contents of a pointer), e.g., functions like memcpy\n- Therefore, in these cases
      you can emulate the stubbed function setting the contents of the pointer using
      <<pointer value_to_set>>\n  - For example assume we have a pointer input variable
      *float x that is modified by a stubbed called to foo(*float pointer_to_modify),
      i.e., foo(x). Then you can change the value, i.e., *x to 10 like so:\n    {
      \"identifier\": \"uut_prototype_stubs.foo.pointer_to_modify\", \"value\": \"<<pointer
      10>>\" }\n  - The other input values of the function of course do not need to
      be specified explicitly (unless you also want to see the values of those input
      pointers)\n- You can only set one variable like this per test case due to technical
      reasons so choose wisely (if you use this feature)\n\n#### Emulating multiple
      function calls\n- Use the multiple value syntax, one value will be read everytime
      the stubbed function is called\n  - Example (foo is called twice, and should
      return 2 the first time and 3 the second):\n    { \"identifier\": \"uut_prototype_stubs.foo.return\",
      \"value\": \"2,3\" }\n\n## Test Case Execution\n1. The test framework will call
      the specified subprogram/function\n2. When a value of a variable would be read,
      if it is specified as a test value, it is set to that value instead\n3. After
      the subprogram finishes, the expected values are checked against the actual
      values at that point\n\nAll tests are executed in isolation. The execution of
      one test does not influence the execution of others.\n\n### Stubbing behaviour\n-
      All function calls from external files, i.e, those referenced with `uut_prototype_stubs`
      are stubbed automatically and do not implement any behaviour. Setting their
      input values has no effect on their output values (instead default values are
      output unless you specify values for them).\n- If any of the parameters or return
      value of a called function (which is not automatically stubbed as outlined above)
      are set or expected to be some value using an identifier, the function will
      be stubbed during execution and not implement any behaviour. In this case it
      is forbidden to also expect the return value to equal something (it won''t as
      the function will be stubbed).\n  - If none are set or expected the function
      will execute as normal\n\n### Default identifier values and initialization\n-
      In general any value not set (input of course), will fall back to a default
      value. However this should be avoided to prevent undefined behaviour. This means
      all input variables (and outputs of stubbed values) should be exhaustively described.\n-
      Do not set an identifier multiple times, it just results in overriding of the
      previous value\n- To access methods of a class and set values it is imperative
      to first instantiate the class using a constructor. For all classes a default
      object is ready to be initialized if needed using the respective constructor.\n-
      Similarly, arrays or pointers should always be allocated\n\n## Examples\n\nLet''s
      consider a more complex C++ code snippet in a file named `data_processor.cpp`:\n\n```cpp\n//
      File: data_processor.cpp\n// Unit: data_processor\n\ntypedef struct {\n    int
      id;\n    float value;\n    char status;\n} DataRecord;\n\ntypedef enum {\n    MODE_NORMAL
      = 0,\n    MODE_DEBUG = 1,\n    MODE_ERROR = 2\n} ProcessingMode;\n\n// External
      function declarations\nextern int validate_record(DataRecord* record);\nextern
      void log_error(const char* message);\nextern DataRecord* allocate_buffer(int
      size);\n\nProcessingMode current_mode = MODE_NORMAL;\n\nint process_data_array(DataRecord*
      input_array, int array_size, DataRecord** output_array) {\n    if (input_array
      == NULL || array_size <= 0) {\n        if (current_mode == MODE_DEBUG) {\n            log_error(\"Invalid
      input parameters\");\n        }\n        return -1;\n    }\n    \n    // Allocate
      output buffer\n    *output_array = allocate_buffer(array_size);\n    if (*output_array
      == NULL) {\n        log_error(\"Memory allocation failed\");\n        return
      -2;\n    }\n    \n    int processed_count = 0;\n    for (int i = 0; i < array_size;
      i++) {\n        // Validate each record using external function\n        int
      validation_result = validate_record(&input_array[i]);\n        \n        if
      (validation_result > 0) {\n            // Copy valid record to output with modified
      value\n            (*output_array)[processed_count].id = input_array[i].id;\n            (*output_array)[processed_count].value
      = input_array[i].value * 1.5f;\n            (*output_array)[processed_count].status
      = ''V''; // Valid\n            processed_count++;\n        } else if (current_mode
      == MODE_ERROR) {\n            // In error mode, stop processing on first invalid
      record\n            log_error(\"Invalid record encountered in error mode\");\n            return
      processed_count;\n        }\n        // In normal mode, skip invalid records
      and continue\n    }\n    \n    return processed_count;\n}\n```\n\n### Example
      1: Testing Null Input Handling with Branching\n\n**Requirement REQ-DP-001:**
      The `process_data_array` function shall return -1 when input_array is NULL and
      log an error message if in DEBUG mode.\n\n```json\n{\n  \"test_name\": \"Test_Null_Input_Debug_Mode\",\n  \"test_description\":
      \"Tests process_data_array with NULL input in DEBUG mode to ensure it returns
      -1 and calls log_error.\",\n  \"requirement_id\": \"REQ-DP-001\",\n  \"unit_name\":
      \"data_processor\",\n  \"subprogram_name\": \"process_data_array\",\n  \"input_values\":
      [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\", \"value\":
      \"MODE_DEBUG\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<null>>\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"5\" },\n  ],\n  \"expected_values\": [\n    { \"identifier\": \"uut_prototype_stubs.log_error.message\",
      \"value\": \"\\\"Invalid input parameters\\\"\" },\n    { \"identifier\": \"data_processor.process_data_array.return\",
      \"value\": \"-1\" }\n  ]\n}\n```\n\n### Example 2: Testing Memory Allocation
      with Stubbing\n\n**Requirement REQ-DP-002:** The `process_data_array` function
      shall return -2 and log an error when memory allocation fails.\n\n```json\n{\n  \"test_name\":
      \"Test_Memory_Allocation_Failure\",\n  \"test_description\": \"Tests process_data_array
      when allocate_buffer returns NULL to ensure proper error handling.\",\n  \"requirement_id\":
      \"REQ-DP-002\",\n  \"unit_name\": \"data_processor\",\n  \"subprogram_name\":
      \"process_data_array\",\n  \"input_values\": [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\",
      \"value\": \"MODE_NORMAL\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<malloc 1>>\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].id\",
      \"value\": \"1\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].value\",
      \"value\": \"10.5\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].status\",
      \"value\": \"''A''\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"2\" },\n    { \"identifier\": \"uut_prototype_stubs.allocate_buffer.return\",
      \"value\": \"<<null>>\" },\n  ],\n  \"expected_values\": [\n    { \"identifier\":
      \"uut_prototype_stubs.log_error.message\", \"value\": \"\\\"Memory allocation
      failed\\\"\" },\n    { \"identifier\": \"data_processor.process_data_array.return\",
      \"value\": \"-2\" }\n  ]\n}\n```\n\n### Example 3: Testing Complex Processing
      with Multiple Stubs\n\n**Requirement REQ-DP-003:** The `process_data_array`
      function shall process valid records by multiplying their values by 1.5 and
      setting status to ''V''.\n\n```json\n{\n  \"test_name\": \"Test_Valid_Record_Processing\",\n  \"test_description\":
      \"Tests process_data_array with mixed valid/invalid records to ensure proper
      processing and output.\",\n  \"requirement_id\": \"REQ-DP-003\",\n  \"unit_name\":
      \"data_processor\",\n  \"subprogram_name\": \"process_data_array\",\n  \"input_values\":
      [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\", \"value\":
      \"MODE_NORMAL\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].id\",
      \"value\": \"100\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].value\",
      \"value\": \"20.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].status\",
      \"value\": \"''A''\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].id\",
      \"value\": \"200\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].status\",
      \"value\": \"''B''\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[2].id\",
      \"value\": \"300\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[2].value\",
      \"value\": \"40.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[2].status\",
      \"value\": \"''C''\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"3\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0]\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"uut_prototype_stubs.validate_record.return\",
      \"value\": \"1,0,1\" }\n  ],\n  \"expected_values\": [\n    { \"identifier\":
      \"data_processor.process_data_array.return\", \"value\": \"2\" },\n    { \"identifier\":
      \"data_processor.process_data_array.output_array[0][0].id\", \"value\": \"100\"
      },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].status\",
      \"value\": \"''V''\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][1].id\",
      \"value\": \"300\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][1].value\",
      \"value\": \"60.0\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][1].status\",
      \"value\": \"''V''\" }\n  ]\n}\n```\n\n### Example 4: Testing Error Mode with
      Early Termination\n\n**Requirement REQ-DP-004:** The `process_data_array` function
      shall stop processing and return the current count when an invalid record is
      encountered in ERROR mode.\n\n```json\n{\n  \"test_name\": \"Test_Error_Mode_Early_Termination\",\n  \"test_description\":
      \"Tests process_data_array in ERROR mode to ensure it stops processing on first
      invalid record.\",\n  \"requirement_id\": \"REQ-DP-004\",\n  \"unit_name\":
      \"data_processor\",\n  \"subprogram_name\": \"process_data_array\",\n  \"input_values\":
      [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\", \"value\":
      \"MODE_ERROR\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].id\",
      \"value\": \"100\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].value\",
      \"value\": \"20.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].id\",
      \"value\": \"200\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"3\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0]\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"uut_prototype_stubs.allocate_buffer.size\",
      \"value\": \"3\" },\n    { \"identifier\": \"uut_prototype_stubs.validate_record.return\",
      \"value\": \"1,-1\" },\n  ],\n  \"expected_values\": [\n    { \"identifier\":
      \"uut_prototype_stubs.log_error.message\", \"value\": \"\\\"Invalid record encountered
      in error mode\\\"\" },\n    { \"identifier\": \"data_processor.process_data_array.return\",
      \"value\": \"1\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].id\",
      \"value\": \"100\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].status\",
      \"value\": \"''V''\" }\n  ]\n}\n```\n\nRelevant Code:\n```cpp\n// Unit: manager\n\n//
      Definitions of types, called functions and data structures:\n\ntypedef float
      FLOAT;\n\nenum boolean { v_false, v_true };\n\nenum soups { NO_SOUP, ONION,
      CHOWDER };\n\nenum salads { NO_SALAD, CAESAR, GREEN };\n\nenum entrees { NO_ENTREE,
      STEAK, CHICKEN, LOBSTER, PASTA };\n\nenum desserts { NO_DESSERT, CAKE, PIE,
      FRUIT };\n\nenum beverages { NO_BEVERAGE, WINE, BEER, MIXED_DRINK, SODA };\n\nstruct
      order_type\n{\n  enum soups Soup;\n  enum salads Salad;\n  enum entrees Entree;\n  enum
      desserts Dessert;\n  enum beverages Beverage;\n};\n\ntypedef unsigned short
      seat_index_type;\n\ntypedef unsigned short table_index_type;\n\nstruct table_data_type\n{\n  enum
      boolean Is_Occupied;\n  seat_index_type Number_In_Party;\n  char Designator;\n  char
      Wait_Person[10];\n  struct order_type Order[4];\n  FLOAT Check_Total;\n};\n\nstruct
      table_data_type Get_Table_Record(table_index_type Table);\n\nvoid Update_Table_Record(table_index_type
      Table, struct table_data_type Data);\n\nvoid Add_Included_Dessert(struct order_type*
      Order)\n{\n  if(Order->Entree == STEAK &&\n     Order->Salad == CAESAR &&\n     Order->Beverage
      == MIXED_DRINK) {\n\n    Order->Dessert = PIE;\n\n  } else if(Order->Entree
      == LOBSTER &&\n            Order->Salad == GREEN &&\n            Order->Beverage
      == WINE) {\n\n    Order->Dessert = CAKE;\n  }\n}\n\n// Code for Place_Order:\nint
      Place_Order(table_index_type Table,\n                seat_index_type Seat,\n                struct
      order_type Order)\n{\n  struct table_data_type Table_Data;\n\n  Table_Data =
      Get_Table_Record(Table);\n\n  Table_Data.Is_Occupied = v_true;\n  Table_Data.Number_In_Party
      = Table_Data.Number_In_Party + 1;\n  Table_Data.Order[Seat] = Order;\n\n  /*
      Add a free dessert in some cases */\n  Add_Included_Dessert(&Table_Data.Order[Seat]);\n\n  switch(Order.Entree)\n    {\n    case
      NO_ENTREE :\n       break;\n    case STEAK :\n       Table_Data.Check_Total
      = Table_Data.Check_Total + 14.0;\n       break;\n    case CHICKEN :\n       Table_Data.Check_Total
      = Table_Data.Check_Total + 10.0;\n       break;\n    case LOBSTER :\n       Table_Data.Check_Total
      = Table_Data.Check_Total + 18.0;\n       break;\n    case PASTA :\n       Table_Data.Check_Total
      = Table_Data.Check_Total + 12.0;\n       break;\n    }\n\n  Update_Table_Record(Table,
      Table_Data);\n  return 0;\n}\n```\n\nExample Test Cases:\n```json\n[\n  {\n    \"test_name\":
      \"BASIS-PATH-001\",\n    \"test_description\": \"This is an automatically generated
      test case.\\nTest Path 1\\n(5) case (Order.Entree) ==> PASTA\\nTest Case Generation
      Notes:\",\n    \"unit_name\": \"manager\",\n    \"subprogram_name\": \"Place_Order\",\n    \"input_values\":
      [\n      {\n        \"identifier\": \"manager.Place_Order.Order.Entree\",\n        \"value\":
      \"PASTA\"\n      },\n      {\n        \"identifier\": \"manager.Place_Order.Table\",\n        \"value\":
      \"<<MIN>>\"\n      },\n      {\n        \"identifier\": \"manager.Place_Order.Seat\",\n        \"value\":
      \"<<MIN>>\"\n      }\n    ],\n    \"expected_values\": [],\n    \"requirement_id\":
      null\n  }\n]\n```\n\nRequirements:\n1. FR14.1: Placing an order updates the
      table''s occupied status to true within the table database.\n2. FR15.1: Placing
      an order updates the table''s number in party within the table database.\n\nDetailed
      task description:\nBased on the above requirements and code, generate unit tests
      that exercise all requirements.\nMake sure the generated test cases clearly
      test the provided requirements.\n\nSolve the problem using the following approach:\nFor
      each requirement in order...\n    1. Come up with descriptive (unique) name
      for the test case and describe in natural language how this test exercises the
      requirement\n    2. Provide the name of the unit being tested (base file name
      without extension) and the name of the subprogram being tested (function name)\n    3.
      Provide the input and expected values by providing the correct identifier and
      value in the syntax outlined above.\n\nYou are allowed to use the following
      identifiers in your test case:\n- manager.Place_Order.Table\n- manager.Place_Order.Seat\n-
      manager.Place_Order.Order.Soup\n- manager.Place_Order.Order.Salad\n- manager.Place_Order.Order.Entree\n-
      manager.Place_Order.Order.Dessert\n- manager.Place_Order.Order.Beverage\n- manager.Place_Order.return\n-
      uut_prototype_stubs.Get_Table_Record.Table\n- uut_prototype_stubs.Get_Table_Record.return.Is_Occupied\n-
      uut_prototype_stubs.Get_Table_Record.return.Number_In_Party\n- uut_prototype_stubs.Get_Table_Record.return.Designator\n-
      uut_prototype_stubs.Get_Table_Record.return.Wait_Person\n- uut_prototype_stubs.Get_Table_Record.return.Order[i].Soup
      (for all: i in 0..3)\n- uut_prototype_stubs.Get_Table_Record.return.Order[i].Salad
      (for all: i in 0..3)\n- uut_prototype_stubs.Get_Table_Record.return.Order[i].Entree
      (for all: i in 0..3)\n- uut_prototype_stubs.Get_Table_Record.return.Order[i].Dessert
      (for all: i in 0..3)\n- uut_prototype_stubs.Get_Table_Record.return.Order[i].Beverage
      (for all: i in 0..3)\n- uut_prototype_stubs.Get_Table_Record.return.Check_Total\n-
      manager.Add_Included_Dessert.Order\n- manager.Add_Included_Dessert.Order[i].Soup
      (for all: i in 0..31)\n- manager.Add_Included_Dessert.Order[i].Salad (for all:
      i in 0..31)\n- manager.Add_Included_Dessert.Order[i].Entree (for all: i in 0..31)\n-
      manager.Add_Included_Dessert.Order[i].Dessert (for all: i in 0..31)\n- manager.Add_Included_Dessert.Order[i].Beverage
      (for all: i in 0..31)\n- uut_prototype_stubs.Update_Table_Record.Table\n- uut_prototype_stubs.Update_Table_Record.Data.Is_Occupied\n-
      uut_prototype_stubs.Update_Table_Record.Data.Number_In_Party\n- uut_prototype_stubs.Update_Table_Record.Data.Designator\n-
      uut_prototype_stubs.Update_Table_Record.Data.Wait_Person\n- uut_prototype_stubs.Update_Table_Record.Data.Order[i].Soup
      (for all: i in 0..3)\n- uut_prototype_stubs.Update_Table_Record.Data.Order[i].Salad
      (for all: i in 0..3)\n- uut_prototype_stubs.Update_Table_Record.Data.Order[i].Entree
      (for all: i in 0..3)\n- uut_prototype_stubs.Update_Table_Record.Data.Order[i].Dessert
      (for all: i in 0..3)\n- uut_prototype_stubs.Update_Table_Record.Data.Order[i].Beverage
      (for all: i in 0..3)\n- uut_prototype_stubs.Update_Table_Record.Data.Check_Total\n\nYou
      MUST set an input value for all input to the functions, used globals and called
      stubs.\nIf you do not ensure this, it can happen that your test does not cover
      the correct path corresponding to the requirement.\nAn expected value is not
      required for all identifiers. Only for those relevant to the requirement.\n\nUnstubbed-by-default
      called functions (implement behaviour unless an identifier is set in which case
      the respective function is stubbed) called by Place_Order:\n- Add_Included_Dessert\nStubbed-by-default
      called functions (no behaviour is implemented, you can use identifiers to simulate
      a return value) called by Place_Order:\n- Get_Table_Record\n- Update_Table_Record\n\nNotes:\n-
      You are NOT allowed to invent any syntax that is not specified in the syntax
      reference. Stick to the syntax provided.\n- You are NOT allowed to invent any
      units or functions that are not present in the provided code.\n- This is a highly
      critical task, please ensure that the test cases are correct and complete and
      do not contain any logical or syntactical errors.\n- Test cases are independent
      of each other, i.e., they should not rely on one being run before the other
      (or environment being modified by one).\n- Generate exactly one test case per
      requirement.\n- In case the requirement and the code differ, the requirement
      is what you should test, i.e., it is the source of truth.\n- It might be that
      some of the provided code context and identifiers are incorrect. Use the most
      obviously correct parts of both and ignore the rest.\n\nReturn your answer in
      the following format:\n```json\n{\n    \"test_case_for_requirement_1\": <test
      case testing the first requirement in the list>,\n    \"test_case_for_requirement_2\":
      <test case testing the second requirement in the list>,\n    ...\n}\n```\n",
      "role": "user"}], "model": "gpt-4.1", "response_format": {"json_schema": {"name":
      "TestGenerationResult", "schema": {"$defs": {"ExpectedValueMapping": {"additionalProperties":
      false, "properties": {"identifier": {"$ref": "#/$defs/Identifier"}, "value":
      {"title": "Value", "type": "string"}}, "required": ["identifier", "value"],
      "title": "ExpectedValueMapping", "type": "object"}, "Identifier": {"enum": ["manager.Place_Order.Table",
      "manager.Place_Order.Seat", "manager.Place_Order.Order.Soup", "manager.Place_Order.Order.Salad",
      "manager.Place_Order.Order.Entree", "manager.Place_Order.Order.Dessert", "manager.Place_Order.Order.Beverage",
      "manager.Place_Order.return", "uut_prototype_stubs.Get_Table_Record.Table",
      "uut_prototype_stubs.Get_Table_Record.return.Is_Occupied", "uut_prototype_stubs.Get_Table_Record.return.Number_In_Party",
      "uut_prototype_stubs.Get_Table_Record.return.Designator", "uut_prototype_stubs.Get_Table_Record.return.Wait_Person",
      "uut_prototype_stubs.Get_Table_Record.return.Order[0].Soup", "uut_prototype_stubs.Get_Table_Record.return.Order[0].Salad",
      "uut_prototype_stubs.Get_Table_Record.return.Order[0].Entree", "uut_prototype_stubs.Get_Table_Record.return.Order[0].Dessert",
      "uut_prototype_stubs.Get_Table_Record.return.Order[0].Beverage", "uut_prototype_stubs.Get_Table_Record.return.Order[1].Soup",
      "uut_prototype_stubs.Get_Table_Record.return.Order[1].Salad", "uut_prototype_stubs.Get_Table_Record.return.Order[1].Entree",
      "uut_prototype_stubs.Get_Table_Record.return.Order[1].Dessert", "uut_prototype_stubs.Get_Table_Record.return.Order[1].Beverage",
      "uut_prototype_stubs.Get_Table_Record.return.Order[2].Soup", "uut_prototype_stubs.Get_Table_Record.return.Order[2].Salad",
      "uut_prototype_stubs.Get_Table_Record.return.Order[2].Entree", "uut_prototype_stubs.Get_Table_Record.return.Order[2].Dessert",
      "uut_prototype_stubs.Get_Table_Record.return.Order[2].Beverage", "uut_prototype_stubs.Get_Table_Record.return.Order[3].Soup",
      "uut_prototype_stubs.Get_Table_Record.return.Order[3].Salad", "uut_prototype_stubs.Get_Table_Record.return.Order[3].Entree",
      "uut_prototype_stubs.Get_Table_Record.return.Order[3].Dessert", "uut_prototype_stubs.Get_Table_Record.return.Order[3].Beverage",
      "uut_prototype_stubs.Get_Table_Record.return.Check_Total", "manager.Add_Included_Dessert.Order",
      "manager.Add_Included_Dessert.Order[0].Soup", "manager.Add_Included_Dessert.Order[0].Salad",
      "manager.Add_Included_Dessert.Order[0].Entree", "manager.Add_Included_Dessert.Order[0].Dessert",
      "manager.Add_Included_Dessert.Order[0].Beverage", "manager.Add_Included_Dessert.Order[1].Soup",
      "manager.Add_Included_Dessert.Order[1].Salad", "manager.Add_Included_Dessert.Order[1].Entree",
      "manager.Add_Included_Dessert.Order[1].Dessert", "manager.Add_Included_Dessert.Order[1].Beverage",
      "manager.Add_Included_Dessert.Order[2].Soup", "manager.Add_Included_Dessert.Order[2].Salad",
      "manager.Add_Included_Dessert.Order[2].Entree", "manager.Add_Included_Dessert.Order[2].Dessert",
      "manager.Add_Included_Dessert.Order[2].Beverage", "manager.Add_Included_Dessert.Order[3].Soup",
      "manager.Add_Included_Dessert.Order[3].Salad", "manager.Add_Included_Dessert.Order[3].Entree",
      "manager.Add_Included_Dessert.Order[3].Dessert", "manager.Add_Included_Dessert.Order[3].Beverage",
      "manager.Add_Included_Dessert.Order[4].Soup", "manager.Add_Included_Dessert.Order[4].Salad",
      "manager.Add_Included_Dessert.Order[4].Entree", "manager.Add_Included_Dessert.Order[4].Dessert",
      "manager.Add_Included_Dessert.Order[4].Beverage", "manager.Add_Included_Dessert.Order[5].Soup",
      "manager.Add_Included_Dessert.Order[5].Salad", "manager.Add_Included_Dessert.Order[5].Entree",
      "manager.Add_Included_Dessert.Order[5].Dessert", "manager.Add_Included_Dessert.Order[5].Beverage",
      "manager.Add_Included_Dessert.Order[6].Soup", "manager.Add_Included_Dessert.Order[6].Salad",
      "manager.Add_Included_Dessert.Order[6].Entree", "manager.Add_Included_Dessert.Order[6].Dessert",
      "manager.Add_Included_Dessert.Order[6].Beverage", "manager.Add_Included_Dessert.Order[7].Soup",
      "manager.Add_Included_Dessert.Order[7].Salad", "manager.Add_Included_Dessert.Order[7].Entree",
      "manager.Add_Included_Dessert.Order[7].Dessert", "manager.Add_Included_Dessert.Order[7].Beverage",
      "manager.Add_Included_Dessert.Order[8].Soup", "manager.Add_Included_Dessert.Order[8].Salad",
      "manager.Add_Included_Dessert.Order[8].Entree", "manager.Add_Included_Dessert.Order[8].Dessert",
      "manager.Add_Included_Dessert.Order[8].Beverage", "manager.Add_Included_Dessert.Order[9].Soup",
      "manager.Add_Included_Dessert.Order[9].Salad", "manager.Add_Included_Dessert.Order[9].Entree",
      "manager.Add_Included_Dessert.Order[9].Dessert", "manager.Add_Included_Dessert.Order[9].Beverage",
      "manager.Add_Included_Dessert.Order[10].Soup", "manager.Add_Included_Dessert.Order[10].Salad",
      "manager.Add_Included_Dessert.Order[10].Entree", "manager.Add_Included_Dessert.Order[10].Dessert",
      "manager.Add_Included_Dessert.Order[10].Beverage", "manager.Add_Included_Dessert.Order[11].Soup",
      "manager.Add_Included_Dessert.Order[11].Salad", "manager.Add_Included_Dessert.Order[11].Entree",
      "manager.Add_Included_Dessert.Order[11].Dessert", "manager.Add_Included_Dessert.Order[11].Beverage",
      "manager.Add_Included_Dessert.Order[12].Soup", "manager.Add_Included_Dessert.Order[12].Salad",
      "manager.Add_Included_Dessert.Order[12].Entree", "manager.Add_Included_Dessert.Order[12].Dessert",
      "manager.Add_Included_Dessert.Order[12].Beverage", "manager.Add_Included_Dessert.Order[13].Soup",
      "manager.Add_Included_Dessert.Order[13].Salad", "manager.Add_Included_Dessert.Order[13].Entree",
      "manager.Add_Included_Dessert.Order[13].Dessert", "manager.Add_Included_Dessert.Order[13].Beverage",
      "manager.Add_Included_Dessert.Order[14].Soup", "manager.Add_Included_Dessert.Order[14].Salad",
      "manager.Add_Included_Dessert.Order[14].Entree", "manager.Add_Included_Dessert.Order[14].Dessert",
      "manager.Add_Included_Dessert.Order[14].Beverage", "manager.Add_Included_Dessert.Order[15].Soup",
      "manager.Add_Included_Dessert.Order[15].Salad", "manager.Add_Included_Dessert.Order[15].Entree",
      "manager.Add_Included_Dessert.Order[15].Dessert", "manager.Add_Included_Dessert.Order[15].Beverage",
      "manager.Add_Included_Dessert.Order[16].Soup", "manager.Add_Included_Dessert.Order[16].Salad",
      "manager.Add_Included_Dessert.Order[16].Entree", "manager.Add_Included_Dessert.Order[16].Dessert",
      "manager.Add_Included_Dessert.Order[16].Beverage", "manager.Add_Included_Dessert.Order[17].Soup",
      "manager.Add_Included_Dessert.Order[17].Salad", "manager.Add_Included_Dessert.Order[17].Entree",
      "manager.Add_Included_Dessert.Order[17].Dessert", "manager.Add_Included_Dessert.Order[17].Beverage",
      "manager.Add_Included_Dessert.Order[18].Soup", "manager.Add_Included_Dessert.Order[18].Salad",
      "manager.Add_Included_Dessert.Order[18].Entree", "manager.Add_Included_Dessert.Order[18].Dessert",
      "manager.Add_Included_Dessert.Order[18].Beverage", "manager.Add_Included_Dessert.Order[19].Soup",
      "manager.Add_Included_Dessert.Order[19].Salad", "manager.Add_Included_Dessert.Order[19].Entree",
      "manager.Add_Included_Dessert.Order[19].Dessert", "manager.Add_Included_Dessert.Order[19].Beverage",
      "manager.Add_Included_Dessert.Order[20].Soup", "manager.Add_Included_Dessert.Order[20].Salad",
      "manager.Add_Included_Dessert.Order[20].Entree", "manager.Add_Included_Dessert.Order[20].Dessert",
      "manager.Add_Included_Dessert.Order[20].Beverage", "manager.Add_Included_Dessert.Order[21].Soup",
      "manager.Add_Included_Dessert.Order[21].Salad", "manager.Add_Included_Dessert.Order[21].Entree",
      "manager.Add_Included_Dessert.Order[21].Dessert", "manager.Add_Included_Dessert.Order[21].Beverage",
      "manager.Add_Included_Dessert.Order[22].Soup", "manager.Add_Included_Dessert.Order[22].Salad",
      "manager.Add_Included_Dessert.Order[22].Entree", "manager.Add_Included_Dessert.Order[22].Dessert",
      "manager.Add_Included_Dessert.Order[22].Beverage", "manager.Add_Included_Dessert.Order[23].Soup",
      "manager.Add_Included_Dessert.Order[23].Salad", "manager.Add_Included_Dessert.Order[23].Entree",
      "manager.Add_Included_Dessert.Order[23].Dessert", "manager.Add_Included_Dessert.Order[23].Beverage",
      "manager.Add_Included_Dessert.Order[24].Soup", "manager.Add_Included_Dessert.Order[24].Salad",
      "manager.Add_Included_Dessert.Order[24].Entree", "manager.Add_Included_Dessert.Order[24].Dessert",
      "manager.Add_Included_Dessert.Order[24].Beverage", "manager.Add_Included_Dessert.Order[25].Soup",
      "manager.Add_Included_Dessert.Order[25].Salad", "manager.Add_Included_Dessert.Order[25].Entree",
      "manager.Add_Included_Dessert.Order[25].Dessert", "manager.Add_Included_Dessert.Order[25].Beverage",
      "manager.Add_Included_Dessert.Order[26].Soup", "manager.Add_Included_Dessert.Order[26].Salad",
      "manager.Add_Included_Dessert.Order[26].Entree", "manager.Add_Included_Dessert.Order[26].Dessert",
      "manager.Add_Included_Dessert.Order[26].Beverage", "manager.Add_Included_Dessert.Order[27].Soup",
      "manager.Add_Included_Dessert.Order[27].Salad", "manager.Add_Included_Dessert.Order[27].Entree",
      "manager.Add_Included_Dessert.Order[27].Dessert", "manager.Add_Included_Dessert.Order[27].Beverage",
      "manager.Add_Included_Dessert.Order[28].Soup", "manager.Add_Included_Dessert.Order[28].Salad",
      "manager.Add_Included_Dessert.Order[28].Entree", "manager.Add_Included_Dessert.Order[28].Dessert",
      "manager.Add_Included_Dessert.Order[28].Beverage", "manager.Add_Included_Dessert.Order[29].Soup",
      "manager.Add_Included_Dessert.Order[29].Salad", "manager.Add_Included_Dessert.Order[29].Entree",
      "manager.Add_Included_Dessert.Order[29].Dessert", "manager.Add_Included_Dessert.Order[29].Beverage",
      "manager.Add_Included_Dessert.Order[30].Soup", "manager.Add_Included_Dessert.Order[30].Salad",
      "manager.Add_Included_Dessert.Order[30].Entree", "manager.Add_Included_Dessert.Order[30].Dessert",
      "manager.Add_Included_Dessert.Order[30].Beverage", "manager.Add_Included_Dessert.Order[31].Soup",
      "manager.Add_Included_Dessert.Order[31].Salad", "manager.Add_Included_Dessert.Order[31].Entree",
      "manager.Add_Included_Dessert.Order[31].Dessert", "manager.Add_Included_Dessert.Order[31].Beverage",
      "uut_prototype_stubs.Update_Table_Record.Table", "uut_prototype_stubs.Update_Table_Record.Data.Is_Occupied",
      "uut_prototype_stubs.Update_Table_Record.Data.Number_In_Party", "uut_prototype_stubs.Update_Table_Record.Data.Designator",
      "uut_prototype_stubs.Update_Table_Record.Data.Wait_Person", "uut_prototype_stubs.Update_Table_Record.Data.Order[0].Soup",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[0].Salad", "uut_prototype_stubs.Update_Table_Record.Data.Order[0].Entree",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[0].Dessert", "uut_prototype_stubs.Update_Table_Record.Data.Order[0].Beverage",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[1].Soup", "uut_prototype_stubs.Update_Table_Record.Data.Order[1].Salad",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[1].Entree", "uut_prototype_stubs.Update_Table_Record.Data.Order[1].Dessert",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[1].Beverage", "uut_prototype_stubs.Update_Table_Record.Data.Order[2].Soup",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[2].Salad", "uut_prototype_stubs.Update_Table_Record.Data.Order[2].Entree",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[2].Dessert", "uut_prototype_stubs.Update_Table_Record.Data.Order[2].Beverage",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[3].Soup", "uut_prototype_stubs.Update_Table_Record.Data.Order[3].Salad",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[3].Entree", "uut_prototype_stubs.Update_Table_Record.Data.Order[3].Dessert",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[3].Beverage", "uut_prototype_stubs.Update_Table_Record.Data.Check_Total"],
      "title": "Identifier", "type": "string"}, "InputValueMapping": {"additionalProperties":
      false, "properties": {"identifier": {"$ref": "#/$defs/Identifier"}, "value":
      {"title": "Value", "type": "string"}}, "required": ["identifier", "value"],
      "title": "InputValueMapping", "type": "object"}, "TestCase": {"additionalProperties":
      false, "properties": {"expected_values": {"items": {"$ref": "#/$defs/ExpectedValueMapping"},
      "title": "Expected Values", "type": "array"}, "input_values": {"items": {"$ref":
      "#/$defs/InputValueMapping"}, "title": "Input Values", "type": "array"}, "requirement_id":
      {"title": "Requirement Id", "type": "string"}, "subprogram_name": {"title":
      "Subprogram Name", "type": "string"}, "test_description": {"title": "Test Description",
      "type": "string"}, "test_name": {"title": "Test Name", "type": "string"}, "unit_name":
      {"title": "Unit Name", "type": "string"}}, "required": ["test_name", "test_description",
      "requirement_id", "unit_name", "subprogram_name", "input_values", "expected_values"],
      "title": "TestCase", "type": "object"}}, "additionalProperties": false, "properties":
      {"test_case_for_requirement": {"$ref": "#/$defs/TestCase"}}, "required": ["test_case_for_requirement",
      "test_case_for_requirement"], "title": "TestGenerationResult", "type": "object"},
      "strict": true}, "type": "json_schema"}, "seed": 42, "stream": false, "temperature":
      0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      api-key:
      - REDACTED
      authorization:
      - REDACTED
      connection:
      - keep-alive
      content-length:
      - '40964'
      content-type:
      - application/json
      host:
      - REDACTED
      user-agent:
      - AsyncAzureOpenAI/Python 1.58.1
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-helper-method:
      - beta.chat.completions.parse
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.58.1
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.12
    method: POST
    uri: https://rg-rds-play-openai-pes-ppt.openai.azure.com/openai/deployments/gpt-4.1/chat/completions?api-version=2024-12-01-preview
  response:
    body:
      string: '{"choices":[{"content_filter_results":{"hate":{"filtered":false,"severity":"safe"},"protected_material_code":{"filtered":false,"detected":false},"protected_material_text":{"filtered":false,"detected":false},"self_harm":{"filtered":false,"severity":"safe"},"sexual":{"filtered":false,"severity":"safe"},"violence":{"filtered":false,"severity":"safe"}},"finish_reason":"stop","index":0,"logprobs":null,"message":{"annotations":[],"content":"{\n  \"test_case_for_requirement_1\":
        {\n    \"test_name\": \"Test_Table_Occupied_Status_Updated_On_Place_Order\",\n    \"test_description\":
        \"Tests that placing an order sets the table''s occupied status to true in
        the table database by verifying that Update_Table_Record is called with Is_Occupied
        set to v_true.\",\n    \"requirement_id\": \"FR14.1\",\n    \"unit_name\":
        \"manager\",\n    \"subprogram_name\": \"Place_Order\",\n    \"input_values\":
        [\n      { \"identifier\": \"manager.Place_Order.Table\", \"value\": \"2\"
        },\n      { \"identifier\": \"manager.Place_Order.Seat\", \"value\": \"1\"
        },\n      { \"identifier\": \"manager.Place_Order.Order.Soup\", \"value\":
        \"ONION\" },\n      { \"identifier\": \"manager.Place_Order.Order.Salad\",
        \"value\": \"CAESAR\" },\n      { \"identifier\": \"manager.Place_Order.Order.Entree\",
        \"value\": \"STEAK\" },\n      { \"identifier\": \"manager.Place_Order.Order.Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"manager.Place_Order.Order.Beverage\",
        \"value\": \"MIXED_DRINK\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.Table\",
        \"value\": \"2\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Is_Occupied\",
        \"value\": \"v_false\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Number_In_Party\",
        \"value\": \"2\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Designator\",
        \"value\": \"''A''\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Wait_Person\",
        \"value\": \"\\\"Bob\\\"\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Check_Total\",
        \"value\": \"20.0\" }\n    ],\n    \"expected_values\": [\n      { \"identifier\":
        \"uut_prototype_stubs.Update_Table_Record.Data.Is_Occupied\", \"value\": \"v_true\"
        }\n    ]\n  },\n  \"test_case_for_requirement_2\": {\n    \"test_name\": \"Test_Table_Number_In_Party_Incremented_On_Place_Order\",\n    \"test_description\":
        \"Tests that placing an order increments the table''s number in party by 1
        in the table database by verifying that Update_Table_Record is called with
        Number_In_Party increased.\",\n    \"requirement_id\": \"FR15.1\",\n    \"unit_name\":
        \"manager\",\n    \"subprogram_name\": \"Place_Order\",\n    \"input_values\":
        [\n      { \"identifier\": \"manager.Place_Order.Table\", \"value\": \"3\"
        },\n      { \"identifier\": \"manager.Place_Order.Seat\", \"value\": \"2\"
        },\n      { \"identifier\": \"manager.Place_Order.Order.Soup\", \"value\":
        \"CHOWDER\" },\n      { \"identifier\": \"manager.Place_Order.Order.Salad\",
        \"value\": \"GREEN\" },\n      { \"identifier\": \"manager.Place_Order.Order.Entree\",
        \"value\": \"CHICKEN\" },\n      { \"identifier\": \"manager.Place_Order.Order.Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"manager.Place_Order.Order.Beverage\",
        \"value\": \"SODA\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.Table\",
        \"value\": \"3\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Is_Occupied\",
        \"value\": \"v_true\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Number_In_Party\",
        \"value\": \"3\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Designator\",
        \"value\": \"''B''\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Wait_Person\",
        \"value\": \"\\\"Alice\\\"\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Check_Total\",
        \"value\": \"30.0\" }\n    ],\n    \"expected_values\": [\n      { \"identifier\":
        \"uut_prototype_stubs.Update_Table_Record.Data.Number_In_Party\", \"value\":
        \"4\" }\n    ]\n  }\n}\n","refusal":null,"role":"assistant"}}],"created":1752564162,"id":"chatcmpl-BtUHqRgtdvkfKfSWkR8R5gdUHAS0l","model":"gpt-4.1-2025-04-14","object":"chat.completion","prompt_filter_results":[{"prompt_index":0,"content_filter_results":{"hate":{"filtered":false,"severity":"safe"},"jailbreak":{"filtered":false,"detected":false},"self_harm":{"filtered":false,"severity":"safe"},"sexual":{"filtered":false,"severity":"safe"},"violence":{"filtered":false,"severity":"safe"}}}],"system_fingerprint":"fp_07e970ab25","usage":{"completion_tokens":2174,"completion_tokens_details":{"accepted_prediction_tokens":0,"audio_tokens":0,"reasoning_tokens":0,"rejected_prediction_tokens":0},"prompt_tokens":9884,"prompt_tokens_details":{"audio_tokens":0,"cached_tokens":0},"total_tokens":12058}}

        '
    headers:
      Content-Length:
      - '9658'
      Content-Type:
      - application/json
      Date:
      - Tue, 15 Jul 2025 07:22:52 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      apim-request-id:
      - 42e2455a-9785-4f70-b9e8-f13ddf13c4bd
      azureml-model-session:
      - d056-20250701210615
      cmp-upstream-response-duration:
      - '11109'
      x-accel-buffering:
      - 'no'
      x-content-type-options:
      - nosniff
      x-ms-deployment-name:
      - gpt-4.1
      x-ms-rai-invoked:
      - 'true'
      x-ms-region:
      - Sweden Central
      x-ratelimit-limit-requests:
      - '1006'
      x-ratelimit-limit-tokens:
      - '1006000'
      x-ratelimit-remaining-requests:
      - '1002'
      x-ratelimit-remaining-tokens:
      - '981227'
      x-request-id:
      - efcdc1d1-04dd-41ff-8f09-2c209b288fc7
    status:
      code: 200
      message: OK
- request:
    body: '{"max_completion_tokens": 8192, "messages": [{"content": "You are an AI
      assistant that generates test code for given requirements.", "role": "system"},
      {"content": "\nBased on the following requirements, references, and code, generate
      one test case per given requirement that exercises it.\n\nTest framework reference:\n##
      Test Case Format\nThe format of a test case is as follows:\n{\n    \"test_name\":
      <some descriptive test name>,\n    \"test_description\": <more details about
      the test>\n    \"requirement_id\": <requirement being tested by this test> (optional)\n    \"unit_name\":
      <unit_name>,\n    \"subprogram_name\": <subprogram_name>,\n    \"input_values\":
      [\n        { \"identifier\": <identifier>, \"value\": <value> },\n        ...\n    ],\n    \"expected_values\":
      [\n        { \"identifier\": <identifier>, \"value\": <value> },\n        ...\n    ]\n}\n\n###
      Identifier and Value Syntax\nThe following sections describe the syntax for
      specifying the `identifier` and `value` fields in the test case format. `unit_name`
      and `subprogram_name` refer to file names of C/C++ files (without extension)
      and function names in these files respectively (to refer to methods in classes
      use `<class name>::<method name>`). It is only possible to include identifiers
      from different units and other subprograms if they are called/used in the subprogram
      being tested.\n\n#### Numeric Types\n- Assign the number directly.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.parameter\", \"value\": \"42\" }\n    { \"identifier\":
      \"unit.subprogram.parameter\", \"value\": \"84\" }\n\n#### Structure Types\n-
      Use the standard C syntax to refer to fields within structures.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.struct_param.field\", \"value\": \"CAESAR\"
      }\n    { \"identifier\": \"unit.subprogram.struct_param.field\", \"value\":
      \"STEAK\" }\n\n#### Enumeration Types\n- Use the enumeral value directly.\n  -
      Example:\n    { \"identifier\": \"unit.subprogram.enum_param\", \"value\": \"ENUM_VALUE\"
      }\n\n#### Character and String Types\n- Use standard C delimiters for characters
      and strings.\n  - Example:\n    { \"identifier\": \"unit.subprogram.char_param\",
      \"value\": \"''a''\" }\n    { \"identifier\": \"unit.subprogram.string_param\",
      \"value\": \"\\\"Hello, World\\\"\" }\n- Treat strings as atomic values to set.
      Do not attempt to treat them as a char array, i.e., do not malloc or attempt
      to access chars at individual indices.\n\n#### Pointer and Array Types\n- For
      constrained arrays, specify the index and value.\n  - Example:\n    { \"identifier\":
      \"unit.subprogram.array_param[2]\", \"value\": \"42\" }\n- For unconstrained
      arrays, use `<<malloc [amount of slots to allocate as integer]>>` to allocate
      memory.\n  - Example:\n    { \"identifier\": \"unit.subprogram.array_param\",
      \"value\": \"<<malloc 2>>\" }\n    { \"identifier\": \"unit.subprogram.array_param[1]\",
      \"value\": \"3\" }\n- For pointers, use index 0 to access it (generally pointers
      and unconstrained arrays are the same after all)\n  - Example:\n    { \"identifier\":
      \"unit.subprogram.ptr_param[0]\", \"value\": \"12\" }\n- If you want to make
      something null then use `<<null>>`.\n  - Example:\n    { \"identifier\": \"unit.subprogram.pointer_param\",
      \"value\": \"<<null>>\" }\n    or\n    { \"identifier\": \"unit.subprogram.array_param\",
      \"value\": \"<<null>>\" }\n\n#### Function Return Parameters\n- Use the keyword
      `return` for function return values.\n  - Example:\n    { \"identifier\": \"unit.subprogram.return\",
      \"value\": \"23.0\" }\n\n#### Global Objects\n- Use the syntax `UNIT.<<GLOBAL>>.OBJECT`
      to set values for global objects.\n  - Example:\n    { \"identifier\": \"unit.<<GLOBAL>>.global_object.field\",
      \"value\": \"VALUE\" }\n- Note: `UNIT.OBJECT` is NEVER valid syntax\n\n#####
      Classes\n- To set and expect values of methods in a class (unlike standalone
      subprograms), it is necessary to first instantiate a base object using a constructor\n-
      Use the syntax `UNIT.<<GLOBAL>>.(cl).CLASS_NAME.SUBCLASS_NAME.<<constructor>>.<<call>>`
      to call the constructor of `SUBCLASS` to instantiate a `CLASS` object\n  - Example:\n    {
      \"identifier\": \"unit.<<GLOBAL>>.(cl).class_name.class_name.<<constructor>>.<<call>>\",
      \"value\": \"0\" }\n  - Note: The value in this case is irrelevant and always
      set to 0.\n- To set and expect member variables of a constructed object use
      the syntax `UNIT.<<GLOBAL>>.(cl).CLASS_NAME.SUBCLASS_NAME.MEMBER_NAME`\n  -
      Example:\n    { \"identifier\": \"unit.<<GLOBAL>>.(cl).class_name.class_name.member\",
      \"value\": \"test\" }\n  - Note: If the member is a structured entity like a
      struct or a class instance you can access the subfields like described in the
      `Structure Types` section.\n- To set and expect arguments and return values
      of methods in a class use the name do so like you would for regular subprograms
      except that you prefix the name with the class name and `::`\n  - Example:\n    {
      \"identifier\": \"unit.class_name::member_method.parameter\", \"value\": \"2\"
      }\n  - Note: If you use this ALWAYS first call the class constructor!\n\n####
      Range of Values for Input Data\n- Use range expressions to test a range of values.\n  -
      Example:\n    { \"identifier\": \"unit.subprogram.parameter\", \"value\": \"vary
      from: 0.0 to: 90.0 by: 0.1\" }\n\n#### Range of Values for Expected Results\n-
      Use the syntax `<min> .. <max>` for expected value ranges.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.parameter\", \"value\": \"257.1 .. 259.9\"
      }\n\n#### List of Values\n- Use a comma-separated list for multiple values.\n  -
      Example:\n    { \"identifier\": \"unit.subprogram.parameter\", \"value\": \"1,2,4\"
      }\n- Use parentheses for repeated values.\n  - Example:\n    { \"identifier\":
      \"unit.subprogram.parameter\", \"value\": \"1,(4)2,4\" }\n- Note: This is used
      in case something needs to be set multiple times (like for a stub return) during
      one call, NOT to specify values in an array. To do so, use the regular index
      syntax as outlined above instead.\n\n#### Working with Overloaded Subprograms\n-
      Append the parameter type list to the subprogram name.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram(int).parameter\", \"value\": \"3\" }\n    {
      \"identifier\": \"unit.subprogram(char).parameter\", \"value\": \"''d''\" }\n\n####
      Boolean Values\n- Use `1` for `true` and `0` for `false`.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.boolean_param\", \"value\": \"1\" }\n    {
      \"identifier\": \"unit.subprogram.boolean_param\", \"value\": \"0\" }\n\n####
      Accessing Subprograms Outside the Unit\n- Use `uut_prototype_stubs` as the unit
      for subprograms defined outside of the unit of the test case.\n  - Example:\n    {
      \"identifier\": \"uut_prototype_stubs.name_of_external_subprogram.parameter\",
      \"value\": \"42\" }\n\n#### Emulating stubbed pointer manipulating functions\n-
      Normally it is easy to emulate a stubbed function returning some value (by setting
      the return value of the stubbed function)\n- This is not possible if the stubbed
      function works with pointers as only values can be specified (so only ever the
      contents of a pointer), e.g., functions like memcpy\n- Therefore, in these cases
      you can emulate the stubbed function setting the contents of the pointer using
      <<pointer value_to_set>>\n  - For example assume we have a pointer input variable
      *float x that is modified by a stubbed called to foo(*float pointer_to_modify),
      i.e., foo(x). Then you can change the value, i.e., *x to 10 like so:\n    {
      \"identifier\": \"uut_prototype_stubs.foo.pointer_to_modify\", \"value\": \"<<pointer
      10>>\" }\n  - The other input values of the function of course do not need to
      be specified explicitly (unless you also want to see the values of those input
      pointers)\n- You can only set one variable like this per test case due to technical
      reasons so choose wisely (if you use this feature)\n\n#### Emulating multiple
      function calls\n- Use the multiple value syntax, one value will be read everytime
      the stubbed function is called\n  - Example (foo is called twice, and should
      return 2 the first time and 3 the second):\n    { \"identifier\": \"uut_prototype_stubs.foo.return\",
      \"value\": \"2,3\" }\n\n## Test Case Execution\n1. The test framework will call
      the specified subprogram/function\n2. When a value of a variable would be read,
      if it is specified as a test value, it is set to that value instead\n3. After
      the subprogram finishes, the expected values are checked against the actual
      values at that point\n\nAll tests are executed in isolation. The execution of
      one test does not influence the execution of others.\n\n### Stubbing behaviour\n-
      All function calls from external files, i.e, those referenced with `uut_prototype_stubs`
      are stubbed automatically and do not implement any behaviour. Setting their
      input values has no effect on their output values (instead default values are
      output unless you specify values for them).\n- If any of the parameters or return
      value of a called function (which is not automatically stubbed as outlined above)
      are set or expected to be some value using an identifier, the function will
      be stubbed during execution and not implement any behaviour. In this case it
      is forbidden to also expect the return value to equal something (it won''t as
      the function will be stubbed).\n  - If none are set or expected the function
      will execute as normal\n\n### Default identifier values and initialization\n-
      In general any value not set (input of course), will fall back to a default
      value. However this should be avoided to prevent undefined behaviour. This means
      all input variables (and outputs of stubbed values) should be exhaustively described.\n-
      Do not set an identifier multiple times, it just results in overriding of the
      previous value\n- To access methods of a class and set values it is imperative
      to first instantiate the class using a constructor. For all classes a default
      object is ready to be initialized if needed using the respective constructor.\n-
      Similarly, arrays or pointers should always be allocated\n\n## Examples\n\nLet''s
      consider a more complex C++ code snippet in a file named `data_processor.cpp`:\n\n```cpp\n//
      File: data_processor.cpp\n// Unit: data_processor\n\ntypedef struct {\n    int
      id;\n    float value;\n    char status;\n} DataRecord;\n\ntypedef enum {\n    MODE_NORMAL
      = 0,\n    MODE_DEBUG = 1,\n    MODE_ERROR = 2\n} ProcessingMode;\n\n// External
      function declarations\nextern int validate_record(DataRecord* record);\nextern
      void log_error(const char* message);\nextern DataRecord* allocate_buffer(int
      size);\n\nProcessingMode current_mode = MODE_NORMAL;\n\nint process_data_array(DataRecord*
      input_array, int array_size, DataRecord** output_array) {\n    if (input_array
      == NULL || array_size <= 0) {\n        if (current_mode == MODE_DEBUG) {\n            log_error(\"Invalid
      input parameters\");\n        }\n        return -1;\n    }\n    \n    // Allocate
      output buffer\n    *output_array = allocate_buffer(array_size);\n    if (*output_array
      == NULL) {\n        log_error(\"Memory allocation failed\");\n        return
      -2;\n    }\n    \n    int processed_count = 0;\n    for (int i = 0; i < array_size;
      i++) {\n        // Validate each record using external function\n        int
      validation_result = validate_record(&input_array[i]);\n        \n        if
      (validation_result > 0) {\n            // Copy valid record to output with modified
      value\n            (*output_array)[processed_count].id = input_array[i].id;\n            (*output_array)[processed_count].value
      = input_array[i].value * 1.5f;\n            (*output_array)[processed_count].status
      = ''V''; // Valid\n            processed_count++;\n        } else if (current_mode
      == MODE_ERROR) {\n            // In error mode, stop processing on first invalid
      record\n            log_error(\"Invalid record encountered in error mode\");\n            return
      processed_count;\n        }\n        // In normal mode, skip invalid records
      and continue\n    }\n    \n    return processed_count;\n}\n```\n\n### Example
      1: Testing Null Input Handling with Branching\n\n**Requirement REQ-DP-001:**
      The `process_data_array` function shall return -1 when input_array is NULL and
      log an error message if in DEBUG mode.\n\n```json\n{\n  \"test_name\": \"Test_Null_Input_Debug_Mode\",\n  \"test_description\":
      \"Tests process_data_array with NULL input in DEBUG mode to ensure it returns
      -1 and calls log_error.\",\n  \"requirement_id\": \"REQ-DP-001\",\n  \"unit_name\":
      \"data_processor\",\n  \"subprogram_name\": \"process_data_array\",\n  \"input_values\":
      [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\", \"value\":
      \"MODE_DEBUG\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<null>>\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"5\" },\n  ],\n  \"expected_values\": [\n    { \"identifier\": \"uut_prototype_stubs.log_error.message\",
      \"value\": \"\\\"Invalid input parameters\\\"\" },\n    { \"identifier\": \"data_processor.process_data_array.return\",
      \"value\": \"-1\" }\n  ]\n}\n```\n\n### Example 2: Testing Memory Allocation
      with Stubbing\n\n**Requirement REQ-DP-002:** The `process_data_array` function
      shall return -2 and log an error when memory allocation fails.\n\n```json\n{\n  \"test_name\":
      \"Test_Memory_Allocation_Failure\",\n  \"test_description\": \"Tests process_data_array
      when allocate_buffer returns NULL to ensure proper error handling.\",\n  \"requirement_id\":
      \"REQ-DP-002\",\n  \"unit_name\": \"data_processor\",\n  \"subprogram_name\":
      \"process_data_array\",\n  \"input_values\": [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\",
      \"value\": \"MODE_NORMAL\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<malloc 1>>\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].id\",
      \"value\": \"1\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].value\",
      \"value\": \"10.5\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].status\",
      \"value\": \"''A''\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"2\" },\n    { \"identifier\": \"uut_prototype_stubs.allocate_buffer.return\",
      \"value\": \"<<null>>\" },\n  ],\n  \"expected_values\": [\n    { \"identifier\":
      \"uut_prototype_stubs.log_error.message\", \"value\": \"\\\"Memory allocation
      failed\\\"\" },\n    { \"identifier\": \"data_processor.process_data_array.return\",
      \"value\": \"-2\" }\n  ]\n}\n```\n\n### Example 3: Testing Complex Processing
      with Multiple Stubs\n\n**Requirement REQ-DP-003:** The `process_data_array`
      function shall process valid records by multiplying their values by 1.5 and
      setting status to ''V''.\n\n```json\n{\n  \"test_name\": \"Test_Valid_Record_Processing\",\n  \"test_description\":
      \"Tests process_data_array with mixed valid/invalid records to ensure proper
      processing and output.\",\n  \"requirement_id\": \"REQ-DP-003\",\n  \"unit_name\":
      \"data_processor\",\n  \"subprogram_name\": \"process_data_array\",\n  \"input_values\":
      [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\", \"value\":
      \"MODE_NORMAL\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].id\",
      \"value\": \"100\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].value\",
      \"value\": \"20.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].status\",
      \"value\": \"''A''\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].id\",
      \"value\": \"200\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].status\",
      \"value\": \"''B''\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[2].id\",
      \"value\": \"300\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[2].value\",
      \"value\": \"40.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[2].status\",
      \"value\": \"''C''\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"3\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0]\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"uut_prototype_stubs.validate_record.return\",
      \"value\": \"1,0,1\" }\n  ],\n  \"expected_values\": [\n    { \"identifier\":
      \"data_processor.process_data_array.return\", \"value\": \"2\" },\n    { \"identifier\":
      \"data_processor.process_data_array.output_array[0][0].id\", \"value\": \"100\"
      },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].status\",
      \"value\": \"''V''\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][1].id\",
      \"value\": \"300\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][1].value\",
      \"value\": \"60.0\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][1].status\",
      \"value\": \"''V''\" }\n  ]\n}\n```\n\n### Example 4: Testing Error Mode with
      Early Termination\n\n**Requirement REQ-DP-004:** The `process_data_array` function
      shall stop processing and return the current count when an invalid record is
      encountered in ERROR mode.\n\n```json\n{\n  \"test_name\": \"Test_Error_Mode_Early_Termination\",\n  \"test_description\":
      \"Tests process_data_array in ERROR mode to ensure it stops processing on first
      invalid record.\",\n  \"requirement_id\": \"REQ-DP-004\",\n  \"unit_name\":
      \"data_processor\",\n  \"subprogram_name\": \"process_data_array\",\n  \"input_values\":
      [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\", \"value\":
      \"MODE_ERROR\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].id\",
      \"value\": \"100\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].value\",
      \"value\": \"20.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].id\",
      \"value\": \"200\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"3\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0]\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"uut_prototype_stubs.allocate_buffer.size\",
      \"value\": \"3\" },\n    { \"identifier\": \"uut_prototype_stubs.validate_record.return\",
      \"value\": \"1,-1\" },\n  ],\n  \"expected_values\": [\n    { \"identifier\":
      \"uut_prototype_stubs.log_error.message\", \"value\": \"\\\"Invalid record encountered
      in error mode\\\"\" },\n    { \"identifier\": \"data_processor.process_data_array.return\",
      \"value\": \"1\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].id\",
      \"value\": \"100\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].status\",
      \"value\": \"''V''\" }\n  ]\n}\n```\n\nRelevant Code:\n```cpp\n// Unit: manager\n\n//
      Definitions of types, called functions and data structures:\n\ntypedef float
      FLOAT;\n\nenum boolean { v_false, v_true };\n\nenum soups { NO_SOUP, ONION,
      CHOWDER };\n\nenum salads { NO_SALAD, CAESAR, GREEN };\n\nenum entrees { NO_ENTREE,
      STEAK, CHICKEN, LOBSTER, PASTA };\n\nenum desserts { NO_DESSERT, CAKE, PIE,
      FRUIT };\n\nenum beverages { NO_BEVERAGE, WINE, BEER, MIXED_DRINK, SODA };\n\nstruct
      order_type\n{\n  enum soups Soup;\n  enum salads Salad;\n  enum entrees Entree;\n  enum
      desserts Dessert;\n  enum beverages Beverage;\n};\n\ntypedef unsigned short
      seat_index_type;\n\ntypedef unsigned short table_index_type;\n\nstruct table_data_type\n{\n  enum
      boolean Is_Occupied;\n  seat_index_type Number_In_Party;\n  char Designator;\n  char
      Wait_Person[10];\n  struct order_type Order[4];\n  FLOAT Check_Total;\n};\n\nstruct
      table_data_type Get_Table_Record(table_index_type Table);\n\nvoid Update_Table_Record(table_index_type
      Table, struct table_data_type Data);\n\n// Code for Clear_Table:\nint Clear_Table(table_index_type
      Table)\n{\n  struct table_data_type Table_Data;\n  seat_index_type Seat;\n  Table_Data
      = Get_Table_Record(Table);\n  Table_Data.Is_Occupied = v_false;\n  Table_Data.Number_In_Party
      = 1;\n\n  for (Seat=0; Seat < 4; Seat++){\n      Table_Data.Order[Seat].Soup
      = NO_SOUP;\n      Table_Data.Order[Seat].Salad = NO_SALAD;\n      Table_Data.Order[Seat].Entree
      = NO_ENTREE;\n      Table_Data.Order[Seat].Dessert = NO_DESSERT;\n      Table_Data.Order[Seat].Beverage
      = NO_BEVERAGE;\n   }\n\n  Table_Data.Check_Total = 0;\n\n  Update_Table_Record(Table,
      Table_Data);\n  return 0;\n}\n```\n\nExample Test Cases:\n```json\n[\n  {\n    \"test_name\":
      \"BASIS-PATH-001-PARTIAL\",\n    \"test_description\": \"This is an automatically
      generated test case.\\nTest Path 1\\n(1) for (Seat < 4) ==> FALSE\\nTest Case
      Generation Notes:\\nConflict: Unable to control expression-to-expression comparison
      in branch 1\",\n    \"unit_name\": \"manager\",\n    \"subprogram_name\": \"Clear_Table\",\n    \"input_values\":
      [\n      {\n        \"identifier\": \"manager.Clear_Table.Table\",\n        \"value\":
      \"<<MIN>>\"\n      }\n    ],\n    \"expected_values\": [],\n    \"requirement_id\":
      null\n  }\n]\n```\n\nRequirements:\n1. FR19.1: Clearing a table updates the
      table''s number in party to 1 within the table database.\n2. FR20.1: Clearing
      a table clears the orders for all seats of the table within the table database.\n\nDetailed
      task description:\nBased on the above requirements and code, generate unit tests
      that exercise all requirements.\nMake sure the generated test cases clearly
      test the provided requirements.\n\nSolve the problem using the following approach:\nFor
      each requirement in order...\n    1. Come up with descriptive (unique) name
      for the test case and describe in natural language how this test exercises the
      requirement\n    2. Provide the name of the unit being tested (base file name
      without extension) and the name of the subprogram being tested (function name)\n    3.
      Provide the input and expected values by providing the correct identifier and
      value in the syntax outlined above.\n\nYou are allowed to use the following
      identifiers in your test case:\n- manager.Clear_Table.Table\n- manager.Clear_Table.return\n-
      uut_prototype_stubs.Get_Table_Record.Table\n- uut_prototype_stubs.Get_Table_Record.return.Is_Occupied\n-
      uut_prototype_stubs.Get_Table_Record.return.Number_In_Party\n- uut_prototype_stubs.Get_Table_Record.return.Designator\n-
      uut_prototype_stubs.Get_Table_Record.return.Wait_Person\n- uut_prototype_stubs.Get_Table_Record.return.Order[i].Soup
      (for all: i in 0..3)\n- uut_prototype_stubs.Get_Table_Record.return.Order[i].Salad
      (for all: i in 0..3)\n- uut_prototype_stubs.Get_Table_Record.return.Order[i].Entree
      (for all: i in 0..3)\n- uut_prototype_stubs.Get_Table_Record.return.Order[i].Dessert
      (for all: i in 0..3)\n- uut_prototype_stubs.Get_Table_Record.return.Order[i].Beverage
      (for all: i in 0..3)\n- uut_prototype_stubs.Get_Table_Record.return.Check_Total\n-
      uut_prototype_stubs.Update_Table_Record.Table\n- uut_prototype_stubs.Update_Table_Record.Data.Is_Occupied\n-
      uut_prototype_stubs.Update_Table_Record.Data.Number_In_Party\n- uut_prototype_stubs.Update_Table_Record.Data.Designator\n-
      uut_prototype_stubs.Update_Table_Record.Data.Wait_Person\n- uut_prototype_stubs.Update_Table_Record.Data.Order[i].Soup
      (for all: i in 0..3)\n- uut_prototype_stubs.Update_Table_Record.Data.Order[i].Salad
      (for all: i in 0..3)\n- uut_prototype_stubs.Update_Table_Record.Data.Order[i].Entree
      (for all: i in 0..3)\n- uut_prototype_stubs.Update_Table_Record.Data.Order[i].Dessert
      (for all: i in 0..3)\n- uut_prototype_stubs.Update_Table_Record.Data.Order[i].Beverage
      (for all: i in 0..3)\n- uut_prototype_stubs.Update_Table_Record.Data.Check_Total\n\nYou
      MUST set an input value for all input to the functions, used globals and called
      stubs.\nIf you do not ensure this, it can happen that your test does not cover
      the correct path corresponding to the requirement.\nAn expected value is not
      required for all identifiers. Only for those relevant to the requirement.\n\nStubbed-by-default
      called functions (no behaviour is implemented, you can use identifiers to simulate
      a return value) called by Clear_Table:\n- Get_Table_Record\n- Update_Table_Record\n\nNotes:\n-
      You are NOT allowed to invent any syntax that is not specified in the syntax
      reference. Stick to the syntax provided.\n- You are NOT allowed to invent any
      units or functions that are not present in the provided code.\n- This is a highly
      critical task, please ensure that the test cases are correct and complete and
      do not contain any logical or syntactical errors.\n- Test cases are independent
      of each other, i.e., they should not rely on one being run before the other
      (or environment being modified by one).\n- Generate exactly one test case per
      requirement.\n- In case the requirement and the code differ, the requirement
      is what you should test, i.e., it is the source of truth.\n- It might be that
      some of the provided code context and identifiers are incorrect. Use the most
      obviously correct parts of both and ignore the rest.\n\nReturn your answer in
      the following format:\n```json\n{\n    \"test_case_for_requirement_1\": <test
      case testing the first requirement in the list>,\n    \"test_case_for_requirement_2\":
      <test case testing the second requirement in the list>,\n    ...\n}\n```\n",
      "role": "user"}], "model": "gpt-4.1", "response_format": {"json_schema": {"name":
      "TestGenerationResult", "schema": {"$defs": {"ExpectedValueMapping": {"additionalProperties":
      false, "properties": {"identifier": {"$ref": "#/$defs/Identifier"}, "value":
      {"title": "Value", "type": "string"}}, "required": ["identifier", "value"],
      "title": "ExpectedValueMapping", "type": "object"}, "Identifier": {"enum": ["manager.Clear_Table.Table",
      "manager.Clear_Table.return", "uut_prototype_stubs.Get_Table_Record.Table",
      "uut_prototype_stubs.Get_Table_Record.return.Is_Occupied", "uut_prototype_stubs.Get_Table_Record.return.Number_In_Party",
      "uut_prototype_stubs.Get_Table_Record.return.Designator", "uut_prototype_stubs.Get_Table_Record.return.Wait_Person",
      "uut_prototype_stubs.Get_Table_Record.return.Order[0].Soup", "uut_prototype_stubs.Get_Table_Record.return.Order[0].Salad",
      "uut_prototype_stubs.Get_Table_Record.return.Order[0].Entree", "uut_prototype_stubs.Get_Table_Record.return.Order[0].Dessert",
      "uut_prototype_stubs.Get_Table_Record.return.Order[0].Beverage", "uut_prototype_stubs.Get_Table_Record.return.Order[1].Soup",
      "uut_prototype_stubs.Get_Table_Record.return.Order[1].Salad", "uut_prototype_stubs.Get_Table_Record.return.Order[1].Entree",
      "uut_prototype_stubs.Get_Table_Record.return.Order[1].Dessert", "uut_prototype_stubs.Get_Table_Record.return.Order[1].Beverage",
      "uut_prototype_stubs.Get_Table_Record.return.Order[2].Soup", "uut_prototype_stubs.Get_Table_Record.return.Order[2].Salad",
      "uut_prototype_stubs.Get_Table_Record.return.Order[2].Entree", "uut_prototype_stubs.Get_Table_Record.return.Order[2].Dessert",
      "uut_prototype_stubs.Get_Table_Record.return.Order[2].Beverage", "uut_prototype_stubs.Get_Table_Record.return.Order[3].Soup",
      "uut_prototype_stubs.Get_Table_Record.return.Order[3].Salad", "uut_prototype_stubs.Get_Table_Record.return.Order[3].Entree",
      "uut_prototype_stubs.Get_Table_Record.return.Order[3].Dessert", "uut_prototype_stubs.Get_Table_Record.return.Order[3].Beverage",
      "uut_prototype_stubs.Get_Table_Record.return.Check_Total", "uut_prototype_stubs.Update_Table_Record.Table",
      "uut_prototype_stubs.Update_Table_Record.Data.Is_Occupied", "uut_prototype_stubs.Update_Table_Record.Data.Number_In_Party",
      "uut_prototype_stubs.Update_Table_Record.Data.Designator", "uut_prototype_stubs.Update_Table_Record.Data.Wait_Person",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[0].Soup", "uut_prototype_stubs.Update_Table_Record.Data.Order[0].Salad",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[0].Entree", "uut_prototype_stubs.Update_Table_Record.Data.Order[0].Dessert",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[0].Beverage", "uut_prototype_stubs.Update_Table_Record.Data.Order[1].Soup",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[1].Salad", "uut_prototype_stubs.Update_Table_Record.Data.Order[1].Entree",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[1].Dessert", "uut_prototype_stubs.Update_Table_Record.Data.Order[1].Beverage",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[2].Soup", "uut_prototype_stubs.Update_Table_Record.Data.Order[2].Salad",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[2].Entree", "uut_prototype_stubs.Update_Table_Record.Data.Order[2].Dessert",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[2].Beverage", "uut_prototype_stubs.Update_Table_Record.Data.Order[3].Soup",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[3].Salad", "uut_prototype_stubs.Update_Table_Record.Data.Order[3].Entree",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[3].Dessert", "uut_prototype_stubs.Update_Table_Record.Data.Order[3].Beverage",
      "uut_prototype_stubs.Update_Table_Record.Data.Check_Total"], "title": "Identifier",
      "type": "string"}, "InputValueMapping": {"additionalProperties": false, "properties":
      {"identifier": {"$ref": "#/$defs/Identifier"}, "value": {"title": "Value", "type":
      "string"}}, "required": ["identifier", "value"], "title": "InputValueMapping",
      "type": "object"}, "TestCase": {"additionalProperties": false, "properties":
      {"expected_values": {"items": {"$ref": "#/$defs/ExpectedValueMapping"}, "title":
      "Expected Values", "type": "array"}, "input_values": {"items": {"$ref": "#/$defs/InputValueMapping"},
      "title": "Input Values", "type": "array"}, "requirement_id": {"title": "Requirement
      Id", "type": "string"}, "subprogram_name": {"title": "Subprogram Name", "type":
      "string"}, "test_description": {"title": "Test Description", "type": "string"},
      "test_name": {"title": "Test Name", "type": "string"}, "unit_name": {"title":
      "Unit Name", "type": "string"}}, "required": ["test_name", "test_description",
      "requirement_id", "unit_name", "subprogram_name", "input_values", "expected_values"],
      "title": "TestCase", "type": "object"}}, "additionalProperties": false, "properties":
      {"test_case_for_requirement": {"$ref": "#/$defs/TestCase"}}, "required": ["test_case_for_requirement",
      "test_case_for_requirement"], "title": "TestGenerationResult", "type": "object"},
      "strict": true}, "type": "json_schema"}, "seed": 42, "stream": false, "temperature":
      0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      api-key:
      - REDACTED
      authorization:
      - REDACTED
      connection:
      - keep-alive
      content-length:
      - '31306'
      content-type:
      - application/json
      host:
      - REDACTED
      user-agent:
      - AsyncAzureOpenAI/Python 1.58.1
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-helper-method:
      - beta.chat.completions.parse
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.58.1
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.12
    method: POST
    uri: https://rg-rds-play-openai-pes-ppt.openai.azure.com/openai/deployments/gpt-4.1/chat/completions?api-version=2024-12-01-preview
  response:
    body:
      string: '{"choices":[{"content_filter_results":{"hate":{"filtered":false,"severity":"safe"},"protected_material_code":{"filtered":false,"detected":false},"protected_material_text":{"filtered":false,"detected":false},"self_harm":{"filtered":false,"severity":"safe"},"sexual":{"filtered":false,"severity":"safe"},"violence":{"filtered":false,"severity":"safe"}},"finish_reason":"stop","index":0,"logprobs":null,"message":{"annotations":[],"content":"{\n  \"test_case_for_requirement_1\":
        {\n    \"test_name\": \"Clear_Table_Sets_Number_In_Party_To_One\",\n    \"test_description\":
        \"Verifies that after calling Clear_Table, the Number_In_Party field for the
        table is set to 1 in the table database (via Update_Table_Record), regardless
        of its previous value.\",\n    \"requirement_id\": \"FR19.1\",\n    \"unit_name\":
        \"manager\",\n    \"subprogram_name\": \"Clear_Table\",\n    \"input_values\":
        [\n      { \"identifier\": \"manager.Clear_Table.Table\", \"value\": \"2\"
        },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.Table\",
        \"value\": \"2\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Is_Occupied\",
        \"value\": \"1\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Number_In_Party\",
        \"value\": \"4\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Designator\",
        \"value\": \"''A''\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Wait_Person\",
        \"value\": \"\\\"Smith\\\"\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Soup\",
        \"value\": \"ONION\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Salad\",
        \"value\": \"CAESAR\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Entree\",
        \"value\": \"STEAK\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Dessert\",
        \"value\": \"CAKE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Beverage\",
        \"value\": \"WINE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Soup\",
        \"value\": \"CHOWDER\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Salad\",
        \"value\": \"GREEN\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Entree\",
        \"value\": \"CHICKEN\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Dessert\",
        \"value\": \"PIE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Beverage\",
        \"value\": \"BEER\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Entree\",
        \"value\": \"LOBSTER\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Dessert\",
        \"value\": \"FRUIT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Beverage\",
        \"value\": \"MIXED_DRINK\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Soup\",
        \"value\": \"ONION\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Salad\",
        \"value\": \"CAESAR\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Entree\",
        \"value\": \"PASTA\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Dessert\",
        \"value\": \"CAKE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Beverage\",
        \"value\": \"SODA\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Check_Total\",
        \"value\": \"123.45\" }\n    ],\n    \"expected_values\": [\n      { \"identifier\":
        \"uut_prototype_stubs.Update_Table_Record.Table\", \"value\": \"2\" },\n      {
        \"identifier\": \"uut_prototype_stubs.Update_Table_Record.Data.Number_In_Party\",
        \"value\": \"1\" }\n    ]\n  },\n  \"test_case_for_requirement_2\": {\n    \"test_name\":
        \"Clear_Table_Clears_All_Orders_For_All_Seats\",\n    \"test_description\":
        \"Verifies that after calling Clear_Table, all order fields (Soup, Salad,
        Entree, Dessert, Beverage) for all seats are set to their NO_* values in the
        table database (via Update_Table_Record).\",\n    \"requirement_id\": \"FR20.1\",\n    \"unit_name\":
        \"manager\",\n    \"subprogram_name\": \"Clear_Table\",\n    \"input_values\":
        [\n      { \"identifier\": \"manager.Clear_Table.Table\", \"value\": \"1\"
        },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.Table\",
        \"value\": \"1\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Is_Occupied\",
        \"value\": \"1\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Number_In_Party\",
        \"value\": \"3\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Designator\",
        \"value\": \"''B''\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Wait_Person\",
        \"value\": \"\\\"Jones\\\"\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Soup\",
        \"value\": \"ONION\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Salad\",
        \"value\": \"CAESAR\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Entree\",
        \"value\": \"STEAK\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Dessert\",
        \"value\": \"CAKE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Beverage\",
        \"value\": \"WINE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Soup\",
        \"value\": \"CHOWDER\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Salad\",
        \"value\": \"GREEN\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Entree\",
        \"value\": \"CHICKEN\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Dessert\",
        \"value\": \"PIE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Beverage\",
        \"value\": \"BEER\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Entree\",
        \"value\": \"LOBSTER\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Dessert\",
        \"value\": \"FRUIT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Beverage\",
        \"value\": \"MIXED_DRINK\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Soup\",
        \"value\": \"ONION\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Salad\",
        \"value\": \"CAESAR\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Entree\",
        \"value\": \"PASTA\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Dessert\",
        \"value\": \"CAKE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Beverage\",
        \"value\": \"SODA\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Check_Total\",
        \"value\": \"99.99\" }\n    ],\n    \"expected_values\": [\n      { \"identifier\":
        \"uut_prototype_stubs.Update_Table_Record.Table\", \"value\": \"1\" },\n      {
        \"identifier\": \"uut_prototype_stubs.Update_Table_Record.Data.Order[0].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Update_Table_Record.Data.Order[0].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Update_Table_Record.Data.Order[0].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Update_Table_Record.Data.Order[0].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Update_Table_Record.Data.Order[0].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Update_Table_Record.Data.Order[1].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Update_Table_Record.Data.Order[1].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Update_Table_Record.Data.Order[1].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Update_Table_Record.Data.Order[1].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Update_Table_Record.Data.Order[1].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Update_Table_Record.Data.Order[2].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Update_Table_Record.Data.Order[2].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Update_Table_Record.Data.Order[2].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Update_Table_Record.Data.Order[2].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Update_Table_Record.Data.Order[2].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Update_Table_Record.Data.Order[3].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Update_Table_Record.Data.Order[3].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Update_Table_Record.Data.Order[3].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Update_Table_Record.Data.Order[3].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Update_Table_Record.Data.Order[3].Beverage\",
        \"value\": \"NO_BEVERAGE\" }\n    ]\n  }\n}","refusal":null,"role":"assistant"}}],"created":1752564162,"id":"chatcmpl-BtUHq5vxacIIj5GzAlRaS2WjLbS6q","model":"gpt-4.1-2025-04-14","object":"chat.completion","prompt_filter_results":[{"prompt_index":0,"content_filter_results":{"hate":{"filtered":false,"severity":"safe"},"jailbreak":{"filtered":false,"detected":false},"self_harm":{"filtered":false,"severity":"safe"},"sexual":{"filtered":false,"severity":"safe"},"violence":{"filtered":false,"severity":"safe"}}}],"system_fingerprint":"fp_07e970ab25","usage":{"completion_tokens":2521,"completion_tokens_details":{"accepted_prediction_tokens":0,"audio_tokens":0,"reasoning_tokens":0,"rejected_prediction_tokens":0},"prompt_tokens":7176,"prompt_tokens_details":{"audio_tokens":0,"cached_tokens":0},"total_tokens":9697}}

        '
    headers:
      Content-Length:
      - '10935'
      Content-Type:
      - application/json
      Date:
      - Tue, 15 Jul 2025 07:22:56 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      apim-request-id:
      - 57f500c5-949e-4833-b716-163b77e16aee
      azureml-model-session:
      - d070-20250625140329
      cmp-upstream-response-duration:
      - '14178'
      x-accel-buffering:
      - 'no'
      x-content-type-options:
      - nosniff
      x-ms-deployment-name:
      - gpt-4.1
      x-ms-rai-invoked:
      - 'true'
      x-ms-region:
      - Sweden Central
      x-ratelimit-limit-requests:
      - '1006'
      x-ratelimit-limit-tokens:
      - '1006000'
      x-ratelimit-remaining-requests:
      - '1004'
      x-ratelimit-remaining-tokens:
      - '993899'
      x-request-id:
      - 9a49c854-b545-497d-834f-daa50de6e24f
    status:
      code: 200
      message: OK
- request:
    body: '{"max_completion_tokens": 8192, "messages": [{"content": "You are an AI
      assistant that generates test code for given requirements.", "role": "system"},
      {"content": "\nBased on the following requirements, references, and code, generate
      one test case per given requirement that exercises it.\n\nTest framework reference:\n##
      Test Case Format\nThe format of a test case is as follows:\n{\n    \"test_name\":
      <some descriptive test name>,\n    \"test_description\": <more details about
      the test>\n    \"requirement_id\": <requirement being tested by this test> (optional)\n    \"unit_name\":
      <unit_name>,\n    \"subprogram_name\": <subprogram_name>,\n    \"input_values\":
      [\n        { \"identifier\": <identifier>, \"value\": <value> },\n        ...\n    ],\n    \"expected_values\":
      [\n        { \"identifier\": <identifier>, \"value\": <value> },\n        ...\n    ]\n}\n\n###
      Identifier and Value Syntax\nThe following sections describe the syntax for
      specifying the `identifier` and `value` fields in the test case format. `unit_name`
      and `subprogram_name` refer to file names of C/C++ files (without extension)
      and function names in these files respectively (to refer to methods in classes
      use `<class name>::<method name>`). It is only possible to include identifiers
      from different units and other subprograms if they are called/used in the subprogram
      being tested.\n\n#### Numeric Types\n- Assign the number directly.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.parameter\", \"value\": \"42\" }\n    { \"identifier\":
      \"unit.subprogram.parameter\", \"value\": \"84\" }\n\n#### Structure Types\n-
      Use the standard C syntax to refer to fields within structures.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.struct_param.field\", \"value\": \"CAESAR\"
      }\n    { \"identifier\": \"unit.subprogram.struct_param.field\", \"value\":
      \"STEAK\" }\n\n#### Enumeration Types\n- Use the enumeral value directly.\n  -
      Example:\n    { \"identifier\": \"unit.subprogram.enum_param\", \"value\": \"ENUM_VALUE\"
      }\n\n#### Character and String Types\n- Use standard C delimiters for characters
      and strings.\n  - Example:\n    { \"identifier\": \"unit.subprogram.char_param\",
      \"value\": \"''a''\" }\n    { \"identifier\": \"unit.subprogram.string_param\",
      \"value\": \"\\\"Hello, World\\\"\" }\n- Treat strings as atomic values to set.
      Do not attempt to treat them as a char array, i.e., do not malloc or attempt
      to access chars at individual indices.\n\n#### Pointer and Array Types\n- For
      constrained arrays, specify the index and value.\n  - Example:\n    { \"identifier\":
      \"unit.subprogram.array_param[2]\", \"value\": \"42\" }\n- For unconstrained
      arrays, use `<<malloc [amount of slots to allocate as integer]>>` to allocate
      memory.\n  - Example:\n    { \"identifier\": \"unit.subprogram.array_param\",
      \"value\": \"<<malloc 2>>\" }\n    { \"identifier\": \"unit.subprogram.array_param[1]\",
      \"value\": \"3\" }\n- For pointers, use index 0 to access it (generally pointers
      and unconstrained arrays are the same after all)\n  - Example:\n    { \"identifier\":
      \"unit.subprogram.ptr_param[0]\", \"value\": \"12\" }\n- If you want to make
      something null then use `<<null>>`.\n  - Example:\n    { \"identifier\": \"unit.subprogram.pointer_param\",
      \"value\": \"<<null>>\" }\n    or\n    { \"identifier\": \"unit.subprogram.array_param\",
      \"value\": \"<<null>>\" }\n\n#### Function Return Parameters\n- Use the keyword
      `return` for function return values.\n  - Example:\n    { \"identifier\": \"unit.subprogram.return\",
      \"value\": \"23.0\" }\n\n#### Global Objects\n- Use the syntax `UNIT.<<GLOBAL>>.OBJECT`
      to set values for global objects.\n  - Example:\n    { \"identifier\": \"unit.<<GLOBAL>>.global_object.field\",
      \"value\": \"VALUE\" }\n- Note: `UNIT.OBJECT` is NEVER valid syntax\n\n#####
      Classes\n- To set and expect values of methods in a class (unlike standalone
      subprograms), it is necessary to first instantiate a base object using a constructor\n-
      Use the syntax `UNIT.<<GLOBAL>>.(cl).CLASS_NAME.SUBCLASS_NAME.<<constructor>>.<<call>>`
      to call the constructor of `SUBCLASS` to instantiate a `CLASS` object\n  - Example:\n    {
      \"identifier\": \"unit.<<GLOBAL>>.(cl).class_name.class_name.<<constructor>>.<<call>>\",
      \"value\": \"0\" }\n  - Note: The value in this case is irrelevant and always
      set to 0.\n- To set and expect member variables of a constructed object use
      the syntax `UNIT.<<GLOBAL>>.(cl).CLASS_NAME.SUBCLASS_NAME.MEMBER_NAME`\n  -
      Example:\n    { \"identifier\": \"unit.<<GLOBAL>>.(cl).class_name.class_name.member\",
      \"value\": \"test\" }\n  - Note: If the member is a structured entity like a
      struct or a class instance you can access the subfields like described in the
      `Structure Types` section.\n- To set and expect arguments and return values
      of methods in a class use the name do so like you would for regular subprograms
      except that you prefix the name with the class name and `::`\n  - Example:\n    {
      \"identifier\": \"unit.class_name::member_method.parameter\", \"value\": \"2\"
      }\n  - Note: If you use this ALWAYS first call the class constructor!\n\n####
      Range of Values for Input Data\n- Use range expressions to test a range of values.\n  -
      Example:\n    { \"identifier\": \"unit.subprogram.parameter\", \"value\": \"vary
      from: 0.0 to: 90.0 by: 0.1\" }\n\n#### Range of Values for Expected Results\n-
      Use the syntax `<min> .. <max>` for expected value ranges.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.parameter\", \"value\": \"257.1 .. 259.9\"
      }\n\n#### List of Values\n- Use a comma-separated list for multiple values.\n  -
      Example:\n    { \"identifier\": \"unit.subprogram.parameter\", \"value\": \"1,2,4\"
      }\n- Use parentheses for repeated values.\n  - Example:\n    { \"identifier\":
      \"unit.subprogram.parameter\", \"value\": \"1,(4)2,4\" }\n- Note: This is used
      in case something needs to be set multiple times (like for a stub return) during
      one call, NOT to specify values in an array. To do so, use the regular index
      syntax as outlined above instead.\n\n#### Working with Overloaded Subprograms\n-
      Append the parameter type list to the subprogram name.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram(int).parameter\", \"value\": \"3\" }\n    {
      \"identifier\": \"unit.subprogram(char).parameter\", \"value\": \"''d''\" }\n\n####
      Boolean Values\n- Use `1` for `true` and `0` for `false`.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.boolean_param\", \"value\": \"1\" }\n    {
      \"identifier\": \"unit.subprogram.boolean_param\", \"value\": \"0\" }\n\n####
      Accessing Subprograms Outside the Unit\n- Use `uut_prototype_stubs` as the unit
      for subprograms defined outside of the unit of the test case.\n  - Example:\n    {
      \"identifier\": \"uut_prototype_stubs.name_of_external_subprogram.parameter\",
      \"value\": \"42\" }\n\n#### Emulating stubbed pointer manipulating functions\n-
      Normally it is easy to emulate a stubbed function returning some value (by setting
      the return value of the stubbed function)\n- This is not possible if the stubbed
      function works with pointers as only values can be specified (so only ever the
      contents of a pointer), e.g., functions like memcpy\n- Therefore, in these cases
      you can emulate the stubbed function setting the contents of the pointer using
      <<pointer value_to_set>>\n  - For example assume we have a pointer input variable
      *float x that is modified by a stubbed called to foo(*float pointer_to_modify),
      i.e., foo(x). Then you can change the value, i.e., *x to 10 like so:\n    {
      \"identifier\": \"uut_prototype_stubs.foo.pointer_to_modify\", \"value\": \"<<pointer
      10>>\" }\n  - The other input values of the function of course do not need to
      be specified explicitly (unless you also want to see the values of those input
      pointers)\n- You can only set one variable like this per test case due to technical
      reasons so choose wisely (if you use this feature)\n\n#### Emulating multiple
      function calls\n- Use the multiple value syntax, one value will be read everytime
      the stubbed function is called\n  - Example (foo is called twice, and should
      return 2 the first time and 3 the second):\n    { \"identifier\": \"uut_prototype_stubs.foo.return\",
      \"value\": \"2,3\" }\n\n## Test Case Execution\n1. The test framework will call
      the specified subprogram/function\n2. When a value of a variable would be read,
      if it is specified as a test value, it is set to that value instead\n3. After
      the subprogram finishes, the expected values are checked against the actual
      values at that point\n\nAll tests are executed in isolation. The execution of
      one test does not influence the execution of others.\n\n### Stubbing behaviour\n-
      All function calls from external files, i.e, those referenced with `uut_prototype_stubs`
      are stubbed automatically and do not implement any behaviour. Setting their
      input values has no effect on their output values (instead default values are
      output unless you specify values for them).\n- If any of the parameters or return
      value of a called function (which is not automatically stubbed as outlined above)
      are set or expected to be some value using an identifier, the function will
      be stubbed during execution and not implement any behaviour. In this case it
      is forbidden to also expect the return value to equal something (it won''t as
      the function will be stubbed).\n  - If none are set or expected the function
      will execute as normal\n\n### Default identifier values and initialization\n-
      In general any value not set (input of course), will fall back to a default
      value. However this should be avoided to prevent undefined behaviour. This means
      all input variables (and outputs of stubbed values) should be exhaustively described.\n-
      Do not set an identifier multiple times, it just results in overriding of the
      previous value\n- To access methods of a class and set values it is imperative
      to first instantiate the class using a constructor. For all classes a default
      object is ready to be initialized if needed using the respective constructor.\n-
      Similarly, arrays or pointers should always be allocated\n\n## Examples\n\nLet''s
      consider a more complex C++ code snippet in a file named `data_processor.cpp`:\n\n```cpp\n//
      File: data_processor.cpp\n// Unit: data_processor\n\ntypedef struct {\n    int
      id;\n    float value;\n    char status;\n} DataRecord;\n\ntypedef enum {\n    MODE_NORMAL
      = 0,\n    MODE_DEBUG = 1,\n    MODE_ERROR = 2\n} ProcessingMode;\n\n// External
      function declarations\nextern int validate_record(DataRecord* record);\nextern
      void log_error(const char* message);\nextern DataRecord* allocate_buffer(int
      size);\n\nProcessingMode current_mode = MODE_NORMAL;\n\nint process_data_array(DataRecord*
      input_array, int array_size, DataRecord** output_array) {\n    if (input_array
      == NULL || array_size <= 0) {\n        if (current_mode == MODE_DEBUG) {\n            log_error(\"Invalid
      input parameters\");\n        }\n        return -1;\n    }\n    \n    // Allocate
      output buffer\n    *output_array = allocate_buffer(array_size);\n    if (*output_array
      == NULL) {\n        log_error(\"Memory allocation failed\");\n        return
      -2;\n    }\n    \n    int processed_count = 0;\n    for (int i = 0; i < array_size;
      i++) {\n        // Validate each record using external function\n        int
      validation_result = validate_record(&input_array[i]);\n        \n        if
      (validation_result > 0) {\n            // Copy valid record to output with modified
      value\n            (*output_array)[processed_count].id = input_array[i].id;\n            (*output_array)[processed_count].value
      = input_array[i].value * 1.5f;\n            (*output_array)[processed_count].status
      = ''V''; // Valid\n            processed_count++;\n        } else if (current_mode
      == MODE_ERROR) {\n            // In error mode, stop processing on first invalid
      record\n            log_error(\"Invalid record encountered in error mode\");\n            return
      processed_count;\n        }\n        // In normal mode, skip invalid records
      and continue\n    }\n    \n    return processed_count;\n}\n```\n\n### Example
      1: Testing Null Input Handling with Branching\n\n**Requirement REQ-DP-001:**
      The `process_data_array` function shall return -1 when input_array is NULL and
      log an error message if in DEBUG mode.\n\n```json\n{\n  \"test_name\": \"Test_Null_Input_Debug_Mode\",\n  \"test_description\":
      \"Tests process_data_array with NULL input in DEBUG mode to ensure it returns
      -1 and calls log_error.\",\n  \"requirement_id\": \"REQ-DP-001\",\n  \"unit_name\":
      \"data_processor\",\n  \"subprogram_name\": \"process_data_array\",\n  \"input_values\":
      [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\", \"value\":
      \"MODE_DEBUG\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<null>>\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"5\" },\n  ],\n  \"expected_values\": [\n    { \"identifier\": \"uut_prototype_stubs.log_error.message\",
      \"value\": \"\\\"Invalid input parameters\\\"\" },\n    { \"identifier\": \"data_processor.process_data_array.return\",
      \"value\": \"-1\" }\n  ]\n}\n```\n\n### Example 2: Testing Memory Allocation
      with Stubbing\n\n**Requirement REQ-DP-002:** The `process_data_array` function
      shall return -2 and log an error when memory allocation fails.\n\n```json\n{\n  \"test_name\":
      \"Test_Memory_Allocation_Failure\",\n  \"test_description\": \"Tests process_data_array
      when allocate_buffer returns NULL to ensure proper error handling.\",\n  \"requirement_id\":
      \"REQ-DP-002\",\n  \"unit_name\": \"data_processor\",\n  \"subprogram_name\":
      \"process_data_array\",\n  \"input_values\": [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\",
      \"value\": \"MODE_NORMAL\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<malloc 1>>\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].id\",
      \"value\": \"1\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].value\",
      \"value\": \"10.5\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].status\",
      \"value\": \"''A''\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"2\" },\n    { \"identifier\": \"uut_prototype_stubs.allocate_buffer.return\",
      \"value\": \"<<null>>\" },\n  ],\n  \"expected_values\": [\n    { \"identifier\":
      \"uut_prototype_stubs.log_error.message\", \"value\": \"\\\"Memory allocation
      failed\\\"\" },\n    { \"identifier\": \"data_processor.process_data_array.return\",
      \"value\": \"-2\" }\n  ]\n}\n```\n\n### Example 3: Testing Complex Processing
      with Multiple Stubs\n\n**Requirement REQ-DP-003:** The `process_data_array`
      function shall process valid records by multiplying their values by 1.5 and
      setting status to ''V''.\n\n```json\n{\n  \"test_name\": \"Test_Valid_Record_Processing\",\n  \"test_description\":
      \"Tests process_data_array with mixed valid/invalid records to ensure proper
      processing and output.\",\n  \"requirement_id\": \"REQ-DP-003\",\n  \"unit_name\":
      \"data_processor\",\n  \"subprogram_name\": \"process_data_array\",\n  \"input_values\":
      [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\", \"value\":
      \"MODE_NORMAL\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].id\",
      \"value\": \"100\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].value\",
      \"value\": \"20.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].status\",
      \"value\": \"''A''\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].id\",
      \"value\": \"200\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].status\",
      \"value\": \"''B''\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[2].id\",
      \"value\": \"300\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[2].value\",
      \"value\": \"40.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[2].status\",
      \"value\": \"''C''\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"3\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0]\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"uut_prototype_stubs.validate_record.return\",
      \"value\": \"1,0,1\" }\n  ],\n  \"expected_values\": [\n    { \"identifier\":
      \"data_processor.process_data_array.return\", \"value\": \"2\" },\n    { \"identifier\":
      \"data_processor.process_data_array.output_array[0][0].id\", \"value\": \"100\"
      },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].status\",
      \"value\": \"''V''\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][1].id\",
      \"value\": \"300\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][1].value\",
      \"value\": \"60.0\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][1].status\",
      \"value\": \"''V''\" }\n  ]\n}\n```\n\n### Example 4: Testing Error Mode with
      Early Termination\n\n**Requirement REQ-DP-004:** The `process_data_array` function
      shall stop processing and return the current count when an invalid record is
      encountered in ERROR mode.\n\n```json\n{\n  \"test_name\": \"Test_Error_Mode_Early_Termination\",\n  \"test_description\":
      \"Tests process_data_array in ERROR mode to ensure it stops processing on first
      invalid record.\",\n  \"requirement_id\": \"REQ-DP-004\",\n  \"unit_name\":
      \"data_processor\",\n  \"subprogram_name\": \"process_data_array\",\n  \"input_values\":
      [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\", \"value\":
      \"MODE_ERROR\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].id\",
      \"value\": \"100\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].value\",
      \"value\": \"20.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].id\",
      \"value\": \"200\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"3\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0]\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"uut_prototype_stubs.allocate_buffer.size\",
      \"value\": \"3\" },\n    { \"identifier\": \"uut_prototype_stubs.validate_record.return\",
      \"value\": \"1,-1\" },\n  ],\n  \"expected_values\": [\n    { \"identifier\":
      \"uut_prototype_stubs.log_error.message\", \"value\": \"\\\"Invalid record encountered
      in error mode\\\"\" },\n    { \"identifier\": \"data_processor.process_data_array.return\",
      \"value\": \"1\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].id\",
      \"value\": \"100\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].status\",
      \"value\": \"''V''\" }\n  ]\n}\n```\n\nRelevant Code:\n```cpp\n// Unit: manager\n\n//
      Definitions of types, called functions and data structures:\n\ntypedef float
      FLOAT;\n\nenum boolean { v_false, v_true };\n\nenum soups { NO_SOUP, ONION,
      CHOWDER };\n\nenum salads { NO_SALAD, CAESAR, GREEN };\n\nenum entrees { NO_ENTREE,
      STEAK, CHICKEN, LOBSTER, PASTA };\n\nenum desserts { NO_DESSERT, CAKE, PIE,
      FRUIT };\n\nenum beverages { NO_BEVERAGE, WINE, BEER, MIXED_DRINK, SODA };\n\nstruct
      order_type\n{\n  enum soups Soup;\n  enum salads Salad;\n  enum entrees Entree;\n  enum
      desserts Dessert;\n  enum beverages Beverage;\n};\n\ntypedef unsigned short
      seat_index_type;\n\ntypedef unsigned short table_index_type;\n\nstruct table_data_type\n{\n  enum
      boolean Is_Occupied;\n  seat_index_type Number_In_Party;\n  char Designator;\n  char
      Wait_Person[10];\n  struct order_type Order[4];\n  FLOAT Check_Total;\n};\n\nstruct
      table_data_type Get_Table_Record(table_index_type Table);\n\nvoid Update_Table_Record(table_index_type
      Table, struct table_data_type Data);\n\nvoid Add_Included_Dessert(struct order_type*
      Order)\n{\n  if(Order->Entree == STEAK &&\n     Order->Salad == CAESAR &&\n     Order->Beverage
      == MIXED_DRINK) {\n\n    Order->Dessert = PIE;\n\n  } else if(Order->Entree
      == LOBSTER &&\n            Order->Salad == GREEN &&\n            Order->Beverage
      == WINE) {\n\n    Order->Dessert = CAKE;\n  }\n}\n\n// Code for Place_Order:\nint
      Place_Order(table_index_type Table,\n                seat_index_type Seat,\n                struct
      order_type Order)\n{\n  struct table_data_type Table_Data;\n\n  Table_Data =
      Get_Table_Record(Table);\n\n  Table_Data.Is_Occupied = v_true;\n  Table_Data.Number_In_Party
      = Table_Data.Number_In_Party + 1;\n  Table_Data.Order[Seat] = Order;\n\n  /*
      Add a free dessert in some cases */\n  Add_Included_Dessert(&Table_Data.Order[Seat]);\n\n  switch(Order.Entree)\n    {\n    case
      NO_ENTREE :\n       break;\n    case STEAK :\n       Table_Data.Check_Total
      = Table_Data.Check_Total + 14.0;\n       break;\n    case CHICKEN :\n       Table_Data.Check_Total
      = Table_Data.Check_Total + 10.0;\n       break;\n    case LOBSTER :\n       Table_Data.Check_Total
      = Table_Data.Check_Total + 18.0;\n       break;\n    case PASTA :\n       Table_Data.Check_Total
      = Table_Data.Check_Total + 12.0;\n       break;\n    }\n\n  Update_Table_Record(Table,
      Table_Data);\n  return 0;\n}\n```\n\nExample Test Cases:\n```json\n[\n  {\n    \"test_name\":
      \"BASIS-PATH-001\",\n    \"test_description\": \"This is an automatically generated
      test case.\\nTest Path 1\\n(5) case (Order.Entree) ==> PASTA\\nTest Case Generation
      Notes:\",\n    \"unit_name\": \"manager\",\n    \"subprogram_name\": \"Place_Order\",\n    \"input_values\":
      [\n      {\n        \"identifier\": \"manager.Place_Order.Order.Entree\",\n        \"value\":
      \"PASTA\"\n      },\n      {\n        \"identifier\": \"manager.Place_Order.Table\",\n        \"value\":
      \"<<MIN>>\"\n      },\n      {\n        \"identifier\": \"manager.Place_Order.Seat\",\n        \"value\":
      \"<<MIN>>\"\n      }\n    ],\n    \"expected_values\": [],\n    \"requirement_id\":
      null\n  }\n]\n```\n\nRequirements:\n1. FR17.2: Placing an order for chicken
      increases the table''s check total by 10.0 within the table database.\n2. FR17.3:
      Placing an order for lobster increases the table''s check total by 18.0 within
      the table database.\n\nDetailed task description:\nBased on the above requirements
      and code, generate unit tests that exercise all requirements.\nMake sure the
      generated test cases clearly test the provided requirements.\n\nSolve the problem
      using the following approach:\nFor each requirement in order...\n    1. Come
      up with descriptive (unique) name for the test case and describe in natural
      language how this test exercises the requirement\n    2. Provide the name of
      the unit being tested (base file name without extension) and the name of the
      subprogram being tested (function name)\n    3. Provide the input and expected
      values by providing the correct identifier and value in the syntax outlined
      above.\n\nYou are allowed to use the following identifiers in your test case:\n-
      manager.Place_Order.Table\n- manager.Place_Order.Seat\n- manager.Place_Order.Order.Soup\n-
      manager.Place_Order.Order.Salad\n- manager.Place_Order.Order.Entree\n- manager.Place_Order.Order.Dessert\n-
      manager.Place_Order.Order.Beverage\n- manager.Place_Order.return\n- uut_prototype_stubs.Get_Table_Record.Table\n-
      uut_prototype_stubs.Get_Table_Record.return.Is_Occupied\n- uut_prototype_stubs.Get_Table_Record.return.Number_In_Party\n-
      uut_prototype_stubs.Get_Table_Record.return.Designator\n- uut_prototype_stubs.Get_Table_Record.return.Wait_Person\n-
      uut_prototype_stubs.Get_Table_Record.return.Order[i].Soup (for all: i in 0..3)\n-
      uut_prototype_stubs.Get_Table_Record.return.Order[i].Salad (for all: i in 0..3)\n-
      uut_prototype_stubs.Get_Table_Record.return.Order[i].Entree (for all: i in 0..3)\n-
      uut_prototype_stubs.Get_Table_Record.return.Order[i].Dessert (for all: i in
      0..3)\n- uut_prototype_stubs.Get_Table_Record.return.Order[i].Beverage (for
      all: i in 0..3)\n- uut_prototype_stubs.Get_Table_Record.return.Check_Total\n-
      manager.Add_Included_Dessert.Order\n- manager.Add_Included_Dessert.Order[i].Soup
      (for all: i in 0..31)\n- manager.Add_Included_Dessert.Order[i].Salad (for all:
      i in 0..31)\n- manager.Add_Included_Dessert.Order[i].Entree (for all: i in 0..31)\n-
      manager.Add_Included_Dessert.Order[i].Dessert (for all: i in 0..31)\n- manager.Add_Included_Dessert.Order[i].Beverage
      (for all: i in 0..31)\n- uut_prototype_stubs.Update_Table_Record.Table\n- uut_prototype_stubs.Update_Table_Record.Data.Is_Occupied\n-
      uut_prototype_stubs.Update_Table_Record.Data.Number_In_Party\n- uut_prototype_stubs.Update_Table_Record.Data.Designator\n-
      uut_prototype_stubs.Update_Table_Record.Data.Wait_Person\n- uut_prototype_stubs.Update_Table_Record.Data.Order[i].Soup
      (for all: i in 0..3)\n- uut_prototype_stubs.Update_Table_Record.Data.Order[i].Salad
      (for all: i in 0..3)\n- uut_prototype_stubs.Update_Table_Record.Data.Order[i].Entree
      (for all: i in 0..3)\n- uut_prototype_stubs.Update_Table_Record.Data.Order[i].Dessert
      (for all: i in 0..3)\n- uut_prototype_stubs.Update_Table_Record.Data.Order[i].Beverage
      (for all: i in 0..3)\n- uut_prototype_stubs.Update_Table_Record.Data.Check_Total\n\nYou
      MUST set an input value for all input to the functions, used globals and called
      stubs.\nIf you do not ensure this, it can happen that your test does not cover
      the correct path corresponding to the requirement.\nAn expected value is not
      required for all identifiers. Only for those relevant to the requirement.\n\nUnstubbed-by-default
      called functions (implement behaviour unless an identifier is set in which case
      the respective function is stubbed) called by Place_Order:\n- Add_Included_Dessert\nStubbed-by-default
      called functions (no behaviour is implemented, you can use identifiers to simulate
      a return value) called by Place_Order:\n- Get_Table_Record\n- Update_Table_Record\n\nNotes:\n-
      You are NOT allowed to invent any syntax that is not specified in the syntax
      reference. Stick to the syntax provided.\n- You are NOT allowed to invent any
      units or functions that are not present in the provided code.\n- This is a highly
      critical task, please ensure that the test cases are correct and complete and
      do not contain any logical or syntactical errors.\n- Test cases are independent
      of each other, i.e., they should not rely on one being run before the other
      (or environment being modified by one).\n- Generate exactly one test case per
      requirement.\n- In case the requirement and the code differ, the requirement
      is what you should test, i.e., it is the source of truth.\n- It might be that
      some of the provided code context and identifiers are incorrect. Use the most
      obviously correct parts of both and ignore the rest.\n\nReturn your answer in
      the following format:\n```json\n{\n    \"test_case_for_requirement_1\": <test
      case testing the first requirement in the list>,\n    \"test_case_for_requirement_2\":
      <test case testing the second requirement in the list>,\n    ...\n}\n```\n",
      "role": "user"}], "model": "gpt-4.1", "response_format": {"json_schema": {"name":
      "TestGenerationResult", "schema": {"$defs": {"ExpectedValueMapping": {"additionalProperties":
      false, "properties": {"identifier": {"$ref": "#/$defs/Identifier"}, "value":
      {"title": "Value", "type": "string"}}, "required": ["identifier", "value"],
      "title": "ExpectedValueMapping", "type": "object"}, "Identifier": {"enum": ["manager.Place_Order.Table",
      "manager.Place_Order.Seat", "manager.Place_Order.Order.Soup", "manager.Place_Order.Order.Salad",
      "manager.Place_Order.Order.Entree", "manager.Place_Order.Order.Dessert", "manager.Place_Order.Order.Beverage",
      "manager.Place_Order.return", "uut_prototype_stubs.Get_Table_Record.Table",
      "uut_prototype_stubs.Get_Table_Record.return.Is_Occupied", "uut_prototype_stubs.Get_Table_Record.return.Number_In_Party",
      "uut_prototype_stubs.Get_Table_Record.return.Designator", "uut_prototype_stubs.Get_Table_Record.return.Wait_Person",
      "uut_prototype_stubs.Get_Table_Record.return.Order[0].Soup", "uut_prototype_stubs.Get_Table_Record.return.Order[0].Salad",
      "uut_prototype_stubs.Get_Table_Record.return.Order[0].Entree", "uut_prototype_stubs.Get_Table_Record.return.Order[0].Dessert",
      "uut_prototype_stubs.Get_Table_Record.return.Order[0].Beverage", "uut_prototype_stubs.Get_Table_Record.return.Order[1].Soup",
      "uut_prototype_stubs.Get_Table_Record.return.Order[1].Salad", "uut_prototype_stubs.Get_Table_Record.return.Order[1].Entree",
      "uut_prototype_stubs.Get_Table_Record.return.Order[1].Dessert", "uut_prototype_stubs.Get_Table_Record.return.Order[1].Beverage",
      "uut_prototype_stubs.Get_Table_Record.return.Order[2].Soup", "uut_prototype_stubs.Get_Table_Record.return.Order[2].Salad",
      "uut_prototype_stubs.Get_Table_Record.return.Order[2].Entree", "uut_prototype_stubs.Get_Table_Record.return.Order[2].Dessert",
      "uut_prototype_stubs.Get_Table_Record.return.Order[2].Beverage", "uut_prototype_stubs.Get_Table_Record.return.Order[3].Soup",
      "uut_prototype_stubs.Get_Table_Record.return.Order[3].Salad", "uut_prototype_stubs.Get_Table_Record.return.Order[3].Entree",
      "uut_prototype_stubs.Get_Table_Record.return.Order[3].Dessert", "uut_prototype_stubs.Get_Table_Record.return.Order[3].Beverage",
      "uut_prototype_stubs.Get_Table_Record.return.Check_Total", "manager.Add_Included_Dessert.Order",
      "manager.Add_Included_Dessert.Order[0].Soup", "manager.Add_Included_Dessert.Order[0].Salad",
      "manager.Add_Included_Dessert.Order[0].Entree", "manager.Add_Included_Dessert.Order[0].Dessert",
      "manager.Add_Included_Dessert.Order[0].Beverage", "manager.Add_Included_Dessert.Order[1].Soup",
      "manager.Add_Included_Dessert.Order[1].Salad", "manager.Add_Included_Dessert.Order[1].Entree",
      "manager.Add_Included_Dessert.Order[1].Dessert", "manager.Add_Included_Dessert.Order[1].Beverage",
      "manager.Add_Included_Dessert.Order[2].Soup", "manager.Add_Included_Dessert.Order[2].Salad",
      "manager.Add_Included_Dessert.Order[2].Entree", "manager.Add_Included_Dessert.Order[2].Dessert",
      "manager.Add_Included_Dessert.Order[2].Beverage", "manager.Add_Included_Dessert.Order[3].Soup",
      "manager.Add_Included_Dessert.Order[3].Salad", "manager.Add_Included_Dessert.Order[3].Entree",
      "manager.Add_Included_Dessert.Order[3].Dessert", "manager.Add_Included_Dessert.Order[3].Beverage",
      "manager.Add_Included_Dessert.Order[4].Soup", "manager.Add_Included_Dessert.Order[4].Salad",
      "manager.Add_Included_Dessert.Order[4].Entree", "manager.Add_Included_Dessert.Order[4].Dessert",
      "manager.Add_Included_Dessert.Order[4].Beverage", "manager.Add_Included_Dessert.Order[5].Soup",
      "manager.Add_Included_Dessert.Order[5].Salad", "manager.Add_Included_Dessert.Order[5].Entree",
      "manager.Add_Included_Dessert.Order[5].Dessert", "manager.Add_Included_Dessert.Order[5].Beverage",
      "manager.Add_Included_Dessert.Order[6].Soup", "manager.Add_Included_Dessert.Order[6].Salad",
      "manager.Add_Included_Dessert.Order[6].Entree", "manager.Add_Included_Dessert.Order[6].Dessert",
      "manager.Add_Included_Dessert.Order[6].Beverage", "manager.Add_Included_Dessert.Order[7].Soup",
      "manager.Add_Included_Dessert.Order[7].Salad", "manager.Add_Included_Dessert.Order[7].Entree",
      "manager.Add_Included_Dessert.Order[7].Dessert", "manager.Add_Included_Dessert.Order[7].Beverage",
      "manager.Add_Included_Dessert.Order[8].Soup", "manager.Add_Included_Dessert.Order[8].Salad",
      "manager.Add_Included_Dessert.Order[8].Entree", "manager.Add_Included_Dessert.Order[8].Dessert",
      "manager.Add_Included_Dessert.Order[8].Beverage", "manager.Add_Included_Dessert.Order[9].Soup",
      "manager.Add_Included_Dessert.Order[9].Salad", "manager.Add_Included_Dessert.Order[9].Entree",
      "manager.Add_Included_Dessert.Order[9].Dessert", "manager.Add_Included_Dessert.Order[9].Beverage",
      "manager.Add_Included_Dessert.Order[10].Soup", "manager.Add_Included_Dessert.Order[10].Salad",
      "manager.Add_Included_Dessert.Order[10].Entree", "manager.Add_Included_Dessert.Order[10].Dessert",
      "manager.Add_Included_Dessert.Order[10].Beverage", "manager.Add_Included_Dessert.Order[11].Soup",
      "manager.Add_Included_Dessert.Order[11].Salad", "manager.Add_Included_Dessert.Order[11].Entree",
      "manager.Add_Included_Dessert.Order[11].Dessert", "manager.Add_Included_Dessert.Order[11].Beverage",
      "manager.Add_Included_Dessert.Order[12].Soup", "manager.Add_Included_Dessert.Order[12].Salad",
      "manager.Add_Included_Dessert.Order[12].Entree", "manager.Add_Included_Dessert.Order[12].Dessert",
      "manager.Add_Included_Dessert.Order[12].Beverage", "manager.Add_Included_Dessert.Order[13].Soup",
      "manager.Add_Included_Dessert.Order[13].Salad", "manager.Add_Included_Dessert.Order[13].Entree",
      "manager.Add_Included_Dessert.Order[13].Dessert", "manager.Add_Included_Dessert.Order[13].Beverage",
      "manager.Add_Included_Dessert.Order[14].Soup", "manager.Add_Included_Dessert.Order[14].Salad",
      "manager.Add_Included_Dessert.Order[14].Entree", "manager.Add_Included_Dessert.Order[14].Dessert",
      "manager.Add_Included_Dessert.Order[14].Beverage", "manager.Add_Included_Dessert.Order[15].Soup",
      "manager.Add_Included_Dessert.Order[15].Salad", "manager.Add_Included_Dessert.Order[15].Entree",
      "manager.Add_Included_Dessert.Order[15].Dessert", "manager.Add_Included_Dessert.Order[15].Beverage",
      "manager.Add_Included_Dessert.Order[16].Soup", "manager.Add_Included_Dessert.Order[16].Salad",
      "manager.Add_Included_Dessert.Order[16].Entree", "manager.Add_Included_Dessert.Order[16].Dessert",
      "manager.Add_Included_Dessert.Order[16].Beverage", "manager.Add_Included_Dessert.Order[17].Soup",
      "manager.Add_Included_Dessert.Order[17].Salad", "manager.Add_Included_Dessert.Order[17].Entree",
      "manager.Add_Included_Dessert.Order[17].Dessert", "manager.Add_Included_Dessert.Order[17].Beverage",
      "manager.Add_Included_Dessert.Order[18].Soup", "manager.Add_Included_Dessert.Order[18].Salad",
      "manager.Add_Included_Dessert.Order[18].Entree", "manager.Add_Included_Dessert.Order[18].Dessert",
      "manager.Add_Included_Dessert.Order[18].Beverage", "manager.Add_Included_Dessert.Order[19].Soup",
      "manager.Add_Included_Dessert.Order[19].Salad", "manager.Add_Included_Dessert.Order[19].Entree",
      "manager.Add_Included_Dessert.Order[19].Dessert", "manager.Add_Included_Dessert.Order[19].Beverage",
      "manager.Add_Included_Dessert.Order[20].Soup", "manager.Add_Included_Dessert.Order[20].Salad",
      "manager.Add_Included_Dessert.Order[20].Entree", "manager.Add_Included_Dessert.Order[20].Dessert",
      "manager.Add_Included_Dessert.Order[20].Beverage", "manager.Add_Included_Dessert.Order[21].Soup",
      "manager.Add_Included_Dessert.Order[21].Salad", "manager.Add_Included_Dessert.Order[21].Entree",
      "manager.Add_Included_Dessert.Order[21].Dessert", "manager.Add_Included_Dessert.Order[21].Beverage",
      "manager.Add_Included_Dessert.Order[22].Soup", "manager.Add_Included_Dessert.Order[22].Salad",
      "manager.Add_Included_Dessert.Order[22].Entree", "manager.Add_Included_Dessert.Order[22].Dessert",
      "manager.Add_Included_Dessert.Order[22].Beverage", "manager.Add_Included_Dessert.Order[23].Soup",
      "manager.Add_Included_Dessert.Order[23].Salad", "manager.Add_Included_Dessert.Order[23].Entree",
      "manager.Add_Included_Dessert.Order[23].Dessert", "manager.Add_Included_Dessert.Order[23].Beverage",
      "manager.Add_Included_Dessert.Order[24].Soup", "manager.Add_Included_Dessert.Order[24].Salad",
      "manager.Add_Included_Dessert.Order[24].Entree", "manager.Add_Included_Dessert.Order[24].Dessert",
      "manager.Add_Included_Dessert.Order[24].Beverage", "manager.Add_Included_Dessert.Order[25].Soup",
      "manager.Add_Included_Dessert.Order[25].Salad", "manager.Add_Included_Dessert.Order[25].Entree",
      "manager.Add_Included_Dessert.Order[25].Dessert", "manager.Add_Included_Dessert.Order[25].Beverage",
      "manager.Add_Included_Dessert.Order[26].Soup", "manager.Add_Included_Dessert.Order[26].Salad",
      "manager.Add_Included_Dessert.Order[26].Entree", "manager.Add_Included_Dessert.Order[26].Dessert",
      "manager.Add_Included_Dessert.Order[26].Beverage", "manager.Add_Included_Dessert.Order[27].Soup",
      "manager.Add_Included_Dessert.Order[27].Salad", "manager.Add_Included_Dessert.Order[27].Entree",
      "manager.Add_Included_Dessert.Order[27].Dessert", "manager.Add_Included_Dessert.Order[27].Beverage",
      "manager.Add_Included_Dessert.Order[28].Soup", "manager.Add_Included_Dessert.Order[28].Salad",
      "manager.Add_Included_Dessert.Order[28].Entree", "manager.Add_Included_Dessert.Order[28].Dessert",
      "manager.Add_Included_Dessert.Order[28].Beverage", "manager.Add_Included_Dessert.Order[29].Soup",
      "manager.Add_Included_Dessert.Order[29].Salad", "manager.Add_Included_Dessert.Order[29].Entree",
      "manager.Add_Included_Dessert.Order[29].Dessert", "manager.Add_Included_Dessert.Order[29].Beverage",
      "manager.Add_Included_Dessert.Order[30].Soup", "manager.Add_Included_Dessert.Order[30].Salad",
      "manager.Add_Included_Dessert.Order[30].Entree", "manager.Add_Included_Dessert.Order[30].Dessert",
      "manager.Add_Included_Dessert.Order[30].Beverage", "manager.Add_Included_Dessert.Order[31].Soup",
      "manager.Add_Included_Dessert.Order[31].Salad", "manager.Add_Included_Dessert.Order[31].Entree",
      "manager.Add_Included_Dessert.Order[31].Dessert", "manager.Add_Included_Dessert.Order[31].Beverage",
      "uut_prototype_stubs.Update_Table_Record.Table", "uut_prototype_stubs.Update_Table_Record.Data.Is_Occupied",
      "uut_prototype_stubs.Update_Table_Record.Data.Number_In_Party", "uut_prototype_stubs.Update_Table_Record.Data.Designator",
      "uut_prototype_stubs.Update_Table_Record.Data.Wait_Person", "uut_prototype_stubs.Update_Table_Record.Data.Order[0].Soup",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[0].Salad", "uut_prototype_stubs.Update_Table_Record.Data.Order[0].Entree",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[0].Dessert", "uut_prototype_stubs.Update_Table_Record.Data.Order[0].Beverage",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[1].Soup", "uut_prototype_stubs.Update_Table_Record.Data.Order[1].Salad",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[1].Entree", "uut_prototype_stubs.Update_Table_Record.Data.Order[1].Dessert",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[1].Beverage", "uut_prototype_stubs.Update_Table_Record.Data.Order[2].Soup",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[2].Salad", "uut_prototype_stubs.Update_Table_Record.Data.Order[2].Entree",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[2].Dessert", "uut_prototype_stubs.Update_Table_Record.Data.Order[2].Beverage",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[3].Soup", "uut_prototype_stubs.Update_Table_Record.Data.Order[3].Salad",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[3].Entree", "uut_prototype_stubs.Update_Table_Record.Data.Order[3].Dessert",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[3].Beverage", "uut_prototype_stubs.Update_Table_Record.Data.Check_Total"],
      "title": "Identifier", "type": "string"}, "InputValueMapping": {"additionalProperties":
      false, "properties": {"identifier": {"$ref": "#/$defs/Identifier"}, "value":
      {"title": "Value", "type": "string"}}, "required": ["identifier", "value"],
      "title": "InputValueMapping", "type": "object"}, "TestCase": {"additionalProperties":
      false, "properties": {"expected_values": {"items": {"$ref": "#/$defs/ExpectedValueMapping"},
      "title": "Expected Values", "type": "array"}, "input_values": {"items": {"$ref":
      "#/$defs/InputValueMapping"}, "title": "Input Values", "type": "array"}, "requirement_id":
      {"title": "Requirement Id", "type": "string"}, "subprogram_name": {"title":
      "Subprogram Name", "type": "string"}, "test_description": {"title": "Test Description",
      "type": "string"}, "test_name": {"title": "Test Name", "type": "string"}, "unit_name":
      {"title": "Unit Name", "type": "string"}}, "required": ["test_name", "test_description",
      "requirement_id", "unit_name", "subprogram_name", "input_values", "expected_values"],
      "title": "TestCase", "type": "object"}}, "additionalProperties": false, "properties":
      {"test_case_for_requirement": {"$ref": "#/$defs/TestCase"}}, "required": ["test_case_for_requirement",
      "test_case_for_requirement"], "title": "TestGenerationResult", "type": "object"},
      "strict": true}, "type": "json_schema"}, "seed": 42, "stream": false, "temperature":
      0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      api-key:
      - REDACTED
      authorization:
      - REDACTED
      connection:
      - keep-alive
      content-length:
      - '40992'
      content-type:
      - application/json
      host:
      - REDACTED
      user-agent:
      - AsyncAzureOpenAI/Python 1.58.1
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-helper-method:
      - beta.chat.completions.parse
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.58.1
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.12
    method: POST
    uri: https://rg-rds-play-openai-pes-ppt.openai.azure.com/openai/deployments/gpt-4.1/chat/completions?api-version=2024-12-01-preview
  response:
    body:
      string: '{"choices":[{"content_filter_results":{"hate":{"filtered":false,"severity":"safe"},"protected_material_code":{"filtered":false,"detected":false},"protected_material_text":{"filtered":false,"detected":false},"self_harm":{"filtered":false,"severity":"safe"},"sexual":{"filtered":false,"severity":"safe"},"violence":{"filtered":false,"severity":"safe"}},"finish_reason":"stop","index":0,"logprobs":null,"message":{"annotations":[],"content":"{\n  \"test_case_for_requirement_1\":
        {\n    \"test_name\": \"Test_Place_Order_Increases_Check_Total_By_10_For_Chicken\",\n    \"test_description\":
        \"Tests that placing an order for chicken increases the table''s check total
        by 10.0. The test sets up a table with an initial check total, places a chicken
        order, and verifies that the check total is increased by 10.0 in the updated
        table record.\",\n    \"requirement_id\": \"FR17.2\",\n    \"unit_name\":
        \"manager\",\n    \"subprogram_name\": \"Place_Order\",\n    \"input_values\":
        [\n      { \"identifier\": \"manager.Place_Order.Table\", \"value\": \"2\"
        },\n      { \"identifier\": \"manager.Place_Order.Seat\", \"value\": \"1\"
        },\n      { \"identifier\": \"manager.Place_Order.Order.Soup\", \"value\":
        \"NO_SOUP\" },\n      { \"identifier\": \"manager.Place_Order.Order.Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"manager.Place_Order.Order.Entree\",
        \"value\": \"CHICKEN\" },\n      { \"identifier\": \"manager.Place_Order.Order.Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"manager.Place_Order.Order.Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.Table\",
        \"value\": \"2\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Is_Occupied\",
        \"value\": \"v_false\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Number_In_Party\",
        \"value\": \"2\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Designator\",
        \"value\": \"''A''\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Wait_Person\",
        \"value\": \"\\\"Alice\\\"\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Check_Total\",
        \"value\": \"25.0\" }\n    ],\n    \"expected_values\": [\n      { \"identifier\":
        \"uut_prototype_stubs.Update_Table_Record.Table\", \"value\": \"2\" },\n      {
        \"identifier\": \"uut_prototype_stubs.Update_Table_Record.Data.Check_Total\",
        \"value\": \"35.0\" }\n    ]\n  },\n  \"test_case_for_requirement_2\": {\n    \"test_name\":
        \"Test_Place_Order_Increases_Check_Total_By_18_For_Lobster\",\n    \"test_description\":
        \"Tests that placing an order for lobster increases the table''s check total
        by 18.0. The test sets up a table with an initial check total, places a lobster
        order, and verifies that the check total is increased by 18.0 in the updated
        table record.\",\n    \"requirement_id\": \"FR17.3\",\n    \"unit_name\":
        \"manager\",\n    \"subprogram_name\": \"Place_Order\",\n    \"input_values\":
        [\n      { \"identifier\": \"manager.Place_Order.Table\", \"value\": \"3\"
        },\n      { \"identifier\": \"manager.Place_Order.Seat\", \"value\": \"2\"
        },\n      { \"identifier\": \"manager.Place_Order.Order.Soup\", \"value\":
        \"NO_SOUP\" },\n      { \"identifier\": \"manager.Place_Order.Order.Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"manager.Place_Order.Order.Entree\",
        \"value\": \"LOBSTER\" },\n      { \"identifier\": \"manager.Place_Order.Order.Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"manager.Place_Order.Order.Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.Table\",
        \"value\": \"3\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Is_Occupied\",
        \"value\": \"v_false\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Number_In_Party\",
        \"value\": \"1\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Designator\",
        \"value\": \"''B''\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Wait_Person\",
        \"value\": \"\\\"Bob\\\"\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Check_Total\",
        \"value\": \"50.0\" }\n    ],\n    \"expected_values\": [\n      { \"identifier\":
        \"uut_prototype_stubs.Update_Table_Record.Table\", \"value\": \"3\" },\n      {
        \"identifier\": \"uut_prototype_stubs.Update_Table_Record.Data.Check_Total\",
        \"value\": \"68.0\" }\n    ]\n  }\n}","refusal":null,"role":"assistant"}}],"created":1752564162,"id":"chatcmpl-BtUHq90YZbxSkdopskDXYJXbKvKHX","model":"gpt-4.1-2025-04-14","object":"chat.completion","prompt_filter_results":[{"prompt_index":0,"content_filter_results":{"hate":{"filtered":false,"severity":"safe"},"jailbreak":{"filtered":false,"detected":false},"self_harm":{"filtered":false,"severity":"safe"},"sexual":{"filtered":false,"severity":"safe"},"violence":{"filtered":false,"severity":"safe"}}}],"system_fingerprint":"fp_07e970ab25","usage":{"completion_tokens":2267,"completion_tokens_details":{"accepted_prediction_tokens":0,"audio_tokens":0,"reasoning_tokens":0,"rejected_prediction_tokens":0},"prompt_tokens":9895,"prompt_tokens_details":{"audio_tokens":0,"cached_tokens":0},"total_tokens":12162}}

        '
    headers:
      Content-Length:
      - '10017'
      Content-Type:
      - application/json
      Date:
      - Tue, 15 Jul 2025 07:22:54 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      apim-request-id:
      - 3c3f490f-241f-49de-93f8-54ca2c71d45f
      azureml-model-session:
      - d071-20250625140329
      cmp-upstream-response-duration:
      - '13352'
      x-accel-buffering:
      - 'no'
      x-content-type-options:
      - nosniff
      x-ms-deployment-name:
      - gpt-4.1
      x-ms-rai-invoked:
      - 'true'
      x-ms-region:
      - Sweden Central
      x-ratelimit-limit-requests:
      - '1006'
      x-ratelimit-limit-tokens:
      - '1006000'
      x-ratelimit-remaining-requests:
      - '996'
      x-ratelimit-remaining-tokens:
      - '944794'
      x-request-id:
      - 2417b4b1-2f7b-4a59-93aa-e17c96a34674
    status:
      code: 200
      message: OK
- request:
    body: '{"max_completion_tokens": 8192, "messages": [{"content": "You are an AI
      assistant that generates test code for given requirements.", "role": "system"},
      {"content": "\nBased on the following requirements, references, and code, generate
      one test case per given requirement that exercises it.\n\nTest framework reference:\n##
      Test Case Format\nThe format of a test case is as follows:\n{\n    \"test_name\":
      <some descriptive test name>,\n    \"test_description\": <more details about
      the test>\n    \"requirement_id\": <requirement being tested by this test> (optional)\n    \"unit_name\":
      <unit_name>,\n    \"subprogram_name\": <subprogram_name>,\n    \"input_values\":
      [\n        { \"identifier\": <identifier>, \"value\": <value> },\n        ...\n    ],\n    \"expected_values\":
      [\n        { \"identifier\": <identifier>, \"value\": <value> },\n        ...\n    ]\n}\n\n###
      Identifier and Value Syntax\nThe following sections describe the syntax for
      specifying the `identifier` and `value` fields in the test case format. `unit_name`
      and `subprogram_name` refer to file names of C/C++ files (without extension)
      and function names in these files respectively (to refer to methods in classes
      use `<class name>::<method name>`). It is only possible to include identifiers
      from different units and other subprograms if they are called/used in the subprogram
      being tested.\n\n#### Numeric Types\n- Assign the number directly.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.parameter\", \"value\": \"42\" }\n    { \"identifier\":
      \"unit.subprogram.parameter\", \"value\": \"84\" }\n\n#### Structure Types\n-
      Use the standard C syntax to refer to fields within structures.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.struct_param.field\", \"value\": \"CAESAR\"
      }\n    { \"identifier\": \"unit.subprogram.struct_param.field\", \"value\":
      \"STEAK\" }\n\n#### Enumeration Types\n- Use the enumeral value directly.\n  -
      Example:\n    { \"identifier\": \"unit.subprogram.enum_param\", \"value\": \"ENUM_VALUE\"
      }\n\n#### Character and String Types\n- Use standard C delimiters for characters
      and strings.\n  - Example:\n    { \"identifier\": \"unit.subprogram.char_param\",
      \"value\": \"''a''\" }\n    { \"identifier\": \"unit.subprogram.string_param\",
      \"value\": \"\\\"Hello, World\\\"\" }\n- Treat strings as atomic values to set.
      Do not attempt to treat them as a char array, i.e., do not malloc or attempt
      to access chars at individual indices.\n\n#### Pointer and Array Types\n- For
      constrained arrays, specify the index and value.\n  - Example:\n    { \"identifier\":
      \"unit.subprogram.array_param[2]\", \"value\": \"42\" }\n- For unconstrained
      arrays, use `<<malloc [amount of slots to allocate as integer]>>` to allocate
      memory.\n  - Example:\n    { \"identifier\": \"unit.subprogram.array_param\",
      \"value\": \"<<malloc 2>>\" }\n    { \"identifier\": \"unit.subprogram.array_param[1]\",
      \"value\": \"3\" }\n- For pointers, use index 0 to access it (generally pointers
      and unconstrained arrays are the same after all)\n  - Example:\n    { \"identifier\":
      \"unit.subprogram.ptr_param[0]\", \"value\": \"12\" }\n- If you want to make
      something null then use `<<null>>`.\n  - Example:\n    { \"identifier\": \"unit.subprogram.pointer_param\",
      \"value\": \"<<null>>\" }\n    or\n    { \"identifier\": \"unit.subprogram.array_param\",
      \"value\": \"<<null>>\" }\n\n#### Function Return Parameters\n- Use the keyword
      `return` for function return values.\n  - Example:\n    { \"identifier\": \"unit.subprogram.return\",
      \"value\": \"23.0\" }\n\n#### Global Objects\n- Use the syntax `UNIT.<<GLOBAL>>.OBJECT`
      to set values for global objects.\n  - Example:\n    { \"identifier\": \"unit.<<GLOBAL>>.global_object.field\",
      \"value\": \"VALUE\" }\n- Note: `UNIT.OBJECT` is NEVER valid syntax\n\n#####
      Classes\n- To set and expect values of methods in a class (unlike standalone
      subprograms), it is necessary to first instantiate a base object using a constructor\n-
      Use the syntax `UNIT.<<GLOBAL>>.(cl).CLASS_NAME.SUBCLASS_NAME.<<constructor>>.<<call>>`
      to call the constructor of `SUBCLASS` to instantiate a `CLASS` object\n  - Example:\n    {
      \"identifier\": \"unit.<<GLOBAL>>.(cl).class_name.class_name.<<constructor>>.<<call>>\",
      \"value\": \"0\" }\n  - Note: The value in this case is irrelevant and always
      set to 0.\n- To set and expect member variables of a constructed object use
      the syntax `UNIT.<<GLOBAL>>.(cl).CLASS_NAME.SUBCLASS_NAME.MEMBER_NAME`\n  -
      Example:\n    { \"identifier\": \"unit.<<GLOBAL>>.(cl).class_name.class_name.member\",
      \"value\": \"test\" }\n  - Note: If the member is a structured entity like a
      struct or a class instance you can access the subfields like described in the
      `Structure Types` section.\n- To set and expect arguments and return values
      of methods in a class use the name do so like you would for regular subprograms
      except that you prefix the name with the class name and `::`\n  - Example:\n    {
      \"identifier\": \"unit.class_name::member_method.parameter\", \"value\": \"2\"
      }\n  - Note: If you use this ALWAYS first call the class constructor!\n\n####
      Range of Values for Input Data\n- Use range expressions to test a range of values.\n  -
      Example:\n    { \"identifier\": \"unit.subprogram.parameter\", \"value\": \"vary
      from: 0.0 to: 90.0 by: 0.1\" }\n\n#### Range of Values for Expected Results\n-
      Use the syntax `<min> .. <max>` for expected value ranges.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.parameter\", \"value\": \"257.1 .. 259.9\"
      }\n\n#### List of Values\n- Use a comma-separated list for multiple values.\n  -
      Example:\n    { \"identifier\": \"unit.subprogram.parameter\", \"value\": \"1,2,4\"
      }\n- Use parentheses for repeated values.\n  - Example:\n    { \"identifier\":
      \"unit.subprogram.parameter\", \"value\": \"1,(4)2,4\" }\n- Note: This is used
      in case something needs to be set multiple times (like for a stub return) during
      one call, NOT to specify values in an array. To do so, use the regular index
      syntax as outlined above instead.\n\n#### Working with Overloaded Subprograms\n-
      Append the parameter type list to the subprogram name.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram(int).parameter\", \"value\": \"3\" }\n    {
      \"identifier\": \"unit.subprogram(char).parameter\", \"value\": \"''d''\" }\n\n####
      Boolean Values\n- Use `1` for `true` and `0` for `false`.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.boolean_param\", \"value\": \"1\" }\n    {
      \"identifier\": \"unit.subprogram.boolean_param\", \"value\": \"0\" }\n\n####
      Accessing Subprograms Outside the Unit\n- Use `uut_prototype_stubs` as the unit
      for subprograms defined outside of the unit of the test case.\n  - Example:\n    {
      \"identifier\": \"uut_prototype_stubs.name_of_external_subprogram.parameter\",
      \"value\": \"42\" }\n\n#### Emulating stubbed pointer manipulating functions\n-
      Normally it is easy to emulate a stubbed function returning some value (by setting
      the return value of the stubbed function)\n- This is not possible if the stubbed
      function works with pointers as only values can be specified (so only ever the
      contents of a pointer), e.g., functions like memcpy\n- Therefore, in these cases
      you can emulate the stubbed function setting the contents of the pointer using
      <<pointer value_to_set>>\n  - For example assume we have a pointer input variable
      *float x that is modified by a stubbed called to foo(*float pointer_to_modify),
      i.e., foo(x). Then you can change the value, i.e., *x to 10 like so:\n    {
      \"identifier\": \"uut_prototype_stubs.foo.pointer_to_modify\", \"value\": \"<<pointer
      10>>\" }\n  - The other input values of the function of course do not need to
      be specified explicitly (unless you also want to see the values of those input
      pointers)\n- You can only set one variable like this per test case due to technical
      reasons so choose wisely (if you use this feature)\n\n#### Emulating multiple
      function calls\n- Use the multiple value syntax, one value will be read everytime
      the stubbed function is called\n  - Example (foo is called twice, and should
      return 2 the first time and 3 the second):\n    { \"identifier\": \"uut_prototype_stubs.foo.return\",
      \"value\": \"2,3\" }\n\n## Test Case Execution\n1. The test framework will call
      the specified subprogram/function\n2. When a value of a variable would be read,
      if it is specified as a test value, it is set to that value instead\n3. After
      the subprogram finishes, the expected values are checked against the actual
      values at that point\n\nAll tests are executed in isolation. The execution of
      one test does not influence the execution of others.\n\n### Stubbing behaviour\n-
      All function calls from external files, i.e, those referenced with `uut_prototype_stubs`
      are stubbed automatically and do not implement any behaviour. Setting their
      input values has no effect on their output values (instead default values are
      output unless you specify values for them).\n- If any of the parameters or return
      value of a called function (which is not automatically stubbed as outlined above)
      are set or expected to be some value using an identifier, the function will
      be stubbed during execution and not implement any behaviour. In this case it
      is forbidden to also expect the return value to equal something (it won''t as
      the function will be stubbed).\n  - If none are set or expected the function
      will execute as normal\n\n### Default identifier values and initialization\n-
      In general any value not set (input of course), will fall back to a default
      value. However this should be avoided to prevent undefined behaviour. This means
      all input variables (and outputs of stubbed values) should be exhaustively described.\n-
      Do not set an identifier multiple times, it just results in overriding of the
      previous value\n- To access methods of a class and set values it is imperative
      to first instantiate the class using a constructor. For all classes a default
      object is ready to be initialized if needed using the respective constructor.\n-
      Similarly, arrays or pointers should always be allocated\n\n## Examples\n\nLet''s
      consider a more complex C++ code snippet in a file named `data_processor.cpp`:\n\n```cpp\n//
      File: data_processor.cpp\n// Unit: data_processor\n\ntypedef struct {\n    int
      id;\n    float value;\n    char status;\n} DataRecord;\n\ntypedef enum {\n    MODE_NORMAL
      = 0,\n    MODE_DEBUG = 1,\n    MODE_ERROR = 2\n} ProcessingMode;\n\n// External
      function declarations\nextern int validate_record(DataRecord* record);\nextern
      void log_error(const char* message);\nextern DataRecord* allocate_buffer(int
      size);\n\nProcessingMode current_mode = MODE_NORMAL;\n\nint process_data_array(DataRecord*
      input_array, int array_size, DataRecord** output_array) {\n    if (input_array
      == NULL || array_size <= 0) {\n        if (current_mode == MODE_DEBUG) {\n            log_error(\"Invalid
      input parameters\");\n        }\n        return -1;\n    }\n    \n    // Allocate
      output buffer\n    *output_array = allocate_buffer(array_size);\n    if (*output_array
      == NULL) {\n        log_error(\"Memory allocation failed\");\n        return
      -2;\n    }\n    \n    int processed_count = 0;\n    for (int i = 0; i < array_size;
      i++) {\n        // Validate each record using external function\n        int
      validation_result = validate_record(&input_array[i]);\n        \n        if
      (validation_result > 0) {\n            // Copy valid record to output with modified
      value\n            (*output_array)[processed_count].id = input_array[i].id;\n            (*output_array)[processed_count].value
      = input_array[i].value * 1.5f;\n            (*output_array)[processed_count].status
      = ''V''; // Valid\n            processed_count++;\n        } else if (current_mode
      == MODE_ERROR) {\n            // In error mode, stop processing on first invalid
      record\n            log_error(\"Invalid record encountered in error mode\");\n            return
      processed_count;\n        }\n        // In normal mode, skip invalid records
      and continue\n    }\n    \n    return processed_count;\n}\n```\n\n### Example
      1: Testing Null Input Handling with Branching\n\n**Requirement REQ-DP-001:**
      The `process_data_array` function shall return -1 when input_array is NULL and
      log an error message if in DEBUG mode.\n\n```json\n{\n  \"test_name\": \"Test_Null_Input_Debug_Mode\",\n  \"test_description\":
      \"Tests process_data_array with NULL input in DEBUG mode to ensure it returns
      -1 and calls log_error.\",\n  \"requirement_id\": \"REQ-DP-001\",\n  \"unit_name\":
      \"data_processor\",\n  \"subprogram_name\": \"process_data_array\",\n  \"input_values\":
      [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\", \"value\":
      \"MODE_DEBUG\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<null>>\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"5\" },\n  ],\n  \"expected_values\": [\n    { \"identifier\": \"uut_prototype_stubs.log_error.message\",
      \"value\": \"\\\"Invalid input parameters\\\"\" },\n    { \"identifier\": \"data_processor.process_data_array.return\",
      \"value\": \"-1\" }\n  ]\n}\n```\n\n### Example 2: Testing Memory Allocation
      with Stubbing\n\n**Requirement REQ-DP-002:** The `process_data_array` function
      shall return -2 and log an error when memory allocation fails.\n\n```json\n{\n  \"test_name\":
      \"Test_Memory_Allocation_Failure\",\n  \"test_description\": \"Tests process_data_array
      when allocate_buffer returns NULL to ensure proper error handling.\",\n  \"requirement_id\":
      \"REQ-DP-002\",\n  \"unit_name\": \"data_processor\",\n  \"subprogram_name\":
      \"process_data_array\",\n  \"input_values\": [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\",
      \"value\": \"MODE_NORMAL\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<malloc 1>>\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].id\",
      \"value\": \"1\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].value\",
      \"value\": \"10.5\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].status\",
      \"value\": \"''A''\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"2\" },\n    { \"identifier\": \"uut_prototype_stubs.allocate_buffer.return\",
      \"value\": \"<<null>>\" },\n  ],\n  \"expected_values\": [\n    { \"identifier\":
      \"uut_prototype_stubs.log_error.message\", \"value\": \"\\\"Memory allocation
      failed\\\"\" },\n    { \"identifier\": \"data_processor.process_data_array.return\",
      \"value\": \"-2\" }\n  ]\n}\n```\n\n### Example 3: Testing Complex Processing
      with Multiple Stubs\n\n**Requirement REQ-DP-003:** The `process_data_array`
      function shall process valid records by multiplying their values by 1.5 and
      setting status to ''V''.\n\n```json\n{\n  \"test_name\": \"Test_Valid_Record_Processing\",\n  \"test_description\":
      \"Tests process_data_array with mixed valid/invalid records to ensure proper
      processing and output.\",\n  \"requirement_id\": \"REQ-DP-003\",\n  \"unit_name\":
      \"data_processor\",\n  \"subprogram_name\": \"process_data_array\",\n  \"input_values\":
      [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\", \"value\":
      \"MODE_NORMAL\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].id\",
      \"value\": \"100\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].value\",
      \"value\": \"20.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].status\",
      \"value\": \"''A''\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].id\",
      \"value\": \"200\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].status\",
      \"value\": \"''B''\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[2].id\",
      \"value\": \"300\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[2].value\",
      \"value\": \"40.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[2].status\",
      \"value\": \"''C''\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"3\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0]\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"uut_prototype_stubs.validate_record.return\",
      \"value\": \"1,0,1\" }\n  ],\n  \"expected_values\": [\n    { \"identifier\":
      \"data_processor.process_data_array.return\", \"value\": \"2\" },\n    { \"identifier\":
      \"data_processor.process_data_array.output_array[0][0].id\", \"value\": \"100\"
      },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].status\",
      \"value\": \"''V''\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][1].id\",
      \"value\": \"300\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][1].value\",
      \"value\": \"60.0\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][1].status\",
      \"value\": \"''V''\" }\n  ]\n}\n```\n\n### Example 4: Testing Error Mode with
      Early Termination\n\n**Requirement REQ-DP-004:** The `process_data_array` function
      shall stop processing and return the current count when an invalid record is
      encountered in ERROR mode.\n\n```json\n{\n  \"test_name\": \"Test_Error_Mode_Early_Termination\",\n  \"test_description\":
      \"Tests process_data_array in ERROR mode to ensure it stops processing on first
      invalid record.\",\n  \"requirement_id\": \"REQ-DP-004\",\n  \"unit_name\":
      \"data_processor\",\n  \"subprogram_name\": \"process_data_array\",\n  \"input_values\":
      [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\", \"value\":
      \"MODE_ERROR\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].id\",
      \"value\": \"100\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].value\",
      \"value\": \"20.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].id\",
      \"value\": \"200\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"3\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0]\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"uut_prototype_stubs.allocate_buffer.size\",
      \"value\": \"3\" },\n    { \"identifier\": \"uut_prototype_stubs.validate_record.return\",
      \"value\": \"1,-1\" },\n  ],\n  \"expected_values\": [\n    { \"identifier\":
      \"uut_prototype_stubs.log_error.message\", \"value\": \"\\\"Invalid record encountered
      in error mode\\\"\" },\n    { \"identifier\": \"data_processor.process_data_array.return\",
      \"value\": \"1\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].id\",
      \"value\": \"100\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].status\",
      \"value\": \"''V''\" }\n  ]\n}\n```\n\nRelevant Code:\n```cpp\n// Unit: manager\n\n//
      Definitions of types, called functions and data structures:\n\ntypedef float
      FLOAT;\n\nenum boolean { v_false, v_true };\n\nenum soups { NO_SOUP, ONION,
      CHOWDER };\n\nenum salads { NO_SALAD, CAESAR, GREEN };\n\nenum entrees { NO_ENTREE,
      STEAK, CHICKEN, LOBSTER, PASTA };\n\nenum desserts { NO_DESSERT, CAKE, PIE,
      FRUIT };\n\nenum beverages { NO_BEVERAGE, WINE, BEER, MIXED_DRINK, SODA };\n\nstruct
      order_type\n{\n  enum soups Soup;\n  enum salads Salad;\n  enum entrees Entree;\n  enum
      desserts Dessert;\n  enum beverages Beverage;\n};\n\ntypedef unsigned short
      seat_index_type;\n\ntypedef unsigned short table_index_type;\n\nstruct table_data_type\n{\n  enum
      boolean Is_Occupied;\n  seat_index_type Number_In_Party;\n  char Designator;\n  char
      Wait_Person[10];\n  struct order_type Order[4];\n  FLOAT Check_Total;\n};\n\nstruct
      table_data_type Get_Table_Record(table_index_type Table);\n\nvoid Update_Table_Record(table_index_type
      Table, struct table_data_type Data);\n\nvoid Add_Included_Dessert(struct order_type*
      Order)\n{\n  if(Order->Entree == STEAK &&\n     Order->Salad == CAESAR &&\n     Order->Beverage
      == MIXED_DRINK) {\n\n    Order->Dessert = PIE;\n\n  } else if(Order->Entree
      == LOBSTER &&\n            Order->Salad == GREEN &&\n            Order->Beverage
      == WINE) {\n\n    Order->Dessert = CAKE;\n  }\n}\n\n// Code for Place_Order:\nint
      Place_Order(table_index_type Table,\n                seat_index_type Seat,\n                struct
      order_type Order)\n{\n  struct table_data_type Table_Data;\n\n  Table_Data =
      Get_Table_Record(Table);\n\n  Table_Data.Is_Occupied = v_true;\n  Table_Data.Number_In_Party
      = Table_Data.Number_In_Party + 1;\n  Table_Data.Order[Seat] = Order;\n\n  /*
      Add a free dessert in some cases */\n  Add_Included_Dessert(&Table_Data.Order[Seat]);\n\n  switch(Order.Entree)\n    {\n    case
      NO_ENTREE :\n       break;\n    case STEAK :\n       Table_Data.Check_Total
      = Table_Data.Check_Total + 14.0;\n       break;\n    case CHICKEN :\n       Table_Data.Check_Total
      = Table_Data.Check_Total + 10.0;\n       break;\n    case LOBSTER :\n       Table_Data.Check_Total
      = Table_Data.Check_Total + 18.0;\n       break;\n    case PASTA :\n       Table_Data.Check_Total
      = Table_Data.Check_Total + 12.0;\n       break;\n    }\n\n  Update_Table_Record(Table,
      Table_Data);\n  return 0;\n}\n```\n\nExample Test Cases:\n```json\n[\n  {\n    \"test_name\":
      \"BASIS-PATH-001\",\n    \"test_description\": \"This is an automatically generated
      test case.\\nTest Path 1\\n(5) case (Order.Entree) ==> PASTA\\nTest Case Generation
      Notes:\",\n    \"unit_name\": \"manager\",\n    \"subprogram_name\": \"Place_Order\",\n    \"input_values\":
      [\n      {\n        \"identifier\": \"manager.Place_Order.Order.Entree\",\n        \"value\":
      \"PASTA\"\n      },\n      {\n        \"identifier\": \"manager.Place_Order.Table\",\n        \"value\":
      \"<<MIN>>\"\n      },\n      {\n        \"identifier\": \"manager.Place_Order.Seat\",\n        \"value\":
      \"<<MIN>>\"\n      }\n    ],\n    \"expected_values\": [],\n    \"requirement_id\":
      null\n  }\n]\n```\n\nRequirements:\n1. FR16.1: Placing an order updates the
      seat''s order within the table database.\n2. FR17.1: Placing an order for steak
      increases the table''s check total by 14.0 within the table database.\n\nDetailed
      task description:\nBased on the above requirements and code, generate unit tests
      that exercise all requirements.\nMake sure the generated test cases clearly
      test the provided requirements.\n\nSolve the problem using the following approach:\nFor
      each requirement in order...\n    1. Come up with descriptive (unique) name
      for the test case and describe in natural language how this test exercises the
      requirement\n    2. Provide the name of the unit being tested (base file name
      without extension) and the name of the subprogram being tested (function name)\n    3.
      Provide the input and expected values by providing the correct identifier and
      value in the syntax outlined above.\n\nYou are allowed to use the following
      identifiers in your test case:\n- manager.Place_Order.Table\n- manager.Place_Order.Seat\n-
      manager.Place_Order.Order.Soup\n- manager.Place_Order.Order.Salad\n- manager.Place_Order.Order.Entree\n-
      manager.Place_Order.Order.Dessert\n- manager.Place_Order.Order.Beverage\n- manager.Place_Order.return\n-
      uut_prototype_stubs.Get_Table_Record.Table\n- uut_prototype_stubs.Get_Table_Record.return.Is_Occupied\n-
      uut_prototype_stubs.Get_Table_Record.return.Number_In_Party\n- uut_prototype_stubs.Get_Table_Record.return.Designator\n-
      uut_prototype_stubs.Get_Table_Record.return.Wait_Person\n- uut_prototype_stubs.Get_Table_Record.return.Order[i].Soup
      (for all: i in 0..3)\n- uut_prototype_stubs.Get_Table_Record.return.Order[i].Salad
      (for all: i in 0..3)\n- uut_prototype_stubs.Get_Table_Record.return.Order[i].Entree
      (for all: i in 0..3)\n- uut_prototype_stubs.Get_Table_Record.return.Order[i].Dessert
      (for all: i in 0..3)\n- uut_prototype_stubs.Get_Table_Record.return.Order[i].Beverage
      (for all: i in 0..3)\n- uut_prototype_stubs.Get_Table_Record.return.Check_Total\n-
      manager.Add_Included_Dessert.Order\n- manager.Add_Included_Dessert.Order[i].Soup
      (for all: i in 0..31)\n- manager.Add_Included_Dessert.Order[i].Salad (for all:
      i in 0..31)\n- manager.Add_Included_Dessert.Order[i].Entree (for all: i in 0..31)\n-
      manager.Add_Included_Dessert.Order[i].Dessert (for all: i in 0..31)\n- manager.Add_Included_Dessert.Order[i].Beverage
      (for all: i in 0..31)\n- uut_prototype_stubs.Update_Table_Record.Table\n- uut_prototype_stubs.Update_Table_Record.Data.Is_Occupied\n-
      uut_prototype_stubs.Update_Table_Record.Data.Number_In_Party\n- uut_prototype_stubs.Update_Table_Record.Data.Designator\n-
      uut_prototype_stubs.Update_Table_Record.Data.Wait_Person\n- uut_prototype_stubs.Update_Table_Record.Data.Order[i].Soup
      (for all: i in 0..3)\n- uut_prototype_stubs.Update_Table_Record.Data.Order[i].Salad
      (for all: i in 0..3)\n- uut_prototype_stubs.Update_Table_Record.Data.Order[i].Entree
      (for all: i in 0..3)\n- uut_prototype_stubs.Update_Table_Record.Data.Order[i].Dessert
      (for all: i in 0..3)\n- uut_prototype_stubs.Update_Table_Record.Data.Order[i].Beverage
      (for all: i in 0..3)\n- uut_prototype_stubs.Update_Table_Record.Data.Check_Total\n\nYou
      MUST set an input value for all input to the functions, used globals and called
      stubs.\nIf you do not ensure this, it can happen that your test does not cover
      the correct path corresponding to the requirement.\nAn expected value is not
      required for all identifiers. Only for those relevant to the requirement.\n\nUnstubbed-by-default
      called functions (implement behaviour unless an identifier is set in which case
      the respective function is stubbed) called by Place_Order:\n- Add_Included_Dessert\nStubbed-by-default
      called functions (no behaviour is implemented, you can use identifiers to simulate
      a return value) called by Place_Order:\n- Get_Table_Record\n- Update_Table_Record\n\nNotes:\n-
      You are NOT allowed to invent any syntax that is not specified in the syntax
      reference. Stick to the syntax provided.\n- You are NOT allowed to invent any
      units or functions that are not present in the provided code.\n- This is a highly
      critical task, please ensure that the test cases are correct and complete and
      do not contain any logical or syntactical errors.\n- Test cases are independent
      of each other, i.e., they should not rely on one being run before the other
      (or environment being modified by one).\n- Generate exactly one test case per
      requirement.\n- In case the requirement and the code differ, the requirement
      is what you should test, i.e., it is the source of truth.\n- It might be that
      some of the provided code context and identifiers are incorrect. Use the most
      obviously correct parts of both and ignore the rest.\n\nReturn your answer in
      the following format:\n```json\n{\n    \"test_case_for_requirement_1\": <test
      case testing the first requirement in the list>,\n    \"test_case_for_requirement_2\":
      <test case testing the second requirement in the list>,\n    ...\n}\n```\n",
      "role": "user"}], "model": "gpt-4.1", "response_format": {"json_schema": {"name":
      "TestGenerationResult", "schema": {"$defs": {"ExpectedValueMapping": {"additionalProperties":
      false, "properties": {"identifier": {"$ref": "#/$defs/Identifier"}, "value":
      {"title": "Value", "type": "string"}}, "required": ["identifier", "value"],
      "title": "ExpectedValueMapping", "type": "object"}, "Identifier": {"enum": ["manager.Place_Order.Table",
      "manager.Place_Order.Seat", "manager.Place_Order.Order.Soup", "manager.Place_Order.Order.Salad",
      "manager.Place_Order.Order.Entree", "manager.Place_Order.Order.Dessert", "manager.Place_Order.Order.Beverage",
      "manager.Place_Order.return", "uut_prototype_stubs.Get_Table_Record.Table",
      "uut_prototype_stubs.Get_Table_Record.return.Is_Occupied", "uut_prototype_stubs.Get_Table_Record.return.Number_In_Party",
      "uut_prototype_stubs.Get_Table_Record.return.Designator", "uut_prototype_stubs.Get_Table_Record.return.Wait_Person",
      "uut_prototype_stubs.Get_Table_Record.return.Order[0].Soup", "uut_prototype_stubs.Get_Table_Record.return.Order[0].Salad",
      "uut_prototype_stubs.Get_Table_Record.return.Order[0].Entree", "uut_prototype_stubs.Get_Table_Record.return.Order[0].Dessert",
      "uut_prototype_stubs.Get_Table_Record.return.Order[0].Beverage", "uut_prototype_stubs.Get_Table_Record.return.Order[1].Soup",
      "uut_prototype_stubs.Get_Table_Record.return.Order[1].Salad", "uut_prototype_stubs.Get_Table_Record.return.Order[1].Entree",
      "uut_prototype_stubs.Get_Table_Record.return.Order[1].Dessert", "uut_prototype_stubs.Get_Table_Record.return.Order[1].Beverage",
      "uut_prototype_stubs.Get_Table_Record.return.Order[2].Soup", "uut_prototype_stubs.Get_Table_Record.return.Order[2].Salad",
      "uut_prototype_stubs.Get_Table_Record.return.Order[2].Entree", "uut_prototype_stubs.Get_Table_Record.return.Order[2].Dessert",
      "uut_prototype_stubs.Get_Table_Record.return.Order[2].Beverage", "uut_prototype_stubs.Get_Table_Record.return.Order[3].Soup",
      "uut_prototype_stubs.Get_Table_Record.return.Order[3].Salad", "uut_prototype_stubs.Get_Table_Record.return.Order[3].Entree",
      "uut_prototype_stubs.Get_Table_Record.return.Order[3].Dessert", "uut_prototype_stubs.Get_Table_Record.return.Order[3].Beverage",
      "uut_prototype_stubs.Get_Table_Record.return.Check_Total", "manager.Add_Included_Dessert.Order",
      "manager.Add_Included_Dessert.Order[0].Soup", "manager.Add_Included_Dessert.Order[0].Salad",
      "manager.Add_Included_Dessert.Order[0].Entree", "manager.Add_Included_Dessert.Order[0].Dessert",
      "manager.Add_Included_Dessert.Order[0].Beverage", "manager.Add_Included_Dessert.Order[1].Soup",
      "manager.Add_Included_Dessert.Order[1].Salad", "manager.Add_Included_Dessert.Order[1].Entree",
      "manager.Add_Included_Dessert.Order[1].Dessert", "manager.Add_Included_Dessert.Order[1].Beverage",
      "manager.Add_Included_Dessert.Order[2].Soup", "manager.Add_Included_Dessert.Order[2].Salad",
      "manager.Add_Included_Dessert.Order[2].Entree", "manager.Add_Included_Dessert.Order[2].Dessert",
      "manager.Add_Included_Dessert.Order[2].Beverage", "manager.Add_Included_Dessert.Order[3].Soup",
      "manager.Add_Included_Dessert.Order[3].Salad", "manager.Add_Included_Dessert.Order[3].Entree",
      "manager.Add_Included_Dessert.Order[3].Dessert", "manager.Add_Included_Dessert.Order[3].Beverage",
      "manager.Add_Included_Dessert.Order[4].Soup", "manager.Add_Included_Dessert.Order[4].Salad",
      "manager.Add_Included_Dessert.Order[4].Entree", "manager.Add_Included_Dessert.Order[4].Dessert",
      "manager.Add_Included_Dessert.Order[4].Beverage", "manager.Add_Included_Dessert.Order[5].Soup",
      "manager.Add_Included_Dessert.Order[5].Salad", "manager.Add_Included_Dessert.Order[5].Entree",
      "manager.Add_Included_Dessert.Order[5].Dessert", "manager.Add_Included_Dessert.Order[5].Beverage",
      "manager.Add_Included_Dessert.Order[6].Soup", "manager.Add_Included_Dessert.Order[6].Salad",
      "manager.Add_Included_Dessert.Order[6].Entree", "manager.Add_Included_Dessert.Order[6].Dessert",
      "manager.Add_Included_Dessert.Order[6].Beverage", "manager.Add_Included_Dessert.Order[7].Soup",
      "manager.Add_Included_Dessert.Order[7].Salad", "manager.Add_Included_Dessert.Order[7].Entree",
      "manager.Add_Included_Dessert.Order[7].Dessert", "manager.Add_Included_Dessert.Order[7].Beverage",
      "manager.Add_Included_Dessert.Order[8].Soup", "manager.Add_Included_Dessert.Order[8].Salad",
      "manager.Add_Included_Dessert.Order[8].Entree", "manager.Add_Included_Dessert.Order[8].Dessert",
      "manager.Add_Included_Dessert.Order[8].Beverage", "manager.Add_Included_Dessert.Order[9].Soup",
      "manager.Add_Included_Dessert.Order[9].Salad", "manager.Add_Included_Dessert.Order[9].Entree",
      "manager.Add_Included_Dessert.Order[9].Dessert", "manager.Add_Included_Dessert.Order[9].Beverage",
      "manager.Add_Included_Dessert.Order[10].Soup", "manager.Add_Included_Dessert.Order[10].Salad",
      "manager.Add_Included_Dessert.Order[10].Entree", "manager.Add_Included_Dessert.Order[10].Dessert",
      "manager.Add_Included_Dessert.Order[10].Beverage", "manager.Add_Included_Dessert.Order[11].Soup",
      "manager.Add_Included_Dessert.Order[11].Salad", "manager.Add_Included_Dessert.Order[11].Entree",
      "manager.Add_Included_Dessert.Order[11].Dessert", "manager.Add_Included_Dessert.Order[11].Beverage",
      "manager.Add_Included_Dessert.Order[12].Soup", "manager.Add_Included_Dessert.Order[12].Salad",
      "manager.Add_Included_Dessert.Order[12].Entree", "manager.Add_Included_Dessert.Order[12].Dessert",
      "manager.Add_Included_Dessert.Order[12].Beverage", "manager.Add_Included_Dessert.Order[13].Soup",
      "manager.Add_Included_Dessert.Order[13].Salad", "manager.Add_Included_Dessert.Order[13].Entree",
      "manager.Add_Included_Dessert.Order[13].Dessert", "manager.Add_Included_Dessert.Order[13].Beverage",
      "manager.Add_Included_Dessert.Order[14].Soup", "manager.Add_Included_Dessert.Order[14].Salad",
      "manager.Add_Included_Dessert.Order[14].Entree", "manager.Add_Included_Dessert.Order[14].Dessert",
      "manager.Add_Included_Dessert.Order[14].Beverage", "manager.Add_Included_Dessert.Order[15].Soup",
      "manager.Add_Included_Dessert.Order[15].Salad", "manager.Add_Included_Dessert.Order[15].Entree",
      "manager.Add_Included_Dessert.Order[15].Dessert", "manager.Add_Included_Dessert.Order[15].Beverage",
      "manager.Add_Included_Dessert.Order[16].Soup", "manager.Add_Included_Dessert.Order[16].Salad",
      "manager.Add_Included_Dessert.Order[16].Entree", "manager.Add_Included_Dessert.Order[16].Dessert",
      "manager.Add_Included_Dessert.Order[16].Beverage", "manager.Add_Included_Dessert.Order[17].Soup",
      "manager.Add_Included_Dessert.Order[17].Salad", "manager.Add_Included_Dessert.Order[17].Entree",
      "manager.Add_Included_Dessert.Order[17].Dessert", "manager.Add_Included_Dessert.Order[17].Beverage",
      "manager.Add_Included_Dessert.Order[18].Soup", "manager.Add_Included_Dessert.Order[18].Salad",
      "manager.Add_Included_Dessert.Order[18].Entree", "manager.Add_Included_Dessert.Order[18].Dessert",
      "manager.Add_Included_Dessert.Order[18].Beverage", "manager.Add_Included_Dessert.Order[19].Soup",
      "manager.Add_Included_Dessert.Order[19].Salad", "manager.Add_Included_Dessert.Order[19].Entree",
      "manager.Add_Included_Dessert.Order[19].Dessert", "manager.Add_Included_Dessert.Order[19].Beverage",
      "manager.Add_Included_Dessert.Order[20].Soup", "manager.Add_Included_Dessert.Order[20].Salad",
      "manager.Add_Included_Dessert.Order[20].Entree", "manager.Add_Included_Dessert.Order[20].Dessert",
      "manager.Add_Included_Dessert.Order[20].Beverage", "manager.Add_Included_Dessert.Order[21].Soup",
      "manager.Add_Included_Dessert.Order[21].Salad", "manager.Add_Included_Dessert.Order[21].Entree",
      "manager.Add_Included_Dessert.Order[21].Dessert", "manager.Add_Included_Dessert.Order[21].Beverage",
      "manager.Add_Included_Dessert.Order[22].Soup", "manager.Add_Included_Dessert.Order[22].Salad",
      "manager.Add_Included_Dessert.Order[22].Entree", "manager.Add_Included_Dessert.Order[22].Dessert",
      "manager.Add_Included_Dessert.Order[22].Beverage", "manager.Add_Included_Dessert.Order[23].Soup",
      "manager.Add_Included_Dessert.Order[23].Salad", "manager.Add_Included_Dessert.Order[23].Entree",
      "manager.Add_Included_Dessert.Order[23].Dessert", "manager.Add_Included_Dessert.Order[23].Beverage",
      "manager.Add_Included_Dessert.Order[24].Soup", "manager.Add_Included_Dessert.Order[24].Salad",
      "manager.Add_Included_Dessert.Order[24].Entree", "manager.Add_Included_Dessert.Order[24].Dessert",
      "manager.Add_Included_Dessert.Order[24].Beverage", "manager.Add_Included_Dessert.Order[25].Soup",
      "manager.Add_Included_Dessert.Order[25].Salad", "manager.Add_Included_Dessert.Order[25].Entree",
      "manager.Add_Included_Dessert.Order[25].Dessert", "manager.Add_Included_Dessert.Order[25].Beverage",
      "manager.Add_Included_Dessert.Order[26].Soup", "manager.Add_Included_Dessert.Order[26].Salad",
      "manager.Add_Included_Dessert.Order[26].Entree", "manager.Add_Included_Dessert.Order[26].Dessert",
      "manager.Add_Included_Dessert.Order[26].Beverage", "manager.Add_Included_Dessert.Order[27].Soup",
      "manager.Add_Included_Dessert.Order[27].Salad", "manager.Add_Included_Dessert.Order[27].Entree",
      "manager.Add_Included_Dessert.Order[27].Dessert", "manager.Add_Included_Dessert.Order[27].Beverage",
      "manager.Add_Included_Dessert.Order[28].Soup", "manager.Add_Included_Dessert.Order[28].Salad",
      "manager.Add_Included_Dessert.Order[28].Entree", "manager.Add_Included_Dessert.Order[28].Dessert",
      "manager.Add_Included_Dessert.Order[28].Beverage", "manager.Add_Included_Dessert.Order[29].Soup",
      "manager.Add_Included_Dessert.Order[29].Salad", "manager.Add_Included_Dessert.Order[29].Entree",
      "manager.Add_Included_Dessert.Order[29].Dessert", "manager.Add_Included_Dessert.Order[29].Beverage",
      "manager.Add_Included_Dessert.Order[30].Soup", "manager.Add_Included_Dessert.Order[30].Salad",
      "manager.Add_Included_Dessert.Order[30].Entree", "manager.Add_Included_Dessert.Order[30].Dessert",
      "manager.Add_Included_Dessert.Order[30].Beverage", "manager.Add_Included_Dessert.Order[31].Soup",
      "manager.Add_Included_Dessert.Order[31].Salad", "manager.Add_Included_Dessert.Order[31].Entree",
      "manager.Add_Included_Dessert.Order[31].Dessert", "manager.Add_Included_Dessert.Order[31].Beverage",
      "uut_prototype_stubs.Update_Table_Record.Table", "uut_prototype_stubs.Update_Table_Record.Data.Is_Occupied",
      "uut_prototype_stubs.Update_Table_Record.Data.Number_In_Party", "uut_prototype_stubs.Update_Table_Record.Data.Designator",
      "uut_prototype_stubs.Update_Table_Record.Data.Wait_Person", "uut_prototype_stubs.Update_Table_Record.Data.Order[0].Soup",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[0].Salad", "uut_prototype_stubs.Update_Table_Record.Data.Order[0].Entree",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[0].Dessert", "uut_prototype_stubs.Update_Table_Record.Data.Order[0].Beverage",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[1].Soup", "uut_prototype_stubs.Update_Table_Record.Data.Order[1].Salad",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[1].Entree", "uut_prototype_stubs.Update_Table_Record.Data.Order[1].Dessert",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[1].Beverage", "uut_prototype_stubs.Update_Table_Record.Data.Order[2].Soup",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[2].Salad", "uut_prototype_stubs.Update_Table_Record.Data.Order[2].Entree",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[2].Dessert", "uut_prototype_stubs.Update_Table_Record.Data.Order[2].Beverage",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[3].Soup", "uut_prototype_stubs.Update_Table_Record.Data.Order[3].Salad",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[3].Entree", "uut_prototype_stubs.Update_Table_Record.Data.Order[3].Dessert",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[3].Beverage", "uut_prototype_stubs.Update_Table_Record.Data.Check_Total"],
      "title": "Identifier", "type": "string"}, "InputValueMapping": {"additionalProperties":
      false, "properties": {"identifier": {"$ref": "#/$defs/Identifier"}, "value":
      {"title": "Value", "type": "string"}}, "required": ["identifier", "value"],
      "title": "InputValueMapping", "type": "object"}, "TestCase": {"additionalProperties":
      false, "properties": {"expected_values": {"items": {"$ref": "#/$defs/ExpectedValueMapping"},
      "title": "Expected Values", "type": "array"}, "input_values": {"items": {"$ref":
      "#/$defs/InputValueMapping"}, "title": "Input Values", "type": "array"}, "requirement_id":
      {"title": "Requirement Id", "type": "string"}, "subprogram_name": {"title":
      "Subprogram Name", "type": "string"}, "test_description": {"title": "Test Description",
      "type": "string"}, "test_name": {"title": "Test Name", "type": "string"}, "unit_name":
      {"title": "Unit Name", "type": "string"}}, "required": ["test_name", "test_description",
      "requirement_id", "unit_name", "subprogram_name", "input_values", "expected_values"],
      "title": "TestCase", "type": "object"}}, "additionalProperties": false, "properties":
      {"test_case_for_requirement": {"$ref": "#/$defs/TestCase"}}, "required": ["test_case_for_requirement",
      "test_case_for_requirement"], "title": "TestGenerationResult", "type": "object"},
      "strict": true}, "type": "json_schema"}, "seed": 42, "stream": false, "temperature":
      0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      api-key:
      - REDACTED
      authorization:
      - REDACTED
      connection:
      - keep-alive
      content-length:
      - '40961'
      content-type:
      - application/json
      host:
      - REDACTED
      user-agent:
      - AsyncAzureOpenAI/Python 1.58.1
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-helper-method:
      - beta.chat.completions.parse
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.58.1
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.12
    method: POST
    uri: https://rg-rds-play-openai-pes-ppt.openai.azure.com/openai/deployments/gpt-4.1/chat/completions?api-version=2024-12-01-preview
  response:
    body:
      string: '{"choices":[{"content_filter_results":{"hate":{"filtered":false,"severity":"safe"},"protected_material_code":{"filtered":false,"detected":false},"protected_material_text":{"filtered":false,"detected":false},"self_harm":{"filtered":false,"severity":"safe"},"sexual":{"filtered":false,"severity":"safe"},"violence":{"filtered":false,"severity":"safe"}},"finish_reason":"stop","index":0,"logprobs":null,"message":{"annotations":[],"content":"{\n  \"test_case_for_requirement_1\":
        {\n    \"test_name\": \"Test_Seat_Order_Updated_In_Table\",\n    \"test_description\":
        \"Tests that placing an order updates the seat''s order in the table database.
        The test sets up a table with a known order for seat 2, places a new order
        for seat 2, and checks that Update_Table_Record is called with the new order
        for that seat, while other seats remain unchanged.\",\n    \"requirement_id\":
        \"FR16.1\",\n    \"unit_name\": \"manager\",\n    \"subprogram_name\": \"Place_Order\",\n    \"input_values\":
        [\n      { \"identifier\": \"manager.Place_Order.Table\", \"value\": \"5\"
        },\n      { \"identifier\": \"manager.Place_Order.Seat\", \"value\": \"2\"
        },\n      { \"identifier\": \"manager.Place_Order.Order.Soup\", \"value\":
        \"ONION\" },\n      { \"identifier\": \"manager.Place_Order.Order.Salad\",
        \"value\": \"CAESAR\" },\n      { \"identifier\": \"manager.Place_Order.Order.Entree\",
        \"value\": \"STEAK\" },\n      { \"identifier\": \"manager.Place_Order.Order.Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"manager.Place_Order.Order.Beverage\",
        \"value\": \"MIXED_DRINK\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.Table\",
        \"value\": \"5\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Is_Occupied\",
        \"value\": \"v_false\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Number_In_Party\",
        \"value\": \"2\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Designator\",
        \"value\": \"''A''\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Wait_Person\",
        \"value\": \"\\\"Alice\\\"\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Soup\",
        \"value\": \"CHOWDER\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Salad\",
        \"value\": \"GREEN\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Entree\",
        \"value\": \"CHICKEN\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Dessert\",
        \"value\": \"FRUIT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Beverage\",
        \"value\": \"SODA\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Check_Total\",
        \"value\": \"20.0\" }\n    ],\n    \"expected_values\": [\n      { \"identifier\":
        \"uut_prototype_stubs.Update_Table_Record.Table\", \"value\": \"5\" },\n      {
        \"identifier\": \"uut_prototype_stubs.Update_Table_Record.Data.Order[2].Soup\",
        \"value\": \"ONION\" },\n      { \"identifier\": \"uut_prototype_stubs.Update_Table_Record.Data.Order[2].Salad\",
        \"value\": \"CAESAR\" },\n      { \"identifier\": \"uut_prototype_stubs.Update_Table_Record.Data.Order[2].Entree\",
        \"value\": \"STEAK\" },\n      { \"identifier\": \"uut_prototype_stubs.Update_Table_Record.Data.Order[2].Dessert\",
        \"value\": \"PIE\" },\n      { \"identifier\": \"uut_prototype_stubs.Update_Table_Record.Data.Order[2].Beverage\",
        \"value\": \"MIXED_DRINK\" }\n    ]\n  },\n  \"test_case_for_requirement_2\":
        {\n    \"test_name\": \"Test_Steak_Order_Increases_Check_Total\",\n    \"test_description\":
        \"Tests that placing an order for steak increases the table''s check total
        by 14.0. The test sets up a table with a known check total, places a steak
        order, and checks that Update_Table_Record is called with the check total
        increased by 14.0.\",\n    \"requirement_id\": \"FR17.1\",\n    \"unit_name\":
        \"manager\",\n    \"subprogram_name\": \"Place_Order\",\n    \"input_values\":
        [\n      { \"identifier\": \"manager.Place_Order.Table\", \"value\": \"3\"
        },\n      { \"identifier\": \"manager.Place_Order.Seat\", \"value\": \"1\"
        },\n      { \"identifier\": \"manager.Place_Order.Order.Soup\", \"value\":
        \"NO_SOUP\" },\n      { \"identifier\": \"manager.Place_Order.Order.Salad\",
        \"value\": \"CAESAR\" },\n      { \"identifier\": \"manager.Place_Order.Order.Entree\",
        \"value\": \"STEAK\" },\n      { \"identifier\": \"manager.Place_Order.Order.Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"manager.Place_Order.Order.Beverage\",
        \"value\": \"MIXED_DRINK\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.Table\",
        \"value\": \"3\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Is_Occupied\",
        \"value\": \"v_true\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Number_In_Party\",
        \"value\": \"1\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Designator\",
        \"value\": \"''B''\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Wait_Person\",
        \"value\": \"\\\"Bob\\\"\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Check_Total\",
        \"value\": \"50.0\" }\n    ],\n    \"expected_values\": [\n      { \"identifier\":
        \"uut_prototype_stubs.Update_Table_Record.Table\", \"value\": \"3\" },\n      {
        \"identifier\": \"uut_prototype_stubs.Update_Table_Record.Data.Check_Total\",
        \"value\": \"64.0\" }\n    ]\n  }\n}","refusal":null,"role":"assistant"}}],"created":1752564162,"id":"chatcmpl-BtUHqPmSO8dkdqHOwtUvpcBGn0vNj","model":"gpt-4.1-2025-04-14","object":"chat.completion","prompt_filter_results":[{"prompt_index":0,"content_filter_results":{"hate":{"filtered":false,"severity":"safe"},"jailbreak":{"filtered":false,"detected":false},"self_harm":{"filtered":false,"severity":"safe"},"sexual":{"filtered":false,"severity":"safe"},"violence":{"filtered":false,"severity":"safe"}}}],"system_fingerprint":"fp_07e970ab25","usage":{"completion_tokens":2379,"completion_tokens_details":{"accepted_prediction_tokens":0,"audio_tokens":0,"reasoning_tokens":0,"rejected_prediction_tokens":0},"prompt_tokens":9887,"prompt_tokens_details":{"audio_tokens":0,"cached_tokens":0},"total_tokens":12266}}

        '
    headers:
      Content-Length:
      - '10446'
      Content-Type:
      - application/json
      Date:
      - Tue, 15 Jul 2025 07:22:57 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      apim-request-id:
      - 740db3fc-7a65-4a66-96b0-62d218ac7bc1
      azureml-model-session:
      - d079-20250625172852
      cmp-upstream-response-duration:
      - '16168'
      x-accel-buffering:
      - 'no'
      x-content-type-options:
      - nosniff
      x-ms-deployment-name:
      - gpt-4.1
      x-ms-rai-invoked:
      - 'true'
      x-ms-region:
      - Sweden Central
      x-ratelimit-limit-requests:
      - '1006'
      x-ratelimit-limit-tokens:
      - '1006000'
      x-ratelimit-remaining-requests:
      - '1003'
      x-ratelimit-remaining-tokens:
      - '987357'
      x-request-id:
      - 7eeeb732-003f-4871-a025-19a18146a6e1
    status:
      code: 200
      message: OK
- request:
    body: '{"max_completion_tokens": 8192, "messages": [{"content": "You are an AI
      assistant that generates test code for given requirements.", "role": "system"},
      {"content": "\nBased on the following requirements, references, and code, generate
      one test case per given requirement that exercises it.\n\nTest framework reference:\n##
      Test Case Format\nThe format of a test case is as follows:\n{\n    \"test_name\":
      <some descriptive test name>,\n    \"test_description\": <more details about
      the test>\n    \"requirement_id\": <requirement being tested by this test> (optional)\n    \"unit_name\":
      <unit_name>,\n    \"subprogram_name\": <subprogram_name>,\n    \"input_values\":
      [\n        { \"identifier\": <identifier>, \"value\": <value> },\n        ...\n    ],\n    \"expected_values\":
      [\n        { \"identifier\": <identifier>, \"value\": <value> },\n        ...\n    ]\n}\n\n###
      Identifier and Value Syntax\nThe following sections describe the syntax for
      specifying the `identifier` and `value` fields in the test case format. `unit_name`
      and `subprogram_name` refer to file names of C/C++ files (without extension)
      and function names in these files respectively (to refer to methods in classes
      use `<class name>::<method name>`). It is only possible to include identifiers
      from different units and other subprograms if they are called/used in the subprogram
      being tested.\n\n#### Numeric Types\n- Assign the number directly.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.parameter\", \"value\": \"42\" }\n    { \"identifier\":
      \"unit.subprogram.parameter\", \"value\": \"84\" }\n\n#### Structure Types\n-
      Use the standard C syntax to refer to fields within structures.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.struct_param.field\", \"value\": \"CAESAR\"
      }\n    { \"identifier\": \"unit.subprogram.struct_param.field\", \"value\":
      \"STEAK\" }\n\n#### Enumeration Types\n- Use the enumeral value directly.\n  -
      Example:\n    { \"identifier\": \"unit.subprogram.enum_param\", \"value\": \"ENUM_VALUE\"
      }\n\n#### Character and String Types\n- Use standard C delimiters for characters
      and strings.\n  - Example:\n    { \"identifier\": \"unit.subprogram.char_param\",
      \"value\": \"''a''\" }\n    { \"identifier\": \"unit.subprogram.string_param\",
      \"value\": \"\\\"Hello, World\\\"\" }\n- Treat strings as atomic values to set.
      Do not attempt to treat them as a char array, i.e., do not malloc or attempt
      to access chars at individual indices.\n\n#### Pointer and Array Types\n- For
      constrained arrays, specify the index and value.\n  - Example:\n    { \"identifier\":
      \"unit.subprogram.array_param[2]\", \"value\": \"42\" }\n- For unconstrained
      arrays, use `<<malloc [amount of slots to allocate as integer]>>` to allocate
      memory.\n  - Example:\n    { \"identifier\": \"unit.subprogram.array_param\",
      \"value\": \"<<malloc 2>>\" }\n    { \"identifier\": \"unit.subprogram.array_param[1]\",
      \"value\": \"3\" }\n- For pointers, use index 0 to access it (generally pointers
      and unconstrained arrays are the same after all)\n  - Example:\n    { \"identifier\":
      \"unit.subprogram.ptr_param[0]\", \"value\": \"12\" }\n- If you want to make
      something null then use `<<null>>`.\n  - Example:\n    { \"identifier\": \"unit.subprogram.pointer_param\",
      \"value\": \"<<null>>\" }\n    or\n    { \"identifier\": \"unit.subprogram.array_param\",
      \"value\": \"<<null>>\" }\n\n#### Function Return Parameters\n- Use the keyword
      `return` for function return values.\n  - Example:\n    { \"identifier\": \"unit.subprogram.return\",
      \"value\": \"23.0\" }\n\n#### Global Objects\n- Use the syntax `UNIT.<<GLOBAL>>.OBJECT`
      to set values for global objects.\n  - Example:\n    { \"identifier\": \"unit.<<GLOBAL>>.global_object.field\",
      \"value\": \"VALUE\" }\n- Note: `UNIT.OBJECT` is NEVER valid syntax\n\n#####
      Classes\n- To set and expect values of methods in a class (unlike standalone
      subprograms), it is necessary to first instantiate a base object using a constructor\n-
      Use the syntax `UNIT.<<GLOBAL>>.(cl).CLASS_NAME.SUBCLASS_NAME.<<constructor>>.<<call>>`
      to call the constructor of `SUBCLASS` to instantiate a `CLASS` object\n  - Example:\n    {
      \"identifier\": \"unit.<<GLOBAL>>.(cl).class_name.class_name.<<constructor>>.<<call>>\",
      \"value\": \"0\" }\n  - Note: The value in this case is irrelevant and always
      set to 0.\n- To set and expect member variables of a constructed object use
      the syntax `UNIT.<<GLOBAL>>.(cl).CLASS_NAME.SUBCLASS_NAME.MEMBER_NAME`\n  -
      Example:\n    { \"identifier\": \"unit.<<GLOBAL>>.(cl).class_name.class_name.member\",
      \"value\": \"test\" }\n  - Note: If the member is a structured entity like a
      struct or a class instance you can access the subfields like described in the
      `Structure Types` section.\n- To set and expect arguments and return values
      of methods in a class use the name do so like you would for regular subprograms
      except that you prefix the name with the class name and `::`\n  - Example:\n    {
      \"identifier\": \"unit.class_name::member_method.parameter\", \"value\": \"2\"
      }\n  - Note: If you use this ALWAYS first call the class constructor!\n\n####
      Range of Values for Input Data\n- Use range expressions to test a range of values.\n  -
      Example:\n    { \"identifier\": \"unit.subprogram.parameter\", \"value\": \"vary
      from: 0.0 to: 90.0 by: 0.1\" }\n\n#### Range of Values for Expected Results\n-
      Use the syntax `<min> .. <max>` for expected value ranges.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.parameter\", \"value\": \"257.1 .. 259.9\"
      }\n\n#### List of Values\n- Use a comma-separated list for multiple values.\n  -
      Example:\n    { \"identifier\": \"unit.subprogram.parameter\", \"value\": \"1,2,4\"
      }\n- Use parentheses for repeated values.\n  - Example:\n    { \"identifier\":
      \"unit.subprogram.parameter\", \"value\": \"1,(4)2,4\" }\n- Note: This is used
      in case something needs to be set multiple times (like for a stub return) during
      one call, NOT to specify values in an array. To do so, use the regular index
      syntax as outlined above instead.\n\n#### Working with Overloaded Subprograms\n-
      Append the parameter type list to the subprogram name.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram(int).parameter\", \"value\": \"3\" }\n    {
      \"identifier\": \"unit.subprogram(char).parameter\", \"value\": \"''d''\" }\n\n####
      Boolean Values\n- Use `1` for `true` and `0` for `false`.\n  - Example:\n    {
      \"identifier\": \"unit.subprogram.boolean_param\", \"value\": \"1\" }\n    {
      \"identifier\": \"unit.subprogram.boolean_param\", \"value\": \"0\" }\n\n####
      Accessing Subprograms Outside the Unit\n- Use `uut_prototype_stubs` as the unit
      for subprograms defined outside of the unit of the test case.\n  - Example:\n    {
      \"identifier\": \"uut_prototype_stubs.name_of_external_subprogram.parameter\",
      \"value\": \"42\" }\n\n#### Emulating stubbed pointer manipulating functions\n-
      Normally it is easy to emulate a stubbed function returning some value (by setting
      the return value of the stubbed function)\n- This is not possible if the stubbed
      function works with pointers as only values can be specified (so only ever the
      contents of a pointer), e.g., functions like memcpy\n- Therefore, in these cases
      you can emulate the stubbed function setting the contents of the pointer using
      <<pointer value_to_set>>\n  - For example assume we have a pointer input variable
      *float x that is modified by a stubbed called to foo(*float pointer_to_modify),
      i.e., foo(x). Then you can change the value, i.e., *x to 10 like so:\n    {
      \"identifier\": \"uut_prototype_stubs.foo.pointer_to_modify\", \"value\": \"<<pointer
      10>>\" }\n  - The other input values of the function of course do not need to
      be specified explicitly (unless you also want to see the values of those input
      pointers)\n- You can only set one variable like this per test case due to technical
      reasons so choose wisely (if you use this feature)\n\n#### Emulating multiple
      function calls\n- Use the multiple value syntax, one value will be read everytime
      the stubbed function is called\n  - Example (foo is called twice, and should
      return 2 the first time and 3 the second):\n    { \"identifier\": \"uut_prototype_stubs.foo.return\",
      \"value\": \"2,3\" }\n\n## Test Case Execution\n1. The test framework will call
      the specified subprogram/function\n2. When a value of a variable would be read,
      if it is specified as a test value, it is set to that value instead\n3. After
      the subprogram finishes, the expected values are checked against the actual
      values at that point\n\nAll tests are executed in isolation. The execution of
      one test does not influence the execution of others.\n\n### Stubbing behaviour\n-
      All function calls from external files, i.e, those referenced with `uut_prototype_stubs`
      are stubbed automatically and do not implement any behaviour. Setting their
      input values has no effect on their output values (instead default values are
      output unless you specify values for them).\n- If any of the parameters or return
      value of a called function (which is not automatically stubbed as outlined above)
      are set or expected to be some value using an identifier, the function will
      be stubbed during execution and not implement any behaviour. In this case it
      is forbidden to also expect the return value to equal something (it won''t as
      the function will be stubbed).\n  - If none are set or expected the function
      will execute as normal\n\n### Default identifier values and initialization\n-
      In general any value not set (input of course), will fall back to a default
      value. However this should be avoided to prevent undefined behaviour. This means
      all input variables (and outputs of stubbed values) should be exhaustively described.\n-
      Do not set an identifier multiple times, it just results in overriding of the
      previous value\n- To access methods of a class and set values it is imperative
      to first instantiate the class using a constructor. For all classes a default
      object is ready to be initialized if needed using the respective constructor.\n-
      Similarly, arrays or pointers should always be allocated\n\n## Examples\n\nLet''s
      consider a more complex C++ code snippet in a file named `data_processor.cpp`:\n\n```cpp\n//
      File: data_processor.cpp\n// Unit: data_processor\n\ntypedef struct {\n    int
      id;\n    float value;\n    char status;\n} DataRecord;\n\ntypedef enum {\n    MODE_NORMAL
      = 0,\n    MODE_DEBUG = 1,\n    MODE_ERROR = 2\n} ProcessingMode;\n\n// External
      function declarations\nextern int validate_record(DataRecord* record);\nextern
      void log_error(const char* message);\nextern DataRecord* allocate_buffer(int
      size);\n\nProcessingMode current_mode = MODE_NORMAL;\n\nint process_data_array(DataRecord*
      input_array, int array_size, DataRecord** output_array) {\n    if (input_array
      == NULL || array_size <= 0) {\n        if (current_mode == MODE_DEBUG) {\n            log_error(\"Invalid
      input parameters\");\n        }\n        return -1;\n    }\n    \n    // Allocate
      output buffer\n    *output_array = allocate_buffer(array_size);\n    if (*output_array
      == NULL) {\n        log_error(\"Memory allocation failed\");\n        return
      -2;\n    }\n    \n    int processed_count = 0;\n    for (int i = 0; i < array_size;
      i++) {\n        // Validate each record using external function\n        int
      validation_result = validate_record(&input_array[i]);\n        \n        if
      (validation_result > 0) {\n            // Copy valid record to output with modified
      value\n            (*output_array)[processed_count].id = input_array[i].id;\n            (*output_array)[processed_count].value
      = input_array[i].value * 1.5f;\n            (*output_array)[processed_count].status
      = ''V''; // Valid\n            processed_count++;\n        } else if (current_mode
      == MODE_ERROR) {\n            // In error mode, stop processing on first invalid
      record\n            log_error(\"Invalid record encountered in error mode\");\n            return
      processed_count;\n        }\n        // In normal mode, skip invalid records
      and continue\n    }\n    \n    return processed_count;\n}\n```\n\n### Example
      1: Testing Null Input Handling with Branching\n\n**Requirement REQ-DP-001:**
      The `process_data_array` function shall return -1 when input_array is NULL and
      log an error message if in DEBUG mode.\n\n```json\n{\n  \"test_name\": \"Test_Null_Input_Debug_Mode\",\n  \"test_description\":
      \"Tests process_data_array with NULL input in DEBUG mode to ensure it returns
      -1 and calls log_error.\",\n  \"requirement_id\": \"REQ-DP-001\",\n  \"unit_name\":
      \"data_processor\",\n  \"subprogram_name\": \"process_data_array\",\n  \"input_values\":
      [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\", \"value\":
      \"MODE_DEBUG\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<null>>\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"5\" },\n  ],\n  \"expected_values\": [\n    { \"identifier\": \"uut_prototype_stubs.log_error.message\",
      \"value\": \"\\\"Invalid input parameters\\\"\" },\n    { \"identifier\": \"data_processor.process_data_array.return\",
      \"value\": \"-1\" }\n  ]\n}\n```\n\n### Example 2: Testing Memory Allocation
      with Stubbing\n\n**Requirement REQ-DP-002:** The `process_data_array` function
      shall return -2 and log an error when memory allocation fails.\n\n```json\n{\n  \"test_name\":
      \"Test_Memory_Allocation_Failure\",\n  \"test_description\": \"Tests process_data_array
      when allocate_buffer returns NULL to ensure proper error handling.\",\n  \"requirement_id\":
      \"REQ-DP-002\",\n  \"unit_name\": \"data_processor\",\n  \"subprogram_name\":
      \"process_data_array\",\n  \"input_values\": [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\",
      \"value\": \"MODE_NORMAL\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<malloc 1>>\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].id\",
      \"value\": \"1\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].value\",
      \"value\": \"10.5\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].status\",
      \"value\": \"''A''\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"2\" },\n    { \"identifier\": \"uut_prototype_stubs.allocate_buffer.return\",
      \"value\": \"<<null>>\" },\n  ],\n  \"expected_values\": [\n    { \"identifier\":
      \"uut_prototype_stubs.log_error.message\", \"value\": \"\\\"Memory allocation
      failed\\\"\" },\n    { \"identifier\": \"data_processor.process_data_array.return\",
      \"value\": \"-2\" }\n  ]\n}\n```\n\n### Example 3: Testing Complex Processing
      with Multiple Stubs\n\n**Requirement REQ-DP-003:** The `process_data_array`
      function shall process valid records by multiplying their values by 1.5 and
      setting status to ''V''.\n\n```json\n{\n  \"test_name\": \"Test_Valid_Record_Processing\",\n  \"test_description\":
      \"Tests process_data_array with mixed valid/invalid records to ensure proper
      processing and output.\",\n  \"requirement_id\": \"REQ-DP-003\",\n  \"unit_name\":
      \"data_processor\",\n  \"subprogram_name\": \"process_data_array\",\n  \"input_values\":
      [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\", \"value\":
      \"MODE_NORMAL\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].id\",
      \"value\": \"100\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].value\",
      \"value\": \"20.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].status\",
      \"value\": \"''A''\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].id\",
      \"value\": \"200\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].status\",
      \"value\": \"''B''\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[2].id\",
      \"value\": \"300\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[2].value\",
      \"value\": \"40.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[2].status\",
      \"value\": \"''C''\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"3\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0]\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"uut_prototype_stubs.validate_record.return\",
      \"value\": \"1,0,1\" }\n  ],\n  \"expected_values\": [\n    { \"identifier\":
      \"data_processor.process_data_array.return\", \"value\": \"2\" },\n    { \"identifier\":
      \"data_processor.process_data_array.output_array[0][0].id\", \"value\": \"100\"
      },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].status\",
      \"value\": \"''V''\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][1].id\",
      \"value\": \"300\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][1].value\",
      \"value\": \"60.0\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][1].status\",
      \"value\": \"''V''\" }\n  ]\n}\n```\n\n### Example 4: Testing Error Mode with
      Early Termination\n\n**Requirement REQ-DP-004:** The `process_data_array` function
      shall stop processing and return the current count when an invalid record is
      encountered in ERROR mode.\n\n```json\n{\n  \"test_name\": \"Test_Error_Mode_Early_Termination\",\n  \"test_description\":
      \"Tests process_data_array in ERROR mode to ensure it stops processing on first
      invalid record.\",\n  \"requirement_id\": \"REQ-DP-004\",\n  \"unit_name\":
      \"data_processor\",\n  \"subprogram_name\": \"process_data_array\",\n  \"input_values\":
      [\n    { \"identifier\": \"data_processor.<<GLOBAL>>.current_mode\", \"value\":
      \"MODE_ERROR\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].id\",
      \"value\": \"100\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[0].value\",
      \"value\": \"20.0\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].id\",
      \"value\": \"200\" },\n    { \"identifier\": \"data_processor.process_data_array.input_array[1].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.array_size\",
      \"value\": \"3\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0]\",
      \"value\": \"<<malloc 3>>\" },\n    { \"identifier\": \"uut_prototype_stubs.allocate_buffer.size\",
      \"value\": \"3\" },\n    { \"identifier\": \"uut_prototype_stubs.validate_record.return\",
      \"value\": \"1,-1\" },\n  ],\n  \"expected_values\": [\n    { \"identifier\":
      \"uut_prototype_stubs.log_error.message\", \"value\": \"\\\"Invalid record encountered
      in error mode\\\"\" },\n    { \"identifier\": \"data_processor.process_data_array.return\",
      \"value\": \"1\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].id\",
      \"value\": \"100\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].value\",
      \"value\": \"30.0\" },\n    { \"identifier\": \"data_processor.process_data_array.output_array[0][0].status\",
      \"value\": \"''V''\" }\n  ]\n}\n```\n\nRelevant Code:\n```cpp\n// Unit: manager\n\n//
      Definitions of types, called functions and data structures:\n\ntypedef float
      FLOAT;\n\nenum boolean { v_false, v_true };\n\nenum soups { NO_SOUP, ONION,
      CHOWDER };\n\nenum salads { NO_SALAD, CAESAR, GREEN };\n\nenum entrees { NO_ENTREE,
      STEAK, CHICKEN, LOBSTER, PASTA };\n\nenum desserts { NO_DESSERT, CAKE, PIE,
      FRUIT };\n\nenum beverages { NO_BEVERAGE, WINE, BEER, MIXED_DRINK, SODA };\n\nstruct
      order_type\n{\n  enum soups Soup;\n  enum salads Salad;\n  enum entrees Entree;\n  enum
      desserts Dessert;\n  enum beverages Beverage;\n};\n\ntypedef unsigned short
      seat_index_type;\n\ntypedef unsigned short table_index_type;\n\nstruct table_data_type\n{\n  enum
      boolean Is_Occupied;\n  seat_index_type Number_In_Party;\n  char Designator;\n  char
      Wait_Person[10];\n  struct order_type Order[4];\n  FLOAT Check_Total;\n};\n\nstruct
      table_data_type Get_Table_Record(table_index_type Table);\n\nvoid Update_Table_Record(table_index_type
      Table, struct table_data_type Data);\n\nvoid Add_Included_Dessert(struct order_type*
      Order)\n{\n  if(Order->Entree == STEAK &&\n     Order->Salad == CAESAR &&\n     Order->Beverage
      == MIXED_DRINK) {\n\n    Order->Dessert = PIE;\n\n  } else if(Order->Entree
      == LOBSTER &&\n            Order->Salad == GREEN &&\n            Order->Beverage
      == WINE) {\n\n    Order->Dessert = CAKE;\n  }\n}\n\n// Code for Place_Order:\nint
      Place_Order(table_index_type Table,\n                seat_index_type Seat,\n                struct
      order_type Order)\n{\n  struct table_data_type Table_Data;\n\n  Table_Data =
      Get_Table_Record(Table);\n\n  Table_Data.Is_Occupied = v_true;\n  Table_Data.Number_In_Party
      = Table_Data.Number_In_Party + 1;\n  Table_Data.Order[Seat] = Order;\n\n  /*
      Add a free dessert in some cases */\n  Add_Included_Dessert(&Table_Data.Order[Seat]);\n\n  switch(Order.Entree)\n    {\n    case
      NO_ENTREE :\n       break;\n    case STEAK :\n       Table_Data.Check_Total
      = Table_Data.Check_Total + 14.0;\n       break;\n    case CHICKEN :\n       Table_Data.Check_Total
      = Table_Data.Check_Total + 10.0;\n       break;\n    case LOBSTER :\n       Table_Data.Check_Total
      = Table_Data.Check_Total + 18.0;\n       break;\n    case PASTA :\n       Table_Data.Check_Total
      = Table_Data.Check_Total + 12.0;\n       break;\n    }\n\n  Update_Table_Record(Table,
      Table_Data);\n  return 0;\n}\n```\n\nExample Test Cases:\n```json\n[\n  {\n    \"test_name\":
      \"BASIS-PATH-001\",\n    \"test_description\": \"This is an automatically generated
      test case.\\nTest Path 1\\n(5) case (Order.Entree) ==> PASTA\\nTest Case Generation
      Notes:\",\n    \"unit_name\": \"manager\",\n    \"subprogram_name\": \"Place_Order\",\n    \"input_values\":
      [\n      {\n        \"identifier\": \"manager.Place_Order.Order.Entree\",\n        \"value\":
      \"PASTA\"\n      },\n      {\n        \"identifier\": \"manager.Place_Order.Table\",\n        \"value\":
      \"<<MIN>>\"\n      },\n      {\n        \"identifier\": \"manager.Place_Order.Seat\",\n        \"value\":
      \"<<MIN>>\"\n      }\n    ],\n    \"expected_values\": [],\n    \"requirement_id\":
      null\n  }\n]\n```\n\nRequirements:\n1. FR12.1: The system will support 4 seats
      per table.\n2. FR13.1: The system will support the following entrees:\n\nsteak\nchicken\nlobster\npasta\nnone\n\nDetailed
      task description:\nBased on the above requirements and code, generate unit tests
      that exercise all requirements.\nMake sure the generated test cases clearly
      test the provided requirements.\n\nSolve the problem using the following approach:\nFor
      each requirement in order...\n    1. Come up with descriptive (unique) name
      for the test case and describe in natural language how this test exercises the
      requirement\n    2. Provide the name of the unit being tested (base file name
      without extension) and the name of the subprogram being tested (function name)\n    3.
      Provide the input and expected values by providing the correct identifier and
      value in the syntax outlined above.\n\nYou are allowed to use the following
      identifiers in your test case:\n- manager.Place_Order.Table\n- manager.Place_Order.Seat\n-
      manager.Place_Order.Order.Soup\n- manager.Place_Order.Order.Salad\n- manager.Place_Order.Order.Entree\n-
      manager.Place_Order.Order.Dessert\n- manager.Place_Order.Order.Beverage\n- manager.Place_Order.return\n-
      uut_prototype_stubs.Get_Table_Record.Table\n- uut_prototype_stubs.Get_Table_Record.return.Is_Occupied\n-
      uut_prototype_stubs.Get_Table_Record.return.Number_In_Party\n- uut_prototype_stubs.Get_Table_Record.return.Designator\n-
      uut_prototype_stubs.Get_Table_Record.return.Wait_Person\n- uut_prototype_stubs.Get_Table_Record.return.Order[i].Soup
      (for all: i in 0..3)\n- uut_prototype_stubs.Get_Table_Record.return.Order[i].Salad
      (for all: i in 0..3)\n- uut_prototype_stubs.Get_Table_Record.return.Order[i].Entree
      (for all: i in 0..3)\n- uut_prototype_stubs.Get_Table_Record.return.Order[i].Dessert
      (for all: i in 0..3)\n- uut_prototype_stubs.Get_Table_Record.return.Order[i].Beverage
      (for all: i in 0..3)\n- uut_prototype_stubs.Get_Table_Record.return.Check_Total\n-
      manager.Add_Included_Dessert.Order\n- manager.Add_Included_Dessert.Order[i].Soup
      (for all: i in 0..31)\n- manager.Add_Included_Dessert.Order[i].Salad (for all:
      i in 0..31)\n- manager.Add_Included_Dessert.Order[i].Entree (for all: i in 0..31)\n-
      manager.Add_Included_Dessert.Order[i].Dessert (for all: i in 0..31)\n- manager.Add_Included_Dessert.Order[i].Beverage
      (for all: i in 0..31)\n- uut_prototype_stubs.Update_Table_Record.Table\n- uut_prototype_stubs.Update_Table_Record.Data.Is_Occupied\n-
      uut_prototype_stubs.Update_Table_Record.Data.Number_In_Party\n- uut_prototype_stubs.Update_Table_Record.Data.Designator\n-
      uut_prototype_stubs.Update_Table_Record.Data.Wait_Person\n- uut_prototype_stubs.Update_Table_Record.Data.Order[i].Soup
      (for all: i in 0..3)\n- uut_prototype_stubs.Update_Table_Record.Data.Order[i].Salad
      (for all: i in 0..3)\n- uut_prototype_stubs.Update_Table_Record.Data.Order[i].Entree
      (for all: i in 0..3)\n- uut_prototype_stubs.Update_Table_Record.Data.Order[i].Dessert
      (for all: i in 0..3)\n- uut_prototype_stubs.Update_Table_Record.Data.Order[i].Beverage
      (for all: i in 0..3)\n- uut_prototype_stubs.Update_Table_Record.Data.Check_Total\n\nYou
      MUST set an input value for all input to the functions, used globals and called
      stubs.\nIf you do not ensure this, it can happen that your test does not cover
      the correct path corresponding to the requirement.\nAn expected value is not
      required for all identifiers. Only for those relevant to the requirement.\n\nUnstubbed-by-default
      called functions (implement behaviour unless an identifier is set in which case
      the respective function is stubbed) called by Place_Order:\n- Add_Included_Dessert\nStubbed-by-default
      called functions (no behaviour is implemented, you can use identifiers to simulate
      a return value) called by Place_Order:\n- Get_Table_Record\n- Update_Table_Record\n\nNotes:\n-
      You are NOT allowed to invent any syntax that is not specified in the syntax
      reference. Stick to the syntax provided.\n- You are NOT allowed to invent any
      units or functions that are not present in the provided code.\n- This is a highly
      critical task, please ensure that the test cases are correct and complete and
      do not contain any logical or syntactical errors.\n- Test cases are independent
      of each other, i.e., they should not rely on one being run before the other
      (or environment being modified by one).\n- Generate exactly one test case per
      requirement.\n- In case the requirement and the code differ, the requirement
      is what you should test, i.e., it is the source of truth.\n- It might be that
      some of the provided code context and identifiers are incorrect. Use the most
      obviously correct parts of both and ignore the rest.\n\nReturn your answer in
      the following format:\n```json\n{\n    \"test_case_for_requirement_1\": <test
      case testing the first requirement in the list>,\n    \"test_case_for_requirement_2\":
      <test case testing the second requirement in the list>,\n    ...\n}\n```\n",
      "role": "user"}], "model": "gpt-4.1", "response_format": {"json_schema": {"name":
      "TestGenerationResult", "schema": {"$defs": {"ExpectedValueMapping": {"additionalProperties":
      false, "properties": {"identifier": {"$ref": "#/$defs/Identifier"}, "value":
      {"title": "Value", "type": "string"}}, "required": ["identifier", "value"],
      "title": "ExpectedValueMapping", "type": "object"}, "Identifier": {"enum": ["manager.Place_Order.Table",
      "manager.Place_Order.Seat", "manager.Place_Order.Order.Soup", "manager.Place_Order.Order.Salad",
      "manager.Place_Order.Order.Entree", "manager.Place_Order.Order.Dessert", "manager.Place_Order.Order.Beverage",
      "manager.Place_Order.return", "uut_prototype_stubs.Get_Table_Record.Table",
      "uut_prototype_stubs.Get_Table_Record.return.Is_Occupied", "uut_prototype_stubs.Get_Table_Record.return.Number_In_Party",
      "uut_prototype_stubs.Get_Table_Record.return.Designator", "uut_prototype_stubs.Get_Table_Record.return.Wait_Person",
      "uut_prototype_stubs.Get_Table_Record.return.Order[0].Soup", "uut_prototype_stubs.Get_Table_Record.return.Order[0].Salad",
      "uut_prototype_stubs.Get_Table_Record.return.Order[0].Entree", "uut_prototype_stubs.Get_Table_Record.return.Order[0].Dessert",
      "uut_prototype_stubs.Get_Table_Record.return.Order[0].Beverage", "uut_prototype_stubs.Get_Table_Record.return.Order[1].Soup",
      "uut_prototype_stubs.Get_Table_Record.return.Order[1].Salad", "uut_prototype_stubs.Get_Table_Record.return.Order[1].Entree",
      "uut_prototype_stubs.Get_Table_Record.return.Order[1].Dessert", "uut_prototype_stubs.Get_Table_Record.return.Order[1].Beverage",
      "uut_prototype_stubs.Get_Table_Record.return.Order[2].Soup", "uut_prototype_stubs.Get_Table_Record.return.Order[2].Salad",
      "uut_prototype_stubs.Get_Table_Record.return.Order[2].Entree", "uut_prototype_stubs.Get_Table_Record.return.Order[2].Dessert",
      "uut_prototype_stubs.Get_Table_Record.return.Order[2].Beverage", "uut_prototype_stubs.Get_Table_Record.return.Order[3].Soup",
      "uut_prototype_stubs.Get_Table_Record.return.Order[3].Salad", "uut_prototype_stubs.Get_Table_Record.return.Order[3].Entree",
      "uut_prototype_stubs.Get_Table_Record.return.Order[3].Dessert", "uut_prototype_stubs.Get_Table_Record.return.Order[3].Beverage",
      "uut_prototype_stubs.Get_Table_Record.return.Check_Total", "manager.Add_Included_Dessert.Order",
      "manager.Add_Included_Dessert.Order[0].Soup", "manager.Add_Included_Dessert.Order[0].Salad",
      "manager.Add_Included_Dessert.Order[0].Entree", "manager.Add_Included_Dessert.Order[0].Dessert",
      "manager.Add_Included_Dessert.Order[0].Beverage", "manager.Add_Included_Dessert.Order[1].Soup",
      "manager.Add_Included_Dessert.Order[1].Salad", "manager.Add_Included_Dessert.Order[1].Entree",
      "manager.Add_Included_Dessert.Order[1].Dessert", "manager.Add_Included_Dessert.Order[1].Beverage",
      "manager.Add_Included_Dessert.Order[2].Soup", "manager.Add_Included_Dessert.Order[2].Salad",
      "manager.Add_Included_Dessert.Order[2].Entree", "manager.Add_Included_Dessert.Order[2].Dessert",
      "manager.Add_Included_Dessert.Order[2].Beverage", "manager.Add_Included_Dessert.Order[3].Soup",
      "manager.Add_Included_Dessert.Order[3].Salad", "manager.Add_Included_Dessert.Order[3].Entree",
      "manager.Add_Included_Dessert.Order[3].Dessert", "manager.Add_Included_Dessert.Order[3].Beverage",
      "manager.Add_Included_Dessert.Order[4].Soup", "manager.Add_Included_Dessert.Order[4].Salad",
      "manager.Add_Included_Dessert.Order[4].Entree", "manager.Add_Included_Dessert.Order[4].Dessert",
      "manager.Add_Included_Dessert.Order[4].Beverage", "manager.Add_Included_Dessert.Order[5].Soup",
      "manager.Add_Included_Dessert.Order[5].Salad", "manager.Add_Included_Dessert.Order[5].Entree",
      "manager.Add_Included_Dessert.Order[5].Dessert", "manager.Add_Included_Dessert.Order[5].Beverage",
      "manager.Add_Included_Dessert.Order[6].Soup", "manager.Add_Included_Dessert.Order[6].Salad",
      "manager.Add_Included_Dessert.Order[6].Entree", "manager.Add_Included_Dessert.Order[6].Dessert",
      "manager.Add_Included_Dessert.Order[6].Beverage", "manager.Add_Included_Dessert.Order[7].Soup",
      "manager.Add_Included_Dessert.Order[7].Salad", "manager.Add_Included_Dessert.Order[7].Entree",
      "manager.Add_Included_Dessert.Order[7].Dessert", "manager.Add_Included_Dessert.Order[7].Beverage",
      "manager.Add_Included_Dessert.Order[8].Soup", "manager.Add_Included_Dessert.Order[8].Salad",
      "manager.Add_Included_Dessert.Order[8].Entree", "manager.Add_Included_Dessert.Order[8].Dessert",
      "manager.Add_Included_Dessert.Order[8].Beverage", "manager.Add_Included_Dessert.Order[9].Soup",
      "manager.Add_Included_Dessert.Order[9].Salad", "manager.Add_Included_Dessert.Order[9].Entree",
      "manager.Add_Included_Dessert.Order[9].Dessert", "manager.Add_Included_Dessert.Order[9].Beverage",
      "manager.Add_Included_Dessert.Order[10].Soup", "manager.Add_Included_Dessert.Order[10].Salad",
      "manager.Add_Included_Dessert.Order[10].Entree", "manager.Add_Included_Dessert.Order[10].Dessert",
      "manager.Add_Included_Dessert.Order[10].Beverage", "manager.Add_Included_Dessert.Order[11].Soup",
      "manager.Add_Included_Dessert.Order[11].Salad", "manager.Add_Included_Dessert.Order[11].Entree",
      "manager.Add_Included_Dessert.Order[11].Dessert", "manager.Add_Included_Dessert.Order[11].Beverage",
      "manager.Add_Included_Dessert.Order[12].Soup", "manager.Add_Included_Dessert.Order[12].Salad",
      "manager.Add_Included_Dessert.Order[12].Entree", "manager.Add_Included_Dessert.Order[12].Dessert",
      "manager.Add_Included_Dessert.Order[12].Beverage", "manager.Add_Included_Dessert.Order[13].Soup",
      "manager.Add_Included_Dessert.Order[13].Salad", "manager.Add_Included_Dessert.Order[13].Entree",
      "manager.Add_Included_Dessert.Order[13].Dessert", "manager.Add_Included_Dessert.Order[13].Beverage",
      "manager.Add_Included_Dessert.Order[14].Soup", "manager.Add_Included_Dessert.Order[14].Salad",
      "manager.Add_Included_Dessert.Order[14].Entree", "manager.Add_Included_Dessert.Order[14].Dessert",
      "manager.Add_Included_Dessert.Order[14].Beverage", "manager.Add_Included_Dessert.Order[15].Soup",
      "manager.Add_Included_Dessert.Order[15].Salad", "manager.Add_Included_Dessert.Order[15].Entree",
      "manager.Add_Included_Dessert.Order[15].Dessert", "manager.Add_Included_Dessert.Order[15].Beverage",
      "manager.Add_Included_Dessert.Order[16].Soup", "manager.Add_Included_Dessert.Order[16].Salad",
      "manager.Add_Included_Dessert.Order[16].Entree", "manager.Add_Included_Dessert.Order[16].Dessert",
      "manager.Add_Included_Dessert.Order[16].Beverage", "manager.Add_Included_Dessert.Order[17].Soup",
      "manager.Add_Included_Dessert.Order[17].Salad", "manager.Add_Included_Dessert.Order[17].Entree",
      "manager.Add_Included_Dessert.Order[17].Dessert", "manager.Add_Included_Dessert.Order[17].Beverage",
      "manager.Add_Included_Dessert.Order[18].Soup", "manager.Add_Included_Dessert.Order[18].Salad",
      "manager.Add_Included_Dessert.Order[18].Entree", "manager.Add_Included_Dessert.Order[18].Dessert",
      "manager.Add_Included_Dessert.Order[18].Beverage", "manager.Add_Included_Dessert.Order[19].Soup",
      "manager.Add_Included_Dessert.Order[19].Salad", "manager.Add_Included_Dessert.Order[19].Entree",
      "manager.Add_Included_Dessert.Order[19].Dessert", "manager.Add_Included_Dessert.Order[19].Beverage",
      "manager.Add_Included_Dessert.Order[20].Soup", "manager.Add_Included_Dessert.Order[20].Salad",
      "manager.Add_Included_Dessert.Order[20].Entree", "manager.Add_Included_Dessert.Order[20].Dessert",
      "manager.Add_Included_Dessert.Order[20].Beverage", "manager.Add_Included_Dessert.Order[21].Soup",
      "manager.Add_Included_Dessert.Order[21].Salad", "manager.Add_Included_Dessert.Order[21].Entree",
      "manager.Add_Included_Dessert.Order[21].Dessert", "manager.Add_Included_Dessert.Order[21].Beverage",
      "manager.Add_Included_Dessert.Order[22].Soup", "manager.Add_Included_Dessert.Order[22].Salad",
      "manager.Add_Included_Dessert.Order[22].Entree", "manager.Add_Included_Dessert.Order[22].Dessert",
      "manager.Add_Included_Dessert.Order[22].Beverage", "manager.Add_Included_Dessert.Order[23].Soup",
      "manager.Add_Included_Dessert.Order[23].Salad", "manager.Add_Included_Dessert.Order[23].Entree",
      "manager.Add_Included_Dessert.Order[23].Dessert", "manager.Add_Included_Dessert.Order[23].Beverage",
      "manager.Add_Included_Dessert.Order[24].Soup", "manager.Add_Included_Dessert.Order[24].Salad",
      "manager.Add_Included_Dessert.Order[24].Entree", "manager.Add_Included_Dessert.Order[24].Dessert",
      "manager.Add_Included_Dessert.Order[24].Beverage", "manager.Add_Included_Dessert.Order[25].Soup",
      "manager.Add_Included_Dessert.Order[25].Salad", "manager.Add_Included_Dessert.Order[25].Entree",
      "manager.Add_Included_Dessert.Order[25].Dessert", "manager.Add_Included_Dessert.Order[25].Beverage",
      "manager.Add_Included_Dessert.Order[26].Soup", "manager.Add_Included_Dessert.Order[26].Salad",
      "manager.Add_Included_Dessert.Order[26].Entree", "manager.Add_Included_Dessert.Order[26].Dessert",
      "manager.Add_Included_Dessert.Order[26].Beverage", "manager.Add_Included_Dessert.Order[27].Soup",
      "manager.Add_Included_Dessert.Order[27].Salad", "manager.Add_Included_Dessert.Order[27].Entree",
      "manager.Add_Included_Dessert.Order[27].Dessert", "manager.Add_Included_Dessert.Order[27].Beverage",
      "manager.Add_Included_Dessert.Order[28].Soup", "manager.Add_Included_Dessert.Order[28].Salad",
      "manager.Add_Included_Dessert.Order[28].Entree", "manager.Add_Included_Dessert.Order[28].Dessert",
      "manager.Add_Included_Dessert.Order[28].Beverage", "manager.Add_Included_Dessert.Order[29].Soup",
      "manager.Add_Included_Dessert.Order[29].Salad", "manager.Add_Included_Dessert.Order[29].Entree",
      "manager.Add_Included_Dessert.Order[29].Dessert", "manager.Add_Included_Dessert.Order[29].Beverage",
      "manager.Add_Included_Dessert.Order[30].Soup", "manager.Add_Included_Dessert.Order[30].Salad",
      "manager.Add_Included_Dessert.Order[30].Entree", "manager.Add_Included_Dessert.Order[30].Dessert",
      "manager.Add_Included_Dessert.Order[30].Beverage", "manager.Add_Included_Dessert.Order[31].Soup",
      "manager.Add_Included_Dessert.Order[31].Salad", "manager.Add_Included_Dessert.Order[31].Entree",
      "manager.Add_Included_Dessert.Order[31].Dessert", "manager.Add_Included_Dessert.Order[31].Beverage",
      "uut_prototype_stubs.Update_Table_Record.Table", "uut_prototype_stubs.Update_Table_Record.Data.Is_Occupied",
      "uut_prototype_stubs.Update_Table_Record.Data.Number_In_Party", "uut_prototype_stubs.Update_Table_Record.Data.Designator",
      "uut_prototype_stubs.Update_Table_Record.Data.Wait_Person", "uut_prototype_stubs.Update_Table_Record.Data.Order[0].Soup",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[0].Salad", "uut_prototype_stubs.Update_Table_Record.Data.Order[0].Entree",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[0].Dessert", "uut_prototype_stubs.Update_Table_Record.Data.Order[0].Beverage",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[1].Soup", "uut_prototype_stubs.Update_Table_Record.Data.Order[1].Salad",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[1].Entree", "uut_prototype_stubs.Update_Table_Record.Data.Order[1].Dessert",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[1].Beverage", "uut_prototype_stubs.Update_Table_Record.Data.Order[2].Soup",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[2].Salad", "uut_prototype_stubs.Update_Table_Record.Data.Order[2].Entree",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[2].Dessert", "uut_prototype_stubs.Update_Table_Record.Data.Order[2].Beverage",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[3].Soup", "uut_prototype_stubs.Update_Table_Record.Data.Order[3].Salad",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[3].Entree", "uut_prototype_stubs.Update_Table_Record.Data.Order[3].Dessert",
      "uut_prototype_stubs.Update_Table_Record.Data.Order[3].Beverage", "uut_prototype_stubs.Update_Table_Record.Data.Check_Total"],
      "title": "Identifier", "type": "string"}, "InputValueMapping": {"additionalProperties":
      false, "properties": {"identifier": {"$ref": "#/$defs/Identifier"}, "value":
      {"title": "Value", "type": "string"}}, "required": ["identifier", "value"],
      "title": "InputValueMapping", "type": "object"}, "TestCase": {"additionalProperties":
      false, "properties": {"expected_values": {"items": {"$ref": "#/$defs/ExpectedValueMapping"},
      "title": "Expected Values", "type": "array"}, "input_values": {"items": {"$ref":
      "#/$defs/InputValueMapping"}, "title": "Input Values", "type": "array"}, "requirement_id":
      {"title": "Requirement Id", "type": "string"}, "subprogram_name": {"title":
      "Subprogram Name", "type": "string"}, "test_description": {"title": "Test Description",
      "type": "string"}, "test_name": {"title": "Test Name", "type": "string"}, "unit_name":
      {"title": "Unit Name", "type": "string"}}, "required": ["test_name", "test_description",
      "requirement_id", "unit_name", "subprogram_name", "input_values", "expected_values"],
      "title": "TestCase", "type": "object"}}, "additionalProperties": false, "properties":
      {"test_case_for_requirement": {"$ref": "#/$defs/TestCase"}}, "required": ["test_case_for_requirement",
      "test_case_for_requirement"], "title": "TestGenerationResult", "type": "object"},
      "strict": true}, "type": "json_schema"}, "seed": 42, "stream": false, "temperature":
      0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      api-key:
      - REDACTED
      authorization:
      - REDACTED
      connection:
      - keep-alive
      content-length:
      - '40926'
      content-type:
      - application/json
      host:
      - REDACTED
      user-agent:
      - AsyncAzureOpenAI/Python 1.58.1
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-helper-method:
      - beta.chat.completions.parse
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.58.1
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.12
    method: POST
    uri: https://rg-rds-play-openai-pes-ppt.openai.azure.com/openai/deployments/gpt-4.1/chat/completions?api-version=2024-12-01-preview
  response:
    body:
      string: '{"choices":[{"content_filter_results":{"hate":{"filtered":false,"severity":"safe"},"protected_material_code":{"filtered":false,"detected":false},"protected_material_text":{"filtered":false,"detected":false},"self_harm":{"filtered":false,"severity":"safe"},"sexual":{"filtered":false,"severity":"safe"},"violence":{"filtered":false,"severity":"safe"}},"finish_reason":"stop","index":0,"logprobs":null,"message":{"annotations":[],"content":"{\n  \"test_case_for_requirement_1\":
        {\n    \"test_name\": \"Test_Place_Order_Supports_4_Seats_Per_Table\",\n    \"test_description\":
        \"Verifies that Place_Order can handle all 4 seat indices (0 to 3) for a table,
        as required by the system supporting 4 seats per table. This test places an
        order for each seat and checks that the correct seat''s order is updated.\",\n    \"requirement_id\":
        \"FR12.1\",\n    \"unit_name\": \"manager\",\n    \"subprogram_name\": \"Place_Order\",\n    \"input_values\":
        [\n      { \"identifier\": \"manager.Place_Order.Table\", \"value\": \"1\"
        },\n      { \"identifier\": \"manager.Place_Order.Seat\", \"value\": \"3\"
        },\n      { \"identifier\": \"manager.Place_Order.Order.Soup\", \"value\":
        \"NO_SOUP\" },\n      { \"identifier\": \"manager.Place_Order.Order.Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"manager.Place_Order.Order.Entree\",
        \"value\": \"STEAK\" },\n      { \"identifier\": \"manager.Place_Order.Order.Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"manager.Place_Order.Order.Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.Table\",
        \"value\": \"1\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Is_Occupied\",
        \"value\": \"v_false\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Number_In_Party\",
        \"value\": \"2\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Designator\",
        \"value\": \"''A''\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Wait_Person\",
        \"value\": \"\\\"Alice\\\"\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Check_Total\",
        \"value\": \"0.0\" }\n    ],\n    \"expected_values\": [\n      { \"identifier\":
        \"uut_prototype_stubs.Update_Table_Record.Table\", \"value\": \"1\" },\n      {
        \"identifier\": \"uut_prototype_stubs.Update_Table_Record.Data.Is_Occupied\",
        \"value\": \"v_true\" },\n      { \"identifier\": \"uut_prototype_stubs.Update_Table_Record.Data.Number_In_Party\",
        \"value\": \"3\" },\n      { \"identifier\": \"uut_prototype_stubs.Update_Table_Record.Data.Order[3].Entree\",
        \"value\": \"STEAK\" },\n      { \"identifier\": \"uut_prototype_stubs.Update_Table_Record.Data.Check_Total\",
        \"value\": \"14.0\" },\n      { \"identifier\": \"manager.Place_Order.return\",
        \"value\": \"0\" }\n    ]\n  },\n  \"test_case_for_requirement_2\": {\n    \"test_name\":
        \"Test_Place_Order_Supports_All_Entree_Types\",\n    \"test_description\":
        \"Verifies that Place_Order supports all specified entree types: steak, chicken,
        lobster, pasta, and none. This test places an order for each entree and checks
        that the correct Check_Total is updated for each case.\",\n    \"requirement_id\":
        \"FR13.1\",\n    \"unit_name\": \"manager\",\n    \"subprogram_name\": \"Place_Order\",\n    \"input_values\":
        [\n      { \"identifier\": \"manager.Place_Order.Table\", \"value\": \"2\"
        },\n      { \"identifier\": \"manager.Place_Order.Seat\", \"value\": \"1\"
        },\n      { \"identifier\": \"manager.Place_Order.Order.Soup\", \"value\":
        \"NO_SOUP\" },\n      { \"identifier\": \"manager.Place_Order.Order.Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"manager.Place_Order.Order.Entree\",
        \"value\": \"STEAK,CHICKEN,LOBSTER,PASTA,NO_ENTREE\" },\n      { \"identifier\":
        \"manager.Place_Order.Order.Dessert\", \"value\": \"NO_DESSERT\" },\n      {
        \"identifier\": \"manager.Place_Order.Order.Beverage\", \"value\": \"NO_BEVERAGE\"
        },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.Table\",
        \"value\": \"2\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Is_Occupied\",
        \"value\": \"v_true\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Number_In_Party\",
        \"value\": \"1\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Designator\",
        \"value\": \"''B''\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Wait_Person\",
        \"value\": \"\\\"Bob\\\"\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[0].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[1].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[2].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Soup\",
        \"value\": \"NO_SOUP\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Salad\",
        \"value\": \"NO_SALAD\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Entree\",
        \"value\": \"NO_ENTREE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Dessert\",
        \"value\": \"NO_DESSERT\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Order[3].Beverage\",
        \"value\": \"NO_BEVERAGE\" },\n      { \"identifier\": \"uut_prototype_stubs.Get_Table_Record.return.Check_Total\",
        \"value\": \"5.0\" }\n    ],\n    \"expected_values\": [\n      { \"identifier\":
        \"uut_prototype_stubs.Update_Table_Record.Data.Check_Total\", \"value\": \"19.0,15.0,23.0,17.0,5.0\"
        },\n      { \"identifier\": \"uut_prototype_stubs.Update_Table_Record.Data.Order[1].Entree\",
        \"value\": \"STEAK,CHICKEN,LOBSTER,PASTA,NO_ENTREE\" },\n      { \"identifier\":
        \"manager.Place_Order.return\", \"value\": \"0,0,0,0,0\" }\n    ]\n  }\n}\n","refusal":null,"role":"assistant"}}],"created":1752564162,"id":"chatcmpl-BtUHqvaJQc1IIhohLKDCLAJ7ldIQM","model":"gpt-4.1-2025-04-14","object":"chat.completion","prompt_filter_results":[{"prompt_index":0,"content_filter_results":{"hate":{"filtered":false,"severity":"safe"},"jailbreak":{"filtered":false,"detected":false},"self_harm":{"filtered":false,"severity":"safe"},"sexual":{"filtered":false,"severity":"safe"},"violence":{"filtered":false,"severity":"safe"}}}],"system_fingerprint":"fp_07e970ab25","usage":{"completion_tokens":2430,"completion_tokens_details":{"accepted_prediction_tokens":0,"audio_tokens":0,"reasoning_tokens":0,"rejected_prediction_tokens":0},"prompt_tokens":9884,"prompt_tokens_details":{"audio_tokens":0,"cached_tokens":0},"total_tokens":12314}}

        '
    headers:
      Content-Length:
      - '10537'
      Content-Type:
      - application/json
      Date:
      - Tue, 15 Jul 2025 07:22:58 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      apim-request-id:
      - 85899ae1-8ef8-49ec-804b-ac5efb44b626
      azureml-model-session:
      - d079-20250625171032
      cmp-upstream-response-duration:
      - '17535'
      x-accel-buffering:
      - 'no'
      x-content-type-options:
      - nosniff
      x-ms-deployment-name:
      - gpt-4.1
      x-ms-rai-invoked:
      - 'true'
      x-ms-region:
      - Sweden Central
      x-ratelimit-limit-requests:
      - '1006'
      x-ratelimit-limit-tokens:
      - '1006000'
      x-ratelimit-remaining-requests:
      - '1002'
      x-ratelimit-remaining-tokens:
      - '981238'
      x-request-id:
      - c077638d-2445-4817-9305-716555eada1b
    status:
      code: 200
      message: OK
version: 1

name: Vector Vscode Vcast Tests
run-name: ${{ github.ref_name }} is being tested
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
  workflow_dispatch:
env:
  NVM_DIR: /home/vcast_user/.nvm
jobs:
  unit-tests:
    if: github.event.pull_request.draft == false
    permissions: write-all
    runs-on: [self-hosted, vscode-vcast]

    container:
      image: rds-vtc-docker-dev-local.vegistry.vg.vector.int/vcast/vcast_test_ubuntu
      options: --user vcast_user

    steps:
      - name: Check out repository
        id: checkout
        uses: actions/checkout@v4
        continue-on-error: true

      - name: Wait before retry
        id: should-retry-checkout
        if: failure()
        continue-on-error: true
        run: |
          sleep 10
          exit 1

      - name: Check out repository (retry)
        if: failure()
        uses: actions/checkout@v4

      - name: Node 16
        run: |
          . ${{ env.NVM_DIR }}/nvm.sh
          nvm use v16.15.1

      # Run tests
      - name: Restore cached dependencies
        id: cache-dependencies-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-dependencies-${{ hashFiles('package.json') }}

      - name: Install dependencies
        if: steps.cache-dependencies-restore.outputs.cache-hit != 'true'
        run: npm install

      - name: Save dependencies
        if: steps.cache-dependencies-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-dependencies-${{ hashFiles('package.json') }}

      - name: Package with VSCE
        run: vsce package

      - name: Run unit tests
        run: npm run gh-test | tee output.txt

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action/linux@v2
        if: always()
        with:
          check_name: "Unit Test results"
          files: |
            ./test-output.xml

      - name: Show coverage summary
        run: |
          echo "### Coverage summary - Unit tests" >> $GITHUB_STEP_SUMMARY
          {
            echo '```'
            sed -n '/Coverage report from/,$p' output.txt
            echo '```'
          } >> $GITHUB_STEP_SUMMARY

      - name: Upload coverage artifacts
        if: always()
        run: |
          curl -Os https://uploader.codecov.io/v0.7.1/linux/codecov
          chmod +x codecov
          ./codecov -f ./coverage/clover.xml -F Unit -n vscode-vcast-unittests -t ${{ secrets.CODECOV_TOKEN }} -C ${{ github.sha }} -r ${{ github.repository }} -U ${http_proxy} >> out.txt
          cat out.txt | tail -n 1 | awk -F "'info'] " '{print $2}' | python -c 'import json,sys;obj=json.load(sys.stdin);print(obj.get("resultURL", ""))' > url.txt
          title="Coverage report URL" && \
          [ -z $(cat url.txt) ] && echo "::notice title=$title::URL not found" || echo "::notice title=$title::$(cat url.txt)"

      # Upload artifacts
      - name: Find VSIX File
        if: always()
        run: |
          VSIX_FILE=$(ls /__w/vector-vscode-vcast/vector-vscode-vcast/*.vsix)
          echo "VSIX_FILE=$VSIX_FILE" >> $GITHUB_ENV

      - name: Upload vectorcasttestexplorer artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: vectorcasttestexplorer
          path: ${{ env.VSIX_FILE }}

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage
          path: ./coverage

      # Upload release asset
      - name: Upload release asset
        if: github.event_name == 'release'
        run: |
          url="${{ github.event.release.upload_url }}" && \
          export upload_url=${url%%\{*}?name=vectorcasttestexplorer-${{ github.event.release.tag_name }}.vsix && \
          curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          -H "Content-Type: application/octet-stream" \
          $upload_url \
          --data-binary "@${{ env.VSIX_FILE }}"

  generate-matrix:
    if: github.event.pull_request.draft == false
    permissions: write-all
    runs-on: [self-hosted, vscode-vcast]

    container:
      image: rds-vtc-docker-dev-local.vegistry.vg.vector.int/vcast/vcast_test_ubuntu
      options: --user vcast_user

    outputs:
      version_group_matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - name: Check out repository
        id: checkout
        uses: actions/checkout@v4
        continue-on-error: true

      - name: Wait before retry
        id: should-retry-checkout
        if: failure()
        continue-on-error: true
        run: |
          sleep 10
          exit 1

      - name: Check out repository (retry)
        if: failure()
        uses: actions/checkout@v4

      - name: Install dependencies
        run: | 
          . ${{ env.NVM_DIR }}/nvm.sh
          nvm use v16.15.1
          npm install tsx

      - name: Set jobs matrix
        id: set-matrix
        run: |
          cd tests/internal/e2e/test
          npx tsx get_gha_matrix.ts
          echo "matrix=$(cat gha_matrix.json)" >> "$GITHUB_OUTPUT"

  e2e-tests:
    needs: generate-matrix
    if: github.event.pull_request.draft == false
    permissions: write-all
    runs-on: [self-hosted, vscode-vcast]

    container:
      image: rds-vtc-docker-dev-local.vegistry.vg.vector.int/vcast/vcast_test_ubuntu
      options: --user vcast_user

    strategy:
      matrix:
        include: ${{ fromJSON(needs.generate-matrix.outputs.version_group_matrix) }}

    env:
      BRANCH_REF: ${{ github.ref }}
      GITHUB_REPOSITORY: ${{ github.repository }}
      GITHUB_SHA: ${{ github.sha }}
      USE_VCAST_24: ${{ matrix.version == 24 && 'True' || 'False' }}
      RUN_BY_GROUP: "True"
      RUN_GROUP_NAME: ${{ matrix.group }}

    steps:
      - name: Check out repository
        id: checkout
        uses: actions/checkout@v4
        continue-on-error: true

      - name: Wait before retry
        id: should-retry-checkout
        if: failure()
        continue-on-error: true
        run: |
          sleep 10
          exit 1

      - name: Check out repository (retry)
        if: failure()
        uses: actions/checkout@v4

      - name: Node 16
        run: |
          . ${{ env.NVM_DIR }}/nvm.sh
          nvm use v16.15.1

      - name: Restore cached dependencies
        id: cache-dependencies-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-dependencies-${{ hashFiles('package.json') }}

      - name: Install dependencies
        if: steps.cache-dependencies-restore.outputs.cache-hit != 'true'
        run: npm install

      - name: Save dependencies
        if: steps.cache-dependencies-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-dependencies-${{ hashFiles('package.json') }}

      - name: Package with VSCE
        run: vsce package

      - name: Restore cached dependencies - node
        id: cache-dependencies-restore-node
        uses: actions/cache/restore@v4
        with:
          path: |
            tests/internal/e2e/node_modules
          key: ${{ runner.os }}-dependencies-${{ hashFiles('tests/internal/e2e/package.json') }}

      - name: Restore cached dependencies - vscode
        id: cache-dependencies-restore-vscode
        uses: actions/cache/restore@v4
        with:
          path: |
            tests/internal/e2e/.wdio-vscode-service
          key: ${{ runner.os }}-dependencies-webdriver-vscode

      - name: Run tests
        run: |
          ./tests/internal/e2e/run_e2e_tests.sh

      - name: Publish e2e tests results
        uses: EnricoMi/publish-unit-test-result-action/linux@v2
        if: always()
        env:
          CHECK_NAME: E2e Test results - Vcast ${{ matrix.version }} - Group ${{ matrix.group }}
        with:
          check_name: ${{ env.CHECK_NAME }}
          large_files: true
          files: |
            ./tests/internal/e2e/test_results/*.xml

      - name: Uploading screenshots
        uses: actions/upload-artifact@v4
        if: always()
        env:
          ARTIFACT_NAME: e2e_screenshots_${{ matrix.version }}_${{ matrix.group }}
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./tests/internal/e2e/*.png

      - name: Show run summary
        if: always()
        run: |
          echo "### Run summary - Vcast ${{ matrix.version }} - Group ${{ matrix.group }}" >> $GITHUB_STEP_SUMMARY
          content=$([ -s ./tests/internal/e2e/gh_e2e_summary.md ] && cat ./tests/internal/e2e/gh_e2e_summary.md || echo 'Not available')
          echo "${content}" >> $GITHUB_STEP_SUMMARY
          
          COMMIT_DATE=$(git log -1 --format=%cd --date=format:%Y-%m-%dT%H:%M:%S)
          ARTIFACTORY_URL="https://artifactory.vi.vector.int:443/artifactory/rds-build-packages-generic-dev/vscode/tests-results/${{ github.ref_name }}/$COMMIT_DATE-${{ github.sha }}"
          count=`ls -1 tests/internal/e2e/*.png 2>/dev/null | wc -l`
          if [ $count != 0 ] ; then
            cd tests/internal/e2e
            tar -cvzf e2e_vcast${{ matrix.version }}_${{ matrix.group }}_screenshots.tar.gz *.png > /dev/null
            URL="$ARTIFACTORY_URL/e2e_vcast${{ matrix.version }}_${{ matrix.group }}_screenshots/"
            curl -H "X-Explode-Archive: true" -H "X-JFrog-Art-Api:${{ secrets.ARTIFACTORY_TOKEN }}" -X PUT $URL -T e2e_vcast${{ matrix.version }}_${{ matrix.group }}_screenshots.tar.gz
            cd ../../..
            echo "[Screenshots]($URL)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Save dependencies - node
        if: steps.cache-dependencies-restore-node.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            tests/internal/e2e/node_modules
          key: ${{ runner.os }}-dependencies-${{ hashFiles('tests/internal/e2e/package.json') }}

      - name: Save dependencies - vscode
        if: always() && steps.cache-dependencies-restore-vscode.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            tests/internal/e2e/.wdio-vscode-service
          key: ${{ runner.os }}-dependencies-webdriver-vscode

  code-formatting:
    if: github.event.pull_request.draft == false
    permissions: write-all
    runs-on: [ self-hosted, vscode-vcast]

    container:
      image: rds-vtc-docker-dev-local.vegistry.vg.vector.int/vcast/vcast_test_ubuntu
      options: --user vcast_user

    steps:
      - name: Check out repository
        id: checkout
        uses: actions/checkout@v4
        continue-on-error: true

      - name: Wait before retry
        id: should-retry-checkout
        if: failure()
        continue-on-error: true
        run: |
          sleep 10
          exit 1

      - name: Check out repository (retry)
        if: failure()
        uses: actions/checkout@v4

      - name: Black
        shell: bash
        run: |
          /home/vcast_user/.venv/bin/python -m black . --check --extend-exclude '/(.*venv.*)/'
          exit $?